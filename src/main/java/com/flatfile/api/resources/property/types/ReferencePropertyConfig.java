/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ReferencePropertyConfig.Builder.class)
public final class ReferencePropertyConfig {
    private final String ref;

    private final String key;

    private final ReferencePropertyRelationship relationship;

    private final Map<String, Object> additionalProperties;

    private ReferencePropertyConfig(
            String ref,
            String key,
            ReferencePropertyRelationship relationship,
            Map<String, Object> additionalProperties) {
        this.ref = ref;
        this.key = key;
        this.relationship = relationship;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Full path reference to a sheet configuration. Must be in the same workbook.
     */
    @JsonProperty("ref")
    public String getRef() {
        return ref;
    }

    /**
     * @return Key of the property to use as the reference key. Defaults to <code>id</code>
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * @return The type of relationship this defines
     */
    @JsonProperty("relationship")
    public ReferencePropertyRelationship getRelationship() {
        return relationship;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReferencePropertyConfig && equalTo((ReferencePropertyConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReferencePropertyConfig other) {
        return ref.equals(other.ref) && key.equals(other.key) && relationship.equals(other.relationship);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ref, this.key, this.relationship);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RefStage builder() {
        return new Builder();
    }

    public interface RefStage {
        KeyStage ref(String ref);

        Builder from(ReferencePropertyConfig other);
    }

    public interface KeyStage {
        RelationshipStage key(String key);
    }

    public interface RelationshipStage {
        _FinalStage relationship(ReferencePropertyRelationship relationship);
    }

    public interface _FinalStage {
        ReferencePropertyConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RefStage, KeyStage, RelationshipStage, _FinalStage {
        private String ref;

        private String key;

        private ReferencePropertyRelationship relationship;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ReferencePropertyConfig other) {
            ref(other.getRef());
            key(other.getKey());
            relationship(other.getRelationship());
            return this;
        }

        /**
         * <p>Full path reference to a sheet configuration. Must be in the same workbook.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ref")
        public KeyStage ref(String ref) {
            this.ref = ref;
            return this;
        }

        /**
         * <p>Key of the property to use as the reference key. Defaults to <code>id</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("key")
        public RelationshipStage key(String key) {
            this.key = key;
            return this;
        }

        /**
         * <p>The type of relationship this defines</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("relationship")
        public _FinalStage relationship(ReferencePropertyRelationship relationship) {
            this.relationship = relationship;
            return this;
        }

        @java.lang.Override
        public ReferencePropertyConfig build() {
            return new ReferencePropertyConfig(ref, key, relationship, additionalProperties);
        }
    }
}
