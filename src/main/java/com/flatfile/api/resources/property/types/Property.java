/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class Property {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private Property(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static Property string(StringProperty value) {
        return new Property(new StringValue(value));
    }

    public static Property number(NumberProperty value) {
        return new Property(new NumberValue(value));
    }

    public static Property boolean_(BooleanProperty value) {
        return new Property(new BooleanValue(value));
    }

    public static Property date(DateProperty value) {
        return new Property(new DateValue(value));
    }

    public static Property enum_(EnumProperty value) {
        return new Property(new EnumValue(value));
    }

    public static Property reference(ReferenceProperty value) {
        return new Property(new ReferenceValue(value));
    }

    public boolean isString() {
        return value instanceof StringValue;
    }

    public boolean isNumber() {
        return value instanceof NumberValue;
    }

    public boolean isBoolean() {
        return value instanceof BooleanValue;
    }

    public boolean isDate() {
        return value instanceof DateValue;
    }

    public boolean isEnum() {
        return value instanceof EnumValue;
    }

    public boolean isReference() {
        return value instanceof ReferenceValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<StringProperty> getString() {
        if (isString()) {
            return Optional.of(((StringValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<NumberProperty> getNumber() {
        if (isNumber()) {
            return Optional.of(((NumberValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BooleanProperty> getBoolean() {
        if (isBoolean()) {
            return Optional.of(((BooleanValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DateProperty> getDate() {
        if (isDate()) {
            return Optional.of(((DateValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<EnumProperty> getEnum() {
        if (isEnum()) {
            return Optional.of(((EnumValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ReferenceProperty> getReference() {
        if (isReference()) {
            return Optional.of(((ReferenceValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitString(StringProperty string);

        T visitNumber(NumberProperty number);

        T visitBoolean(BooleanProperty boolean_);

        T visitDate(DateProperty date);

        T visitEnum(EnumProperty enum_);

        T visitReference(ReferenceProperty reference);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(StringValue.class),
        @JsonSubTypes.Type(NumberValue.class),
        @JsonSubTypes.Type(BooleanValue.class),
        @JsonSubTypes.Type(DateValue.class),
        @JsonSubTypes.Type(EnumValue.class),
        @JsonSubTypes.Type(ReferenceValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("string")
    private static final class StringValue implements Value {
        @JsonUnwrapped
        private StringProperty value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private StringValue() {}

        private StringValue(StringProperty value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitString(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof StringValue && equalTo((StringValue) other);
        }

        private boolean equalTo(StringValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("number")
    private static final class NumberValue implements Value {
        @JsonUnwrapped
        private NumberProperty value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private NumberValue() {}

        private NumberValue(NumberProperty value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitNumber(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof NumberValue && equalTo((NumberValue) other);
        }

        private boolean equalTo(NumberValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("boolean")
    private static final class BooleanValue implements Value {
        @JsonUnwrapped
        private BooleanProperty value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BooleanValue() {}

        private BooleanValue(BooleanProperty value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBoolean(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BooleanValue && equalTo((BooleanValue) other);
        }

        private boolean equalTo(BooleanValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("date")
    private static final class DateValue implements Value {
        @JsonUnwrapped
        private DateProperty value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DateValue() {}

        private DateValue(DateProperty value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDate(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DateValue && equalTo((DateValue) other);
        }

        private boolean equalTo(DateValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("enum")
    private static final class EnumValue implements Value {
        @JsonUnwrapped
        private EnumProperty value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private EnumValue() {}

        private EnumValue(EnumProperty value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitEnum(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof EnumValue && equalTo((EnumValue) other);
        }

        private boolean equalTo(EnumValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("reference")
    private static final class ReferenceValue implements Value {
        @JsonUnwrapped
        private ReferenceProperty value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ReferenceValue() {}

        private ReferenceValue(ReferenceProperty value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitReference(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ReferenceValue && equalTo((ReferenceValue) other);
        }

        private boolean equalTo(ReferenceValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Property{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
