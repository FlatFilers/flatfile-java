/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExternalConstraint.Builder.class)
public final class ExternalConstraint {
    private final String validator;

    private final Optional<Object> config;

    private final Map<String, Object> additionalProperties;

    private ExternalConstraint(String validator, Optional<Object> config, Map<String, Object> additionalProperties) {
        this.validator = validator;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("validator")
    public String getValidator() {
        return validator;
    }

    @JsonProperty("config")
    public Optional<Object> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExternalConstraint && equalTo((ExternalConstraint) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExternalConstraint other) {
        return validator.equals(other.validator) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.validator, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ValidatorStage builder() {
        return new Builder();
    }

    public interface ValidatorStage {
        _FinalStage validator(@NotNull String validator);

        Builder from(ExternalConstraint other);
    }

    public interface _FinalStage {
        ExternalConstraint build();

        _FinalStage config(Optional<Object> config);

        _FinalStage config(Object config);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ValidatorStage, _FinalStage {
        private String validator;

        private Optional<Object> config = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ExternalConstraint other) {
            validator(other.getValidator());
            config(other.getConfig());
            return this;
        }

        @java.lang.Override
        @JsonSetter("validator")
        public _FinalStage validator(@NotNull String validator) {
            this.validator = Objects.requireNonNull(validator, "validator must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage config(Object config) {
            this.config = Optional.ofNullable(config);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<Object> config) {
            this.config = config;
            return this;
        }

        @java.lang.Override
        public ExternalConstraint build() {
            return new ExternalConstraint(validator, config, additionalProperties);
        }
    }
}
