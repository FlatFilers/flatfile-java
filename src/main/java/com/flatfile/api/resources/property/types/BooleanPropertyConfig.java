/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BooleanPropertyConfig.Builder.class)
public final class BooleanPropertyConfig {
    private final boolean allowIndeterminate;

    private final Map<String, Object> additionalProperties;

    private BooleanPropertyConfig(boolean allowIndeterminate, Map<String, Object> additionalProperties) {
        this.allowIndeterminate = allowIndeterminate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Allow a neither true or false state to be stored as <code>null</code>
     */
    @JsonProperty("allowIndeterminate")
    public boolean getAllowIndeterminate() {
        return allowIndeterminate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BooleanPropertyConfig && equalTo((BooleanPropertyConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BooleanPropertyConfig other) {
        return allowIndeterminate == other.allowIndeterminate;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.allowIndeterminate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AllowIndeterminateStage builder() {
        return new Builder();
    }

    public interface AllowIndeterminateStage {
        _FinalStage allowIndeterminate(boolean allowIndeterminate);

        Builder from(BooleanPropertyConfig other);
    }

    public interface _FinalStage {
        BooleanPropertyConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AllowIndeterminateStage, _FinalStage {
        private boolean allowIndeterminate;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BooleanPropertyConfig other) {
            allowIndeterminate(other.getAllowIndeterminate());
            return this;
        }

        /**
         * <p>Allow a neither true or false state to be stored as <code>null</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("allowIndeterminate")
        public _FinalStage allowIndeterminate(boolean allowIndeterminate) {
            this.allowIndeterminate = allowIndeterminate;
            return this;
        }

        @java.lang.Override
        public BooleanPropertyConfig build() {
            return new BooleanPropertyConfig(allowIndeterminate, additionalProperties);
        }
    }
}
