/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UniqueConstraintConfig.Builder.class)
public final class UniqueConstraintConfig {
    private final Optional<Boolean> caseSensitive;

    private final Optional<Boolean> ignoreEmpty;

    private final Map<String, Object> additionalProperties;

    private UniqueConstraintConfig(
            Optional<Boolean> caseSensitive, Optional<Boolean> ignoreEmpty, Map<String, Object> additionalProperties) {
        this.caseSensitive = caseSensitive;
        this.ignoreEmpty = ignoreEmpty;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Ignore casing when determining uniqueness
     */
    @JsonProperty("caseSensitive")
    public Optional<Boolean> getCaseSensitive() {
        return caseSensitive;
    }

    /**
     * @return Do not flag empty values as duplicate
     */
    @JsonProperty("ignoreEmpty")
    public Optional<Boolean> getIgnoreEmpty() {
        return ignoreEmpty;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UniqueConstraintConfig && equalTo((UniqueConstraintConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UniqueConstraintConfig other) {
        return caseSensitive.equals(other.caseSensitive) && ignoreEmpty.equals(other.ignoreEmpty);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.caseSensitive, this.ignoreEmpty);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> caseSensitive = Optional.empty();

        private Optional<Boolean> ignoreEmpty = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UniqueConstraintConfig other) {
            caseSensitive(other.getCaseSensitive());
            ignoreEmpty(other.getIgnoreEmpty());
            return this;
        }

        @JsonSetter(value = "caseSensitive", nulls = Nulls.SKIP)
        public Builder caseSensitive(Optional<Boolean> caseSensitive) {
            this.caseSensitive = caseSensitive;
            return this;
        }

        public Builder caseSensitive(Boolean caseSensitive) {
            this.caseSensitive = Optional.of(caseSensitive);
            return this;
        }

        @JsonSetter(value = "ignoreEmpty", nulls = Nulls.SKIP)
        public Builder ignoreEmpty(Optional<Boolean> ignoreEmpty) {
            this.ignoreEmpty = ignoreEmpty;
            return this;
        }

        public Builder ignoreEmpty(Boolean ignoreEmpty) {
            this.ignoreEmpty = Optional.of(ignoreEmpty);
            return this;
        }

        public UniqueConstraintConfig build() {
            return new UniqueConstraintConfig(caseSensitive, ignoreEmpty, additionalProperties);
        }
    }
}
