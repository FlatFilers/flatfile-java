/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class Constraint {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private Constraint(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static Constraint required() {
        return new Constraint(new RequiredValue());
    }

    public static Constraint unique(UniqueConstraint value) {
        return new Constraint(new UniqueValue(value));
    }

    public static Constraint computed() {
        return new Constraint(new ComputedValue());
    }

    public static Constraint external(ExternalConstraint value) {
        return new Constraint(new ExternalValue(value));
    }

    public boolean isRequired() {
        return value instanceof RequiredValue;
    }

    public boolean isUnique() {
        return value instanceof UniqueValue;
    }

    public boolean isComputed() {
        return value instanceof ComputedValue;
    }

    public boolean isExternal() {
        return value instanceof ExternalValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<UniqueConstraint> getUnique() {
        if (isUnique()) {
            return Optional.of(((UniqueValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ExternalConstraint> getExternal() {
        if (isExternal()) {
            return Optional.of(((ExternalValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitRequired();

        T visitUnique(UniqueConstraint unique);

        T visitComputed();

        T visitExternal(ExternalConstraint external);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(RequiredValue.class),
        @JsonSubTypes.Type(UniqueValue.class),
        @JsonSubTypes.Type(ComputedValue.class),
        @JsonSubTypes.Type(ExternalValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("required")
    private static final class RequiredValue implements Value {
        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RequiredValue() {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRequired();
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RequiredValue;
        }

        @java.lang.Override
        public String toString() {
            return "Constraint{" + "}";
        }
    }

    @JsonTypeName("unique")
    private static final class UniqueValue implements Value {
        @JsonUnwrapped
        private UniqueConstraint value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private UniqueValue() {}

        private UniqueValue(UniqueConstraint value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitUnique(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof UniqueValue && equalTo((UniqueValue) other);
        }

        private boolean equalTo(UniqueValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Constraint{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("computed")
    private static final class ComputedValue implements Value {
        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ComputedValue() {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitComputed();
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ComputedValue;
        }

        @java.lang.Override
        public String toString() {
            return "Constraint{" + "}";
        }
    }

    @JsonTypeName("external")
    private static final class ExternalValue implements Value {
        @JsonUnwrapped
        private ExternalConstraint value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ExternalValue() {}

        private ExternalValue(ExternalConstraint value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitExternal(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ExternalValue && equalTo((ExternalValue) other);
        }

        private boolean equalTo(ExternalValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Constraint{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Constraint{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
