/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ArrayableProperty.Builder.class)
public final class ArrayableProperty implements IArrayableProperty {
    private final Optional<Boolean> isArray;

    private final Map<String, Object> additionalProperties;

    private ArrayableProperty(Optional<Boolean> isArray, Map<String, Object> additionalProperties) {
        this.isArray = isArray;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Will allow multiple values and store as an array
     */
    @JsonProperty("isArray")
    @java.lang.Override
    public Optional<Boolean> getIsArray() {
        return isArray;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ArrayableProperty && equalTo((ArrayableProperty) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ArrayableProperty other) {
        return isArray.equals(other.isArray);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.isArray);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> isArray = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ArrayableProperty other) {
            isArray(other.getIsArray());
            return this;
        }

        @JsonSetter(value = "isArray", nulls = Nulls.SKIP)
        public Builder isArray(Optional<Boolean> isArray) {
            this.isArray = isArray;
            return this;
        }

        public Builder isArray(Boolean isArray) {
            this.isArray = Optional.ofNullable(isArray);
            return this;
        }

        public ArrayableProperty build() {
            return new ArrayableProperty(isArray, additionalProperties);
        }
    }
}
