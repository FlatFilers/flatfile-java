/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.property.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NumberConfig.Builder.class)
public final class NumberConfig {
    private final int decimalPlaces;

    private final Map<String, Object> additionalProperties;

    private NumberConfig(int decimalPlaces, Map<String, Object> additionalProperties) {
        this.decimalPlaces = decimalPlaces;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Number of decimal places to round data to
     */
    @JsonProperty("decimalPlaces")
    public int getDecimalPlaces() {
        return decimalPlaces;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NumberConfig && equalTo((NumberConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NumberConfig other) {
        return decimalPlaces == other.decimalPlaces;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.decimalPlaces);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DecimalPlacesStage builder() {
        return new Builder();
    }

    public interface DecimalPlacesStage {
        _FinalStage decimalPlaces(int decimalPlaces);

        Builder from(NumberConfig other);
    }

    public interface _FinalStage {
        NumberConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DecimalPlacesStage, _FinalStage {
        private int decimalPlaces;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(NumberConfig other) {
            decimalPlaces(other.getDecimalPlaces());
            return this;
        }

        /**
         * <p>Number of decimal places to round data to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("decimalPlaces")
        public _FinalStage decimalPlaces(int decimalPlaces) {
            this.decimalPlaces = decimalPlaces;
            return this;
        }

        @Override
        public NumberConfig build() {
            return new NumberConfig(decimalPlaces, additionalProperties);
        }
    }
}
