/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.agents.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.AccountId;
import com.flatfile.api.resources.commons.types.AgentId;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import com.flatfile.api.resources.events.types.EventTopic;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Agent.Builder.class)
public final class Agent implements IAgentConfig {
    private final Optional<List<EventTopic>> topics;

    private final Optional<Compiler> compiler;

    private final Optional<String> source;

    private final Optional<String> slug;

    private final AgentId id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final AccountId accountId;

    private final EnvironmentId environmentId;

    private final Map<String, Object> additionalProperties;

    private Agent(
            Optional<List<EventTopic>> topics,
            Optional<Compiler> compiler,
            Optional<String> source,
            Optional<String> slug,
            AgentId id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            AccountId accountId,
            EnvironmentId environmentId,
            Map<String, Object> additionalProperties) {
        this.topics = topics;
        this.compiler = compiler;
        this.source = source;
        this.slug = slug;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.accountId = accountId;
        this.environmentId = environmentId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The topics the agent should listen for
     */
    @JsonProperty("topics")
    @java.lang.Override
    public Optional<List<EventTopic>> getTopics() {
        return topics;
    }

    /**
     * @return The compiler of the agent
     */
    @JsonProperty("compiler")
    @java.lang.Override
    public Optional<Compiler> getCompiler() {
        return compiler;
    }

    /**
     * @return The source of the agent
     */
    @JsonProperty("source")
    @java.lang.Override
    public Optional<String> getSource() {
        return source;
    }

    /**
     * @return The slug of the agent
     */
    @JsonProperty("slug")
    @java.lang.Override
    public Optional<String> getSlug() {
        return slug;
    }

    @JsonProperty("id")
    public AgentId getId() {
        return id;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("accountId")
    public AccountId getAccountId() {
        return accountId;
    }

    @JsonProperty("environmentId")
    public EnvironmentId getEnvironmentId() {
        return environmentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Agent && equalTo((Agent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Agent other) {
        return topics.equals(other.topics)
                && compiler.equals(other.compiler)
                && source.equals(other.source)
                && slug.equals(other.slug)
                && id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && accountId.equals(other.accountId)
                && environmentId.equals(other.environmentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.topics,
                this.compiler,
                this.source,
                this.slug,
                this.id,
                this.createdAt,
                this.updatedAt,
                this.accountId,
                this.environmentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        CreatedAtStage id(AgentId id);

        Builder from(Agent other);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        AccountIdStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface AccountIdStage {
        EnvironmentIdStage accountId(AccountId accountId);
    }

    public interface EnvironmentIdStage {
        _FinalStage environmentId(EnvironmentId environmentId);
    }

    public interface _FinalStage {
        Agent build();

        _FinalStage topics(Optional<List<EventTopic>> topics);

        _FinalStage topics(List<EventTopic> topics);

        _FinalStage compiler(Optional<Compiler> compiler);

        _FinalStage compiler(Compiler compiler);

        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        _FinalStage slug(Optional<String> slug);

        _FinalStage slug(String slug);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, CreatedAtStage, UpdatedAtStage, AccountIdStage, EnvironmentIdStage, _FinalStage {
        private AgentId id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private AccountId accountId;

        private EnvironmentId environmentId;

        private Optional<String> slug = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Compiler> compiler = Optional.empty();

        private Optional<List<EventTopic>> topics = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Agent other) {
            topics(other.getTopics());
            compiler(other.getCompiler());
            source(other.getSource());
            slug(other.getSlug());
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            accountId(other.getAccountId());
            environmentId(other.getEnvironmentId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(AgentId id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public AccountIdStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountId")
        public EnvironmentIdStage accountId(AccountId accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("environmentId")
        public _FinalStage environmentId(EnvironmentId environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        /**
         * <p>The slug of the agent</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage slug(String slug) {
            this.slug = Optional.of(slug);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "slug", nulls = Nulls.SKIP)
        public _FinalStage slug(Optional<String> slug) {
            this.slug = slug;
            return this;
        }

        /**
         * <p>The source of the agent</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.of(source);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        /**
         * <p>The compiler of the agent</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage compiler(Compiler compiler) {
            this.compiler = Optional.of(compiler);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "compiler", nulls = Nulls.SKIP)
        public _FinalStage compiler(Optional<Compiler> compiler) {
            this.compiler = compiler;
            return this;
        }

        /**
         * <p>The topics the agent should listen for</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage topics(List<EventTopic> topics) {
            this.topics = Optional.of(topics);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "topics", nulls = Nulls.SKIP)
        public _FinalStage topics(Optional<List<EventTopic>> topics) {
            this.topics = topics;
            return this;
        }

        @java.lang.Override
        public Agent build() {
            return new Agent(
                    topics,
                    compiler,
                    source,
                    slug,
                    id,
                    createdAt,
                    updatedAt,
                    accountId,
                    environmentId,
                    additionalProperties);
        }
    }
}
