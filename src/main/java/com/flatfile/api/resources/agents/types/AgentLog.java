/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.agents.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AgentLog.Builder.class)
public final class AgentLog {
    private final String eventId;

    private final boolean success;

    private final String createdAt;

    private final String completedAt;

    private final Optional<String> log;

    private final Map<String, Object> additionalProperties;

    private AgentLog(
            String eventId,
            boolean success,
            String createdAt,
            String completedAt,
            Optional<String> log,
            Map<String, Object> additionalProperties) {
        this.eventId = eventId;
        this.success = success;
        this.createdAt = createdAt;
        this.completedAt = completedAt;
        this.log = log;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventId")
    public String getEventId() {
        return eventId;
    }

    /**
     * @return Whether the agent execution was successful
     */
    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    @JsonProperty("createdAt")
    public String getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("completedAt")
    public String getCompletedAt() {
        return completedAt;
    }

    /**
     * @return The log of the agent execution
     */
    @JsonProperty("log")
    public Optional<String> getLog() {
        return log;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentLog && equalTo((AgentLog) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentLog other) {
        return eventId.equals(other.eventId)
                && success == other.success
                && createdAt.equals(other.createdAt)
                && completedAt.equals(other.completedAt)
                && log.equals(other.log);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.eventId, this.success, this.createdAt, this.completedAt, this.log);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventIdStage builder() {
        return new Builder();
    }

    public interface EventIdStage {
        SuccessStage eventId(String eventId);

        Builder from(AgentLog other);
    }

    public interface SuccessStage {
        CreatedAtStage success(boolean success);
    }

    public interface CreatedAtStage {
        CompletedAtStage createdAt(String createdAt);
    }

    public interface CompletedAtStage {
        _FinalStage completedAt(String completedAt);
    }

    public interface _FinalStage {
        AgentLog build();

        _FinalStage log(Optional<String> log);

        _FinalStage log(String log);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EventIdStage, SuccessStage, CreatedAtStage, CompletedAtStage, _FinalStage {
        private String eventId;

        private boolean success;

        private String createdAt;

        private String completedAt;

        private Optional<String> log = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(AgentLog other) {
            eventId(other.getEventId());
            success(other.getSuccess());
            createdAt(other.getCreatedAt());
            completedAt(other.getCompletedAt());
            log(other.getLog());
            return this;
        }

        @Override
        @JsonSetter("eventId")
        public SuccessStage eventId(String eventId) {
            this.eventId = eventId;
            return this;
        }

        /**
         * <p>Whether the agent execution was successful</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("success")
        public CreatedAtStage success(boolean success) {
            this.success = success;
            return this;
        }

        @Override
        @JsonSetter("createdAt")
        public CompletedAtStage createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @Override
        @JsonSetter("completedAt")
        public _FinalStage completedAt(String completedAt) {
            this.completedAt = completedAt;
            return this;
        }

        /**
         * <p>The log of the agent execution</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage log(String log) {
            this.log = Optional.of(log);
            return this;
        }

        @Override
        @JsonSetter(value = "log", nulls = Nulls.SKIP)
        public _FinalStage log(Optional<String> log) {
            this.log = log;
            return this;
        }

        @Override
        public AgentLog build() {
            return new AgentLog(eventId, success, createdAt, completedAt, log, additionalProperties);
        }
    }
}
