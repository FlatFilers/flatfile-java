/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.agents.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.EventId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DetailedAgentLog.Builder.class)
public final class DetailedAgentLog {
    private final EventId eventId;

    private final boolean success;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime completedAt;

    private final int duration;

    private final String topic;

    private final Map<String, Object> context;

    private final Optional<String> log;

    private final Map<String, Object> additionalProperties;

    private DetailedAgentLog(
            EventId eventId,
            boolean success,
            OffsetDateTime createdAt,
            OffsetDateTime completedAt,
            int duration,
            String topic,
            Map<String, Object> context,
            Optional<String> log,
            Map<String, Object> additionalProperties) {
        this.eventId = eventId;
        this.success = success;
        this.createdAt = createdAt;
        this.completedAt = completedAt;
        this.duration = duration;
        this.topic = topic;
        this.context = context;
        this.log = log;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventId")
    public EventId getEventId() {
        return eventId;
    }

    /**
     * @return Whether the agent execution was successful
     */
    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("completedAt")
    public OffsetDateTime getCompletedAt() {
        return completedAt;
    }

    /**
     * @return The duration of the agent execution
     */
    @JsonProperty("duration")
    public int getDuration() {
        return duration;
    }

    /**
     * @return The topics of the agent execution
     */
    @JsonProperty("topic")
    public String getTopic() {
        return topic;
    }

    /**
     * @return The context of the agent execution
     */
    @JsonProperty("context")
    public Map<String, Object> getContext() {
        return context;
    }

    /**
     * @return The log of the agent execution
     */
    @JsonProperty("log")
    public Optional<String> getLog() {
        return log;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DetailedAgentLog && equalTo((DetailedAgentLog) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DetailedAgentLog other) {
        return eventId.equals(other.eventId)
                && success == other.success
                && createdAt.equals(other.createdAt)
                && completedAt.equals(other.completedAt)
                && duration == other.duration
                && topic.equals(other.topic)
                && context.equals(other.context)
                && log.equals(other.log);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.eventId,
                this.success,
                this.createdAt,
                this.completedAt,
                this.duration,
                this.topic,
                this.context,
                this.log);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventIdStage builder() {
        return new Builder();
    }

    public interface EventIdStage {
        SuccessStage eventId(EventId eventId);

        Builder from(DetailedAgentLog other);
    }

    public interface SuccessStage {
        CreatedAtStage success(boolean success);
    }

    public interface CreatedAtStage {
        CompletedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface CompletedAtStage {
        DurationStage completedAt(OffsetDateTime completedAt);
    }

    public interface DurationStage {
        TopicStage duration(int duration);
    }

    public interface TopicStage {
        _FinalStage topic(String topic);
    }

    public interface _FinalStage {
        DetailedAgentLog build();

        _FinalStage context(Map<String, Object> context);

        _FinalStage putAllContext(Map<String, Object> context);

        _FinalStage context(String key, Object value);

        _FinalStage log(Optional<String> log);

        _FinalStage log(String log);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EventIdStage,
                    SuccessStage,
                    CreatedAtStage,
                    CompletedAtStage,
                    DurationStage,
                    TopicStage,
                    _FinalStage {
        private EventId eventId;

        private boolean success;

        private OffsetDateTime createdAt;

        private OffsetDateTime completedAt;

        private int duration;

        private String topic;

        private Optional<String> log = Optional.empty();

        private Map<String, Object> context = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DetailedAgentLog other) {
            eventId(other.getEventId());
            success(other.getSuccess());
            createdAt(other.getCreatedAt());
            completedAt(other.getCompletedAt());
            duration(other.getDuration());
            topic(other.getTopic());
            context(other.getContext());
            log(other.getLog());
            return this;
        }

        @java.lang.Override
        @JsonSetter("eventId")
        public SuccessStage eventId(EventId eventId) {
            this.eventId = eventId;
            return this;
        }

        /**
         * <p>Whether the agent execution was successful</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("success")
        public CreatedAtStage success(boolean success) {
            this.success = success;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public CompletedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("completedAt")
        public DurationStage completedAt(OffsetDateTime completedAt) {
            this.completedAt = completedAt;
            return this;
        }

        /**
         * <p>The duration of the agent execution</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("duration")
        public TopicStage duration(int duration) {
            this.duration = duration;
            return this;
        }

        /**
         * <p>The topics of the agent execution</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("topic")
        public _FinalStage topic(String topic) {
            this.topic = topic;
            return this;
        }

        /**
         * <p>The log of the agent execution</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage log(String log) {
            this.log = Optional.of(log);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "log", nulls = Nulls.SKIP)
        public _FinalStage log(Optional<String> log) {
            this.log = log;
            return this;
        }

        /**
         * <p>The context of the agent execution</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage context(String key, Object value) {
            this.context.put(key, value);
            return this;
        }

        /**
         * <p>The context of the agent execution</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllContext(Map<String, Object> context) {
            this.context.putAll(context);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "context", nulls = Nulls.SKIP)
        public _FinalStage context(Map<String, Object> context) {
            this.context.clear();
            this.context.putAll(context);
            return this;
        }

        @java.lang.Override
        public DetailedAgentLog build() {
            return new DetailedAgentLog(
                    eventId, success, createdAt, completedAt, duration, topic, context, log, additionalProperties);
        }
    }
}
