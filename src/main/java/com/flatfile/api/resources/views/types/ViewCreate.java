/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.views.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ViewCreate.Builder.class)
public final class ViewCreate {
    private final SheetId sheetId;

    private final String name;

    private final ViewConfig config;

    private final Map<String, Object> additionalProperties;

    private ViewCreate(SheetId sheetId, String name, ViewConfig config, Map<String, Object> additionalProperties) {
        this.sheetId = sheetId;
        this.name = name;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sheetId")
    public SheetId getSheetId() {
        return sheetId;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("config")
    public ViewConfig getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ViewCreate && equalTo((ViewCreate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ViewCreate other) {
        return sheetId.equals(other.sheetId) && name.equals(other.name) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sheetId, this.name, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SheetIdStage builder() {
        return new Builder();
    }

    public interface SheetIdStage {
        NameStage sheetId(@NotNull SheetId sheetId);

        Builder from(ViewCreate other);
    }

    public interface NameStage {
        ConfigStage name(@NotNull String name);
    }

    public interface ConfigStage {
        _FinalStage config(@NotNull ViewConfig config);
    }

    public interface _FinalStage {
        ViewCreate build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SheetIdStage, NameStage, ConfigStage, _FinalStage {
        private SheetId sheetId;

        private String name;

        private ViewConfig config;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ViewCreate other) {
            sheetId(other.getSheetId());
            name(other.getName());
            config(other.getConfig());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sheetId")
        public NameStage sheetId(@NotNull SheetId sheetId) {
            this.sheetId = Objects.requireNonNull(sheetId, "sheetId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public ConfigStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("config")
        public _FinalStage config(@NotNull ViewConfig config) {
            this.config = Objects.requireNonNull(config, "config must not be null");
            return this;
        }

        @java.lang.Override
        public ViewCreate build() {
            return new ViewCreate(sheetId, name, config, additionalProperties);
        }
    }
}
