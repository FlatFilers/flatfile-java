/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.views.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import com.flatfile.api.resources.commons.types.ViewId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = View.Builder.class)
public final class View {
    private final ViewId id;

    private final SheetId sheetId;

    private final String name;

    private final ViewConfig config;

    private final Map<String, Object> additionalProperties;

    private View(ViewId id, SheetId sheetId, String name, ViewConfig config, Map<String, Object> additionalProperties) {
        this.id = id;
        this.sheetId = sheetId;
        this.name = name;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the view
     */
    @JsonProperty("id")
    public ViewId getId() {
        return id;
    }

    /**
     * @return The associated sheet ID of the view
     */
    @JsonProperty("sheetId")
    public SheetId getSheetId() {
        return sheetId;
    }

    /**
     * @return The name of the view
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The view filters of the view
     */
    @JsonProperty("config")
    public ViewConfig getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof View && equalTo((View) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(View other) {
        return id.equals(other.id)
                && sheetId.equals(other.sheetId)
                && name.equals(other.name)
                && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.sheetId, this.name, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        SheetIdStage id(ViewId id);

        Builder from(View other);
    }

    public interface SheetIdStage {
        NameStage sheetId(SheetId sheetId);
    }

    public interface NameStage {
        ConfigStage name(String name);
    }

    public interface ConfigStage {
        _FinalStage config(ViewConfig config);
    }

    public interface _FinalStage {
        View build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, SheetIdStage, NameStage, ConfigStage, _FinalStage {
        private ViewId id;

        private SheetId sheetId;

        private String name;

        private ViewConfig config;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(View other) {
            id(other.getId());
            sheetId(other.getSheetId());
            name(other.getName());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>The ID of the view</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public SheetIdStage id(ViewId id) {
            this.id = id;
            return this;
        }

        /**
         * <p>The associated sheet ID of the view</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sheetId")
        public NameStage sheetId(SheetId sheetId) {
            this.sheetId = sheetId;
            return this;
        }

        /**
         * <p>The name of the view</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ConfigStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The view filters of the view</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("config")
        public _FinalStage config(ViewConfig config) {
            this.config = config;
            return this;
        }

        @java.lang.Override
        public View build() {
            return new View(id, sheetId, name, config, additionalProperties);
        }
    }
}
