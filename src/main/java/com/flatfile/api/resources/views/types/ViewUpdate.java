/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.views.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ViewUpdate.Builder.class)
public final class ViewUpdate {
    private final Optional<String> name;

    private final ViewConfig config;

    private final Map<String, Object> additionalProperties;

    private ViewUpdate(Optional<String> name, ViewConfig config, Map<String, Object> additionalProperties) {
        this.name = name;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("config")
    public ViewConfig getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ViewUpdate && equalTo((ViewUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ViewUpdate other) {
        return name.equals(other.name) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConfigStage builder() {
        return new Builder();
    }

    public interface ConfigStage {
        _FinalStage config(ViewConfig config);

        Builder from(ViewUpdate other);
    }

    public interface _FinalStage {
        ViewUpdate build();

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConfigStage, _FinalStage {
        private ViewConfig config;

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ViewUpdate other) {
            name(other.getName());
            config(other.getConfig());
            return this;
        }

        @java.lang.Override
        @JsonSetter("config")
        public _FinalStage config(ViewConfig config) {
            this.config = config;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public ViewUpdate build() {
            return new ViewUpdate(name, config, additionalProperties);
        }
    }
}
