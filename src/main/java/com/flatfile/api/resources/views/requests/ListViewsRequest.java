/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.views.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListViewsRequest.Builder.class)
public final class ListViewsRequest {
    private final SheetId sheetId;

    private final Map<String, Object> additionalProperties;

    private ListViewsRequest(SheetId sheetId, Map<String, Object> additionalProperties) {
        this.sheetId = sheetId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The associated sheet ID of the view.
     */
    @JsonProperty("sheetId")
    public SheetId getSheetId() {
        return sheetId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListViewsRequest && equalTo((ListViewsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListViewsRequest other) {
        return sheetId.equals(other.sheetId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sheetId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SheetIdStage builder() {
        return new Builder();
    }

    public interface SheetIdStage {
        _FinalStage sheetId(SheetId sheetId);

        Builder from(ListViewsRequest other);
    }

    public interface _FinalStage {
        ListViewsRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SheetIdStage, _FinalStage {
        private SheetId sheetId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListViewsRequest other) {
            sheetId(other.getSheetId());
            return this;
        }

        /**
         * <p>The associated sheet ID of the view.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sheetId")
        public _FinalStage sheetId(SheetId sheetId) {
            this.sheetId = sheetId;
            return this;
        }

        @java.lang.Override
        public ListViewsRequest build() {
            return new ListViewsRequest(sheetId, additionalProperties);
        }
    }
}
