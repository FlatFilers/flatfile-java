/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.auth.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.auth.types.ApiKeyType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CreateNewApiKeyRequest.Builder.class)
public final class CreateNewApiKeyRequest {
    private final String environmentId;

    private final ApiKeyType type;

    private final Map<String, Object> additionalProperties;

    private CreateNewApiKeyRequest(String environmentId, ApiKeyType type, Map<String, Object> additionalProperties) {
        this.environmentId = environmentId;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("environmentId")
    public String getEnvironmentId() {
        return environmentId;
    }

    /**
     * @return API key type (SECRET or PUBLISHABLE)
     */
    @JsonProperty("type")
    public ApiKeyType getType() {
        return type;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateNewApiKeyRequest && equalTo((CreateNewApiKeyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateNewApiKeyRequest other) {
        return environmentId.equals(other.environmentId) && type.equals(other.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.environmentId, this.type);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EnvironmentIdStage builder() {
        return new Builder();
    }

    public interface EnvironmentIdStage {
        TypeStage environmentId(String environmentId);

        Builder from(CreateNewApiKeyRequest other);
    }

    public interface TypeStage {
        _FinalStage type(ApiKeyType type);
    }

    public interface _FinalStage {
        CreateNewApiKeyRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EnvironmentIdStage, TypeStage, _FinalStage {
        private String environmentId;

        private ApiKeyType type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(CreateNewApiKeyRequest other) {
            environmentId(other.getEnvironmentId());
            type(other.getType());
            return this;
        }

        @Override
        @JsonSetter("environmentId")
        public TypeStage environmentId(String environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        /**
         * <p>API key type (SECRET or PUBLISHABLE)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("type")
        public _FinalStage type(ApiKeyType type) {
            this.type = type;
            return this;
        }

        @Override
        public CreateNewApiKeyRequest build() {
            return new CreateNewApiKeyRequest(environmentId, type, additionalProperties);
        }
    }
}
