/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.auth.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserCredentials.Builder.class)
public final class UserCredentials {
    private final String email;

    private final String password;

    private final Map<String, Object> additionalProperties;

    private UserCredentials(String email, String password, Map<String, Object> additionalProperties) {
        this.email = email;
        this.password = password;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Email
     */
    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    /**
     * @return Password
     */
    @JsonProperty("password")
    public String getPassword() {
        return password;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserCredentials && equalTo((UserCredentials) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserCredentials other) {
        return email.equals(other.email) && password.equals(other.password);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.email, this.password);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EmailStage builder() {
        return new Builder();
    }

    public interface EmailStage {
        PasswordStage email(String email);

        Builder from(UserCredentials other);
    }

    public interface PasswordStage {
        _FinalStage password(String password);
    }

    public interface _FinalStage {
        UserCredentials build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EmailStage, PasswordStage, _FinalStage {
        private String email;

        private String password;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(UserCredentials other) {
            email(other.getEmail());
            password(other.getPassword());
            return this;
        }

        /**
         * <p>Email</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("email")
        public PasswordStage email(String email) {
            this.email = email;
            return this;
        }

        /**
         * <p>Password</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("password")
        public _FinalStage password(String password) {
            this.password = password;
            return this;
        }

        @Override
        public UserCredentials build() {
            return new UserCredentials(email, password, additionalProperties);
        }
    }
}
