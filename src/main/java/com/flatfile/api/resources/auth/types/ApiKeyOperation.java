/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.auth.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ApiKeyOperation.Builder.class)
public final class ApiKeyOperation {
    private final String path;

    private final String method;

    private final Map<String, Object> additionalProperties;

    private ApiKeyOperation(String path, String method, Map<String, Object> additionalProperties) {
        this.path = path;
        this.method = method;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("path")
    public String getPath() {
        return path;
    }

    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApiKeyOperation && equalTo((ApiKeyOperation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApiKeyOperation other) {
        return path.equals(other.path) && method.equals(other.method);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.path, this.method);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PathStage builder() {
        return new Builder();
    }

    public interface PathStage {
        MethodStage path(String path);

        Builder from(ApiKeyOperation other);
    }

    public interface MethodStage {
        _FinalStage method(String method);
    }

    public interface _FinalStage {
        ApiKeyOperation build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PathStage, MethodStage, _FinalStage {
        private String path;

        private String method;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ApiKeyOperation other) {
            path(other.getPath());
            method(other.getMethod());
            return this;
        }

        @Override
        @JsonSetter("path")
        public MethodStage path(String path) {
            this.path = path;
            return this;
        }

        @Override
        @JsonSetter("method")
        public _FinalStage method(String method) {
            this.method = method;
            return this;
        }

        @Override
        public ApiKeyOperation build() {
            return new ApiKeyOperation(path, method, additionalProperties);
        }
    }
}
