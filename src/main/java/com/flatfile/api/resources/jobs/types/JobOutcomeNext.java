/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class JobOutcomeNext {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private JobOutcomeNext(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static JobOutcomeNext id(JobOutcomeNextId value) {
        return new JobOutcomeNext(new IdValue(value));
    }

    public static JobOutcomeNext url(JobOutcomeNextUrl value) {
        return new JobOutcomeNext(new UrlValue(value));
    }

    public static JobOutcomeNext download(JobOutcomeNextDownload value) {
        return new JobOutcomeNext(new DownloadValue(value));
    }

    public static JobOutcomeNext wait(JobOutcomeNextWait value) {
        return new JobOutcomeNext(new WaitValue(value));
    }

    public static JobOutcomeNext snapshot(JobOutcomeNextSnapshot value) {
        return new JobOutcomeNext(new SnapshotValue(value));
    }

    public static JobOutcomeNext retry(JobOutcomeNextRetry value) {
        return new JobOutcomeNext(new RetryValue(value));
    }

    public boolean isId() {
        return value instanceof IdValue;
    }

    public boolean isUrl() {
        return value instanceof UrlValue;
    }

    public boolean isDownload() {
        return value instanceof DownloadValue;
    }

    public boolean isWait() {
        return value instanceof WaitValue;
    }

    public boolean isSnapshot() {
        return value instanceof SnapshotValue;
    }

    public boolean isRetry() {
        return value instanceof RetryValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<JobOutcomeNextId> getId() {
        if (isId()) {
            return Optional.of(((IdValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<JobOutcomeNextUrl> getUrl() {
        if (isUrl()) {
            return Optional.of(((UrlValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<JobOutcomeNextDownload> getDownload() {
        if (isDownload()) {
            return Optional.of(((DownloadValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<JobOutcomeNextWait> getWait() {
        if (isWait()) {
            return Optional.of(((WaitValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<JobOutcomeNextSnapshot> getSnapshot() {
        if (isSnapshot()) {
            return Optional.of(((SnapshotValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<JobOutcomeNextRetry> getRetry() {
        if (isRetry()) {
            return Optional.of(((RetryValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitId(JobOutcomeNextId id);

        T visitUrl(JobOutcomeNextUrl url);

        T visitDownload(JobOutcomeNextDownload download);

        T visitWait(JobOutcomeNextWait wait);

        T visitSnapshot(JobOutcomeNextSnapshot snapshot);

        T visitRetry(JobOutcomeNextRetry retry);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(IdValue.class),
        @JsonSubTypes.Type(UrlValue.class),
        @JsonSubTypes.Type(DownloadValue.class),
        @JsonSubTypes.Type(WaitValue.class),
        @JsonSubTypes.Type(SnapshotValue.class),
        @JsonSubTypes.Type(RetryValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("id")
    private static final class IdValue implements Value {
        @JsonUnwrapped
        private JobOutcomeNextId value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private IdValue() {}

        private IdValue(JobOutcomeNextId value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitId(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof IdValue && equalTo((IdValue) other);
        }

        private boolean equalTo(IdValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("url")
    private static final class UrlValue implements Value {
        @JsonUnwrapped
        private JobOutcomeNextUrl value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private UrlValue() {}

        private UrlValue(JobOutcomeNextUrl value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitUrl(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof UrlValue && equalTo((UrlValue) other);
        }

        private boolean equalTo(UrlValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("download")
    private static final class DownloadValue implements Value {
        @JsonUnwrapped
        private JobOutcomeNextDownload value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DownloadValue() {}

        private DownloadValue(JobOutcomeNextDownload value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDownload(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DownloadValue && equalTo((DownloadValue) other);
        }

        private boolean equalTo(DownloadValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("wait")
    private static final class WaitValue implements Value {
        @JsonUnwrapped
        private JobOutcomeNextWait value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WaitValue() {}

        private WaitValue(JobOutcomeNextWait value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWait(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WaitValue && equalTo((WaitValue) other);
        }

        private boolean equalTo(WaitValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("snapshot")
    private static final class SnapshotValue implements Value {
        @JsonUnwrapped
        private JobOutcomeNextSnapshot value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SnapshotValue() {}

        private SnapshotValue(JobOutcomeNextSnapshot value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSnapshot(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SnapshotValue && equalTo((SnapshotValue) other);
        }

        private boolean equalTo(SnapshotValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("retry")
    private static final class RetryValue implements Value {
        @JsonUnwrapped
        private JobOutcomeNextRetry value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RetryValue() {}

        private RetryValue(JobOutcomeNextRetry value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRetry(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RetryValue && equalTo((RetryValue) other);
        }

        private boolean equalTo(RetryValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @Override
        public String toString() {
            return "JobOutcomeNext{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
