/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = JobCancelDetails.Builder.class)
public final class JobCancelDetails {
    private final Optional<String> info;

    private final Map<String, Object> additionalProperties;

    private JobCancelDetails(Optional<String> info, Map<String, Object> additionalProperties) {
        this.info = info;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("info")
    public Optional<String> getInfo() {
        return info;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobCancelDetails && equalTo((JobCancelDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobCancelDetails other) {
        return info.equals(other.info);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.info);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> info = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(JobCancelDetails other) {
            info(other.getInfo());
            return this;
        }

        @JsonSetter(value = "info", nulls = Nulls.SKIP)
        public Builder info(Optional<String> info) {
            this.info = info;
            return this;
        }

        public Builder info(String info) {
            this.info = Optional.of(info);
            return this;
        }

        public JobCancelDetails build() {
            return new JobCancelDetails(info, additionalProperties);
        }
    }
}
