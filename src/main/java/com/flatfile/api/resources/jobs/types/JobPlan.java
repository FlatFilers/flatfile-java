/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = JobPlan.Builder.class)
public final class JobPlan {
    private final Job job;

    private final JobExecutionPlan plan;

    private final Map<String, Object> additionalProperties;

    private JobPlan(Job job, JobExecutionPlan plan, Map<String, Object> additionalProperties) {
        this.job = job;
        this.plan = plan;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("job")
    public Job getJob() {
        return job;
    }

    @JsonProperty("plan")
    public JobExecutionPlan getPlan() {
        return plan;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobPlan && equalTo((JobPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobPlan other) {
        return job.equals(other.job) && plan.equals(other.plan);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.job, this.plan);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobStage builder() {
        return new Builder();
    }

    public interface JobStage {
        PlanStage job(Job job);

        Builder from(JobPlan other);
    }

    public interface PlanStage {
        _FinalStage plan(JobExecutionPlan plan);
    }

    public interface _FinalStage {
        JobPlan build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobStage, PlanStage, _FinalStage {
        private Job job;

        private JobExecutionPlan plan;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(JobPlan other) {
            job(other.getJob());
            plan(other.getPlan());
            return this;
        }

        @Override
        @JsonSetter("job")
        public PlanStage job(Job job) {
            this.job = job;
            return this;
        }

        @Override
        @JsonSetter("plan")
        public _FinalStage plan(JobExecutionPlan plan) {
            this.plan = plan;
            return this;
        }

        @Override
        public JobPlan build() {
            return new JobPlan(job, plan, additionalProperties);
        }
    }
}
