/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Filter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MutateJobConfig.Builder.class)
public final class MutateJobConfig {
    private final String sheetId;

    private final String mutateRecord;

    private final Optional<String> mutationId;

    private final Optional<Filter> filter;

    private final Optional<String> filterField;

    private final Optional<String> searchValue;

    private final Optional<String> searchField;

    private final Optional<String> q;

    private final Optional<List<String>> ids;

    private final Map<String, Object> additionalProperties;

    private MutateJobConfig(
            String sheetId,
            String mutateRecord,
            Optional<String> mutationId,
            Optional<Filter> filter,
            Optional<String> filterField,
            Optional<String> searchValue,
            Optional<String> searchField,
            Optional<String> q,
            Optional<List<String>> ids,
            Map<String, Object> additionalProperties) {
        this.sheetId = sheetId;
        this.mutateRecord = mutateRecord;
        this.mutationId = mutationId;
        this.filter = filter;
        this.filterField = filterField;
        this.searchValue = searchValue;
        this.searchField = searchField;
        this.q = q;
        this.ids = ids;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sheetId")
    public String getSheetId() {
        return sheetId;
    }

    /**
     * @return A JavaScript function that will be run on each record in the sheet, it should return a mutated record.
     */
    @JsonProperty("mutateRecord")
    public String getMutateRecord() {
        return mutateRecord;
    }

    /**
     * @return If the mutation was generated through some sort of id-ed process, this links this job and that process.
     */
    @JsonProperty("mutationId")
    public Optional<String> getMutationId() {
        return mutationId;
    }

    @JsonProperty("filter")
    public Optional<Filter> getFilter() {
        return filter;
    }

    @JsonProperty("filterField")
    public Optional<String> getFilterField() {
        return filterField;
    }

    @JsonProperty("searchValue")
    public Optional<String> getSearchValue() {
        return searchValue;
    }

    @JsonProperty("searchField")
    public Optional<String> getSearchField() {
        return searchField;
    }

    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    /**
     * @return The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
     */
    @JsonProperty("ids")
    public Optional<List<String>> getIds() {
        return ids;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MutateJobConfig && equalTo((MutateJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MutateJobConfig other) {
        return sheetId.equals(other.sheetId)
                && mutateRecord.equals(other.mutateRecord)
                && mutationId.equals(other.mutationId)
                && filter.equals(other.filter)
                && filterField.equals(other.filterField)
                && searchValue.equals(other.searchValue)
                && searchField.equals(other.searchField)
                && q.equals(other.q)
                && ids.equals(other.ids);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.sheetId,
                this.mutateRecord,
                this.mutationId,
                this.filter,
                this.filterField,
                this.searchValue,
                this.searchField,
                this.q,
                this.ids);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SheetIdStage builder() {
        return new Builder();
    }

    public interface SheetIdStage {
        MutateRecordStage sheetId(String sheetId);

        Builder from(MutateJobConfig other);
    }

    public interface MutateRecordStage {
        _FinalStage mutateRecord(String mutateRecord);
    }

    public interface _FinalStage {
        MutateJobConfig build();

        _FinalStage mutationId(Optional<String> mutationId);

        _FinalStage mutationId(String mutationId);

        _FinalStage filter(Optional<Filter> filter);

        _FinalStage filter(Filter filter);

        _FinalStage filterField(Optional<String> filterField);

        _FinalStage filterField(String filterField);

        _FinalStage searchValue(Optional<String> searchValue);

        _FinalStage searchValue(String searchValue);

        _FinalStage searchField(Optional<String> searchField);

        _FinalStage searchField(String searchField);

        _FinalStage q(Optional<String> q);

        _FinalStage q(String q);

        _FinalStage ids(Optional<List<String>> ids);

        _FinalStage ids(List<String> ids);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SheetIdStage, MutateRecordStage, _FinalStage {
        private String sheetId;

        private String mutateRecord;

        private Optional<List<String>> ids = Optional.empty();

        private Optional<String> q = Optional.empty();

        private Optional<String> searchField = Optional.empty();

        private Optional<String> searchValue = Optional.empty();

        private Optional<String> filterField = Optional.empty();

        private Optional<Filter> filter = Optional.empty();

        private Optional<String> mutationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(MutateJobConfig other) {
            sheetId(other.getSheetId());
            mutateRecord(other.getMutateRecord());
            mutationId(other.getMutationId());
            filter(other.getFilter());
            filterField(other.getFilterField());
            searchValue(other.getSearchValue());
            searchField(other.getSearchField());
            q(other.getQ());
            ids(other.getIds());
            return this;
        }

        @Override
        @JsonSetter("sheetId")
        public MutateRecordStage sheetId(String sheetId) {
            this.sheetId = sheetId;
            return this;
        }

        /**
         * <p>A JavaScript function that will be run on each record in the sheet, it should return a mutated record.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("mutateRecord")
        public _FinalStage mutateRecord(String mutateRecord) {
            this.mutateRecord = mutateRecord;
            return this;
        }

        /**
         * <p>The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage ids(List<String> ids) {
            this.ids = Optional.of(ids);
            return this;
        }

        @Override
        @JsonSetter(value = "ids", nulls = Nulls.SKIP)
        public _FinalStage ids(Optional<List<String>> ids) {
            this.ids = ids;
            return this;
        }

        @Override
        public _FinalStage q(String q) {
            this.q = Optional.of(q);
            return this;
        }

        @Override
        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public _FinalStage q(Optional<String> q) {
            this.q = q;
            return this;
        }

        @Override
        public _FinalStage searchField(String searchField) {
            this.searchField = Optional.of(searchField);
            return this;
        }

        @Override
        @JsonSetter(value = "searchField", nulls = Nulls.SKIP)
        public _FinalStage searchField(Optional<String> searchField) {
            this.searchField = searchField;
            return this;
        }

        @Override
        public _FinalStage searchValue(String searchValue) {
            this.searchValue = Optional.of(searchValue);
            return this;
        }

        @Override
        @JsonSetter(value = "searchValue", nulls = Nulls.SKIP)
        public _FinalStage searchValue(Optional<String> searchValue) {
            this.searchValue = searchValue;
            return this;
        }

        @Override
        public _FinalStage filterField(String filterField) {
            this.filterField = Optional.of(filterField);
            return this;
        }

        @Override
        @JsonSetter(value = "filterField", nulls = Nulls.SKIP)
        public _FinalStage filterField(Optional<String> filterField) {
            this.filterField = filterField;
            return this;
        }

        @Override
        public _FinalStage filter(Filter filter) {
            this.filter = Optional.of(filter);
            return this;
        }

        @Override
        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public _FinalStage filter(Optional<Filter> filter) {
            this.filter = filter;
            return this;
        }

        /**
         * <p>If the mutation was generated through some sort of id-ed process, this links this job and that process.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage mutationId(String mutationId) {
            this.mutationId = Optional.of(mutationId);
            return this;
        }

        @Override
        @JsonSetter(value = "mutationId", nulls = Nulls.SKIP)
        public _FinalStage mutationId(Optional<String> mutationId) {
            this.mutationId = mutationId;
            return this;
        }

        @Override
        public MutateJobConfig build() {
            return new MutateJobConfig(
                    sheetId,
                    mutateRecord,
                    mutationId,
                    filter,
                    filterField,
                    searchValue,
                    searchField,
                    q,
                    ids,
                    additionalProperties);
        }
    }
}
