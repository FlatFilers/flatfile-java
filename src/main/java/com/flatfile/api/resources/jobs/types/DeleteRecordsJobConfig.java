/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Filter;
import com.flatfile.api.resources.commons.types.FilterField;
import com.flatfile.api.resources.commons.types.RecordId;
import com.flatfile.api.resources.commons.types.SearchField;
import com.flatfile.api.resources.commons.types.SearchValue;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DeleteRecordsJobConfig.Builder.class)
public final class DeleteRecordsJobConfig {
    private final Optional<Filter> filter;

    private final Optional<FilterField> filterField;

    private final Optional<SearchValue> searchValue;

    private final Optional<SearchField> searchField;

    private final Optional<String> q;

    private final SheetId sheet;

    private final Optional<List<RecordId>> exceptions;

    private final Map<String, Object> additionalProperties;

    private DeleteRecordsJobConfig(
            Optional<Filter> filter,
            Optional<FilterField> filterField,
            Optional<SearchValue> searchValue,
            Optional<SearchField> searchField,
            Optional<String> q,
            SheetId sheet,
            Optional<List<RecordId>> exceptions,
            Map<String, Object> additionalProperties) {
        this.filter = filter;
        this.filterField = filterField;
        this.searchValue = searchValue;
        this.searchField = searchField;
        this.q = q;
        this.sheet = sheet;
        this.exceptions = exceptions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Options to filter records (default=none)
     */
    @JsonProperty("filter")
    public Optional<Filter> getFilter() {
        return filter;
    }

    /**
     * @return Use this to narrow the valid/error filter results to a specific field (Requires filter to be set)
     */
    @JsonProperty("filterField")
    public Optional<FilterField> getFilterField() {
        return filterField;
    }

    @JsonProperty("searchValue")
    public Optional<SearchValue> getSearchValue() {
        return searchValue;
    }

    @JsonProperty("searchField")
    public Optional<SearchField> getSearchField() {
        return searchField;
    }

    /**
     * @return FFQL query to filter records
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    @JsonProperty("sheet")
    public SheetId getSheet() {
        return sheet;
    }

    /**
     * @return List of record ids to exclude from deletion
     */
    @JsonProperty("exceptions")
    public Optional<List<RecordId>> getExceptions() {
        return exceptions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteRecordsJobConfig && equalTo((DeleteRecordsJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteRecordsJobConfig other) {
        return filter.equals(other.filter)
                && filterField.equals(other.filterField)
                && searchValue.equals(other.searchValue)
                && searchField.equals(other.searchField)
                && q.equals(other.q)
                && sheet.equals(other.sheet)
                && exceptions.equals(other.exceptions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.filter, this.filterField, this.searchValue, this.searchField, this.q, this.sheet, this.exceptions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SheetStage builder() {
        return new Builder();
    }

    public interface SheetStage {
        _FinalStage sheet(SheetId sheet);

        Builder from(DeleteRecordsJobConfig other);
    }

    public interface _FinalStage {
        DeleteRecordsJobConfig build();

        _FinalStage filter(Optional<Filter> filter);

        _FinalStage filter(Filter filter);

        _FinalStage filterField(Optional<FilterField> filterField);

        _FinalStage filterField(FilterField filterField);

        _FinalStage searchValue(Optional<SearchValue> searchValue);

        _FinalStage searchValue(SearchValue searchValue);

        _FinalStage searchField(Optional<SearchField> searchField);

        _FinalStage searchField(SearchField searchField);

        _FinalStage q(Optional<String> q);

        _FinalStage q(String q);

        _FinalStage exceptions(Optional<List<RecordId>> exceptions);

        _FinalStage exceptions(List<RecordId> exceptions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SheetStage, _FinalStage {
        private SheetId sheet;

        private Optional<List<RecordId>> exceptions = Optional.empty();

        private Optional<String> q = Optional.empty();

        private Optional<SearchField> searchField = Optional.empty();

        private Optional<SearchValue> searchValue = Optional.empty();

        private Optional<FilterField> filterField = Optional.empty();

        private Optional<Filter> filter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeleteRecordsJobConfig other) {
            filter(other.getFilter());
            filterField(other.getFilterField());
            searchValue(other.getSearchValue());
            searchField(other.getSearchField());
            q(other.getQ());
            sheet(other.getSheet());
            exceptions(other.getExceptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sheet")
        public _FinalStage sheet(SheetId sheet) {
            this.sheet = sheet;
            return this;
        }

        /**
         * <p>List of record ids to exclude from deletion</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage exceptions(List<RecordId> exceptions) {
            this.exceptions = Optional.of(exceptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "exceptions", nulls = Nulls.SKIP)
        public _FinalStage exceptions(Optional<List<RecordId>> exceptions) {
            this.exceptions = exceptions;
            return this;
        }

        /**
         * <p>FFQL query to filter records</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage q(String q) {
            this.q = Optional.of(q);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public _FinalStage q(Optional<String> q) {
            this.q = q;
            return this;
        }

        @java.lang.Override
        public _FinalStage searchField(SearchField searchField) {
            this.searchField = Optional.of(searchField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "searchField", nulls = Nulls.SKIP)
        public _FinalStage searchField(Optional<SearchField> searchField) {
            this.searchField = searchField;
            return this;
        }

        @java.lang.Override
        public _FinalStage searchValue(SearchValue searchValue) {
            this.searchValue = Optional.of(searchValue);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "searchValue", nulls = Nulls.SKIP)
        public _FinalStage searchValue(Optional<SearchValue> searchValue) {
            this.searchValue = searchValue;
            return this;
        }

        /**
         * <p>Use this to narrow the valid/error filter results to a specific field (Requires filter to be set)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage filterField(FilterField filterField) {
            this.filterField = Optional.of(filterField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filterField", nulls = Nulls.SKIP)
        public _FinalStage filterField(Optional<FilterField> filterField) {
            this.filterField = filterField;
            return this;
        }

        /**
         * <p>Options to filter records (default=none)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage filter(Filter filter) {
            this.filter = Optional.of(filter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public _FinalStage filter(Optional<Filter> filter) {
            this.filter = filter;
            return this;
        }

        @java.lang.Override
        public DeleteRecordsJobConfig build() {
            return new DeleteRecordsJobConfig(
                    filter, filterField, searchValue, searchField, q, sheet, exceptions, additionalProperties);
        }
    }
}
