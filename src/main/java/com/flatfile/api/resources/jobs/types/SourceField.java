/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.property.types.Property;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SourceField.Builder.class)
public final class SourceField {
    private final Property sourceField;

    private final Optional<List<String>> preview;

    private final Map<String, Object> additionalProperties;

    private SourceField(
            Property sourceField, Optional<List<String>> preview, Map<String, Object> additionalProperties) {
        this.sourceField = sourceField;
        this.preview = preview;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The description of the source field
     */
    @JsonProperty("sourceField")
    public Property getSourceField() {
        return sourceField;
    }

    /**
     * @return A list of preview values of the data in the source field
     */
    @JsonProperty("preview")
    public Optional<List<String>> getPreview() {
        return preview;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourceField && equalTo((SourceField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourceField other) {
        return sourceField.equals(other.sourceField) && preview.equals(other.preview);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.sourceField, this.preview);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourceFieldStage builder() {
        return new Builder();
    }

    public interface SourceFieldStage {
        _FinalStage sourceField(Property sourceField);

        Builder from(SourceField other);
    }

    public interface _FinalStage {
        SourceField build();

        _FinalStage preview(Optional<List<String>> preview);

        _FinalStage preview(List<String> preview);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SourceFieldStage, _FinalStage {
        private Property sourceField;

        private Optional<List<String>> preview = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SourceField other) {
            sourceField(other.getSourceField());
            preview(other.getPreview());
            return this;
        }

        /**
         * <p>The description of the source field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("sourceField")
        public _FinalStage sourceField(Property sourceField) {
            this.sourceField = sourceField;
            return this;
        }

        /**
         * <p>A list of preview values of the data in the source field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage preview(List<String> preview) {
            this.preview = Optional.of(preview);
            return this;
        }

        @Override
        @JsonSetter(value = "preview", nulls = Nulls.SKIP)
        public _FinalStage preview(Optional<List<String>> preview) {
            this.preview = preview;
            return this;
        }

        @Override
        public SourceField build() {
            return new SourceField(sourceField, preview, additionalProperties);
        }
    }
}
