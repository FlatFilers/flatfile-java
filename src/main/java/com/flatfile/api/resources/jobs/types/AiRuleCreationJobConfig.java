/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AiRuleCreationJobConfig.Builder.class)
public final class AiRuleCreationJobConfig {
    private final String prompt;

    private final SheetId sheetId;

    private final String fieldKey;

    private final Optional<Integer> index;

    private final Map<String, Object> additionalProperties;

    private AiRuleCreationJobConfig(
            String prompt,
            SheetId sheetId,
            String fieldKey,
            Optional<Integer> index,
            Map<String, Object> additionalProperties) {
        this.prompt = prompt;
        this.sheetId = sheetId;
        this.fieldKey = fieldKey;
        this.index = index;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The natural language description of the rule to be created
     */
    @JsonProperty("prompt")
    public String getPrompt() {
        return prompt;
    }

    /**
     * @return The ID of the sheet containing the field to create/update the rule for
     */
    @JsonProperty("sheetId")
    public SheetId getSheetId() {
        return sheetId;
    }

    /**
     * @return The key of the field to create/update the rule for
     */
    @JsonProperty("fieldKey")
    public String getFieldKey() {
        return fieldKey;
    }

    /**
     * @return To edit an existing rule, provide the index of the constraint in the constraints array for the field and that constraint will be replaced.
     */
    @JsonProperty("index")
    public Optional<Integer> getIndex() {
        return index;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AiRuleCreationJobConfig && equalTo((AiRuleCreationJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AiRuleCreationJobConfig other) {
        return prompt.equals(other.prompt)
                && sheetId.equals(other.sheetId)
                && fieldKey.equals(other.fieldKey)
                && index.equals(other.index);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.prompt, this.sheetId, this.fieldKey, this.index);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PromptStage builder() {
        return new Builder();
    }

    public interface PromptStage {
        SheetIdStage prompt(@NotNull String prompt);

        Builder from(AiRuleCreationJobConfig other);
    }

    public interface SheetIdStage {
        FieldKeyStage sheetId(@NotNull SheetId sheetId);
    }

    public interface FieldKeyStage {
        _FinalStage fieldKey(@NotNull String fieldKey);
    }

    public interface _FinalStage {
        AiRuleCreationJobConfig build();

        _FinalStage index(Optional<Integer> index);

        _FinalStage index(Integer index);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PromptStage, SheetIdStage, FieldKeyStage, _FinalStage {
        private String prompt;

        private SheetId sheetId;

        private String fieldKey;

        private Optional<Integer> index = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AiRuleCreationJobConfig other) {
            prompt(other.getPrompt());
            sheetId(other.getSheetId());
            fieldKey(other.getFieldKey());
            index(other.getIndex());
            return this;
        }

        /**
         * <p>The natural language description of the rule to be created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("prompt")
        public SheetIdStage prompt(@NotNull String prompt) {
            this.prompt = Objects.requireNonNull(prompt, "prompt must not be null");
            return this;
        }

        /**
         * <p>The ID of the sheet containing the field to create/update the rule for</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sheetId")
        public FieldKeyStage sheetId(@NotNull SheetId sheetId) {
            this.sheetId = Objects.requireNonNull(sheetId, "sheetId must not be null");
            return this;
        }

        /**
         * <p>The key of the field to create/update the rule for</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("fieldKey")
        public _FinalStage fieldKey(@NotNull String fieldKey) {
            this.fieldKey = Objects.requireNonNull(fieldKey, "fieldKey must not be null");
            return this;
        }

        /**
         * <p>To edit an existing rule, provide the index of the constraint in the constraints array for the field and that constraint will be replaced.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage index(Integer index) {
            this.index = Optional.ofNullable(index);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "index", nulls = Nulls.SKIP)
        public _FinalStage index(Optional<Integer> index) {
            this.index = index;
            return this;
        }

        @java.lang.Override
        public AiRuleCreationJobConfig build() {
            return new AiRuleCreationJobConfig(prompt, sheetId, fieldKey, index, additionalProperties);
        }
    }
}
