/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = JobUpdate.Builder.class)
public final class JobUpdate {
    private final Optional<JobUpdateConfig> config;

    private final Optional<JobStatus> status;

    private final Optional<Double> progress;

    private final Optional<OffsetDateTime> outcomeAcknowledgedAt;

    private final Map<String, Object> additionalProperties;

    private JobUpdate(
            Optional<JobUpdateConfig> config,
            Optional<JobStatus> status,
            Optional<Double> progress,
            Optional<OffsetDateTime> outcomeAcknowledgedAt,
            Map<String, Object> additionalProperties) {
        this.config = config;
        this.status = status;
        this.progress = progress;
        this.outcomeAcknowledgedAt = outcomeAcknowledgedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("config")
    public Optional<JobUpdateConfig> getConfig() {
        return config;
    }

    /**
     * @return the status of the job
     */
    @JsonProperty("status")
    public Optional<JobStatus> getStatus() {
        return status;
    }

    /**
     * @return the progress of the job
     */
    @JsonProperty("progress")
    public Optional<Double> getProgress() {
        return progress;
    }

    /**
     * @return the time that the job's outcome has been acknowledged by a user
     */
    @JsonProperty("outcomeAcknowledgedAt")
    public Optional<OffsetDateTime> getOutcomeAcknowledgedAt() {
        return outcomeAcknowledgedAt;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobUpdate && equalTo((JobUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobUpdate other) {
        return config.equals(other.config)
                && status.equals(other.status)
                && progress.equals(other.progress)
                && outcomeAcknowledgedAt.equals(other.outcomeAcknowledgedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.config, this.status, this.progress, this.outcomeAcknowledgedAt);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<JobUpdateConfig> config = Optional.empty();

        private Optional<JobStatus> status = Optional.empty();

        private Optional<Double> progress = Optional.empty();

        private Optional<OffsetDateTime> outcomeAcknowledgedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(JobUpdate other) {
            config(other.getConfig());
            status(other.getStatus());
            progress(other.getProgress());
            outcomeAcknowledgedAt(other.getOutcomeAcknowledgedAt());
            return this;
        }

        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public Builder config(Optional<JobUpdateConfig> config) {
            this.config = config;
            return this;
        }

        public Builder config(JobUpdateConfig config) {
            this.config = Optional.of(config);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<JobStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(JobStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        @JsonSetter(value = "progress", nulls = Nulls.SKIP)
        public Builder progress(Optional<Double> progress) {
            this.progress = progress;
            return this;
        }

        public Builder progress(Double progress) {
            this.progress = Optional.of(progress);
            return this;
        }

        @JsonSetter(value = "outcomeAcknowledgedAt", nulls = Nulls.SKIP)
        public Builder outcomeAcknowledgedAt(Optional<OffsetDateTime> outcomeAcknowledgedAt) {
            this.outcomeAcknowledgedAt = outcomeAcknowledgedAt;
            return this;
        }

        public Builder outcomeAcknowledgedAt(OffsetDateTime outcomeAcknowledgedAt) {
            this.outcomeAcknowledgedAt = Optional.of(outcomeAcknowledgedAt);
            return this;
        }

        public JobUpdate build() {
            return new JobUpdate(config, status, progress, outcomeAcknowledgedAt, additionalProperties);
        }
    }
}
