/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = JobAckDetails.Builder.class)
public final class JobAckDetails {
    private final Optional<String> info;

    private final Optional<Integer> progress;

    private final Optional<OffsetDateTime> estimatedCompletionAt;

    private final Map<String, Object> additionalProperties;

    private JobAckDetails(
            Optional<String> info,
            Optional<Integer> progress,
            Optional<OffsetDateTime> estimatedCompletionAt,
            Map<String, Object> additionalProperties) {
        this.info = info;
        this.progress = progress;
        this.estimatedCompletionAt = estimatedCompletionAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("info")
    public Optional<String> getInfo() {
        return info;
    }

    /**
     * @return the progress of the job. Whole number between 0 and 100
     */
    @JsonProperty("progress")
    public Optional<Integer> getProgress() {
        return progress;
    }

    @JsonProperty("estimatedCompletionAt")
    public Optional<OffsetDateTime> getEstimatedCompletionAt() {
        return estimatedCompletionAt;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobAckDetails && equalTo((JobAckDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobAckDetails other) {
        return info.equals(other.info)
                && progress.equals(other.progress)
                && estimatedCompletionAt.equals(other.estimatedCompletionAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.info, this.progress, this.estimatedCompletionAt);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> info = Optional.empty();

        private Optional<Integer> progress = Optional.empty();

        private Optional<OffsetDateTime> estimatedCompletionAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(JobAckDetails other) {
            info(other.getInfo());
            progress(other.getProgress());
            estimatedCompletionAt(other.getEstimatedCompletionAt());
            return this;
        }

        @JsonSetter(value = "info", nulls = Nulls.SKIP)
        public Builder info(Optional<String> info) {
            this.info = info;
            return this;
        }

        public Builder info(String info) {
            this.info = Optional.of(info);
            return this;
        }

        @JsonSetter(value = "progress", nulls = Nulls.SKIP)
        public Builder progress(Optional<Integer> progress) {
            this.progress = progress;
            return this;
        }

        public Builder progress(Integer progress) {
            this.progress = Optional.of(progress);
            return this;
        }

        @JsonSetter(value = "estimatedCompletionAt", nulls = Nulls.SKIP)
        public Builder estimatedCompletionAt(Optional<OffsetDateTime> estimatedCompletionAt) {
            this.estimatedCompletionAt = estimatedCompletionAt;
            return this;
        }

        public Builder estimatedCompletionAt(OffsetDateTime estimatedCompletionAt) {
            this.estimatedCompletionAt = Optional.of(estimatedCompletionAt);
            return this;
        }

        public JobAckDetails build() {
            return new JobAckDetails(info, progress, estimatedCompletionAt, additionalProperties);
        }
    }
}
