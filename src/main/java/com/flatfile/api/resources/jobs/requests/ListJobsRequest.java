/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import com.flatfile.api.resources.commons.types.FileId;
import com.flatfile.api.resources.commons.types.JobId;
import com.flatfile.api.resources.commons.types.SortDirection;
import com.flatfile.api.resources.commons.types.SpaceId;
import com.flatfile.api.resources.commons.types.WorkbookId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListJobsRequest.Builder.class)
public final class ListJobsRequest {
    private final Optional<EnvironmentId> environmentId;

    private final Optional<SpaceId> spaceId;

    private final Optional<WorkbookId> workbookId;

    private final Optional<FileId> fileId;

    private final Optional<JobId> parentId;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> pageNumber;

    private final Optional<SortDirection> sortDirection;

    private final Optional<Boolean> excludeChildJobs;

    private final Map<String, Object> additionalProperties;

    private ListJobsRequest(
            Optional<EnvironmentId> environmentId,
            Optional<SpaceId> spaceId,
            Optional<WorkbookId> workbookId,
            Optional<FileId> fileId,
            Optional<JobId> parentId,
            Optional<Integer> pageSize,
            Optional<Integer> pageNumber,
            Optional<SortDirection> sortDirection,
            Optional<Boolean> excludeChildJobs,
            Map<String, Object> additionalProperties) {
        this.environmentId = environmentId;
        this.spaceId = spaceId;
        this.workbookId = workbookId;
        this.fileId = fileId;
        this.parentId = parentId;
        this.pageSize = pageSize;
        this.pageNumber = pageNumber;
        this.sortDirection = sortDirection;
        this.excludeChildJobs = excludeChildJobs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When provided, only jobs for the given environment will be returned
     */
    @JsonProperty("environmentId")
    public Optional<EnvironmentId> getEnvironmentId() {
        return environmentId;
    }

    /**
     * @return When provided, only jobs for the given space will be returned
     */
    @JsonProperty("spaceId")
    public Optional<SpaceId> getSpaceId() {
        return spaceId;
    }

    /**
     * @return When provided, only jobs for the given workbook will be returned
     */
    @JsonProperty("workbookId")
    public Optional<WorkbookId> getWorkbookId() {
        return workbookId;
    }

    /**
     * @return When provided, only jobs for the given file will be returned
     */
    @JsonProperty("fileId")
    public Optional<FileId> getFileId() {
        return fileId;
    }

    /**
     * @return When provided, only jobs that are parts of the given job will be returned
     */
    @JsonProperty("parentId")
    public Optional<JobId> getParentId() {
        return parentId;
    }

    /**
     * @return Number of jobs to return in a page (default 20)
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Based on pageSize, which page of jobs to return
     */
    @JsonProperty("pageNumber")
    public Optional<Integer> getPageNumber() {
        return pageNumber;
    }

    /**
     * @return Sort direction - asc (ascending) or desc (descending)
     */
    @JsonProperty("sortDirection")
    public Optional<SortDirection> getSortDirection() {
        return sortDirection;
    }

    /**
     * @return When true, only top-level jobs will be returned unless a parentId is specified
     */
    @JsonProperty("excludeChildJobs")
    public Optional<Boolean> getExcludeChildJobs() {
        return excludeChildJobs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListJobsRequest && equalTo((ListJobsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListJobsRequest other) {
        return environmentId.equals(other.environmentId)
                && spaceId.equals(other.spaceId)
                && workbookId.equals(other.workbookId)
                && fileId.equals(other.fileId)
                && parentId.equals(other.parentId)
                && pageSize.equals(other.pageSize)
                && pageNumber.equals(other.pageNumber)
                && sortDirection.equals(other.sortDirection)
                && excludeChildJobs.equals(other.excludeChildJobs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.environmentId,
                this.spaceId,
                this.workbookId,
                this.fileId,
                this.parentId,
                this.pageSize,
                this.pageNumber,
                this.sortDirection,
                this.excludeChildJobs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<EnvironmentId> environmentId = Optional.empty();

        private Optional<SpaceId> spaceId = Optional.empty();

        private Optional<WorkbookId> workbookId = Optional.empty();

        private Optional<FileId> fileId = Optional.empty();

        private Optional<JobId> parentId = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> pageNumber = Optional.empty();

        private Optional<SortDirection> sortDirection = Optional.empty();

        private Optional<Boolean> excludeChildJobs = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListJobsRequest other) {
            environmentId(other.getEnvironmentId());
            spaceId(other.getSpaceId());
            workbookId(other.getWorkbookId());
            fileId(other.getFileId());
            parentId(other.getParentId());
            pageSize(other.getPageSize());
            pageNumber(other.getPageNumber());
            sortDirection(other.getSortDirection());
            excludeChildJobs(other.getExcludeChildJobs());
            return this;
        }

        @JsonSetter(value = "environmentId", nulls = Nulls.SKIP)
        public Builder environmentId(Optional<EnvironmentId> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(EnvironmentId environmentId) {
            this.environmentId = Optional.of(environmentId);
            return this;
        }

        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public Builder spaceId(Optional<SpaceId> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        public Builder spaceId(SpaceId spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        @JsonSetter(value = "workbookId", nulls = Nulls.SKIP)
        public Builder workbookId(Optional<WorkbookId> workbookId) {
            this.workbookId = workbookId;
            return this;
        }

        public Builder workbookId(WorkbookId workbookId) {
            this.workbookId = Optional.of(workbookId);
            return this;
        }

        @JsonSetter(value = "fileId", nulls = Nulls.SKIP)
        public Builder fileId(Optional<FileId> fileId) {
            this.fileId = fileId;
            return this;
        }

        public Builder fileId(FileId fileId) {
            this.fileId = Optional.of(fileId);
            return this;
        }

        @JsonSetter(value = "parentId", nulls = Nulls.SKIP)
        public Builder parentId(Optional<JobId> parentId) {
            this.parentId = parentId;
            return this;
        }

        public Builder parentId(JobId parentId) {
            this.parentId = Optional.of(parentId);
            return this;
        }

        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.of(pageSize);
            return this;
        }

        @JsonSetter(value = "pageNumber", nulls = Nulls.SKIP)
        public Builder pageNumber(Optional<Integer> pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        public Builder pageNumber(Integer pageNumber) {
            this.pageNumber = Optional.of(pageNumber);
            return this;
        }

        @JsonSetter(value = "sortDirection", nulls = Nulls.SKIP)
        public Builder sortDirection(Optional<SortDirection> sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }

        public Builder sortDirection(SortDirection sortDirection) {
            this.sortDirection = Optional.of(sortDirection);
            return this;
        }

        @JsonSetter(value = "excludeChildJobs", nulls = Nulls.SKIP)
        public Builder excludeChildJobs(Optional<Boolean> excludeChildJobs) {
            this.excludeChildJobs = excludeChildJobs;
            return this;
        }

        public Builder excludeChildJobs(Boolean excludeChildJobs) {
            this.excludeChildJobs = Optional.of(excludeChildJobs);
            return this;
        }

        public ListJobsRequest build() {
            return new ListJobsRequest(
                    environmentId,
                    spaceId,
                    workbookId,
                    fileId,
                    parentId,
                    pageSize,
                    pageNumber,
                    sortDirection,
                    excludeChildJobs,
                    additionalProperties);
        }
    }
}
