/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SpaceId;
import com.flatfile.api.resources.property.types.StoredConstraint;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AiGenerateConstraintJobConfig.Builder.class)
public final class AiGenerateConstraintJobConfig {
    private final SpaceId spaceId;

    private final List<StoredConstraint> constraints;

    private final Optional<String> description;

    private final Map<String, Object> additionalProperties;

    private AiGenerateConstraintJobConfig(
            SpaceId spaceId,
            List<StoredConstraint> constraints,
            Optional<String> description,
            Map<String, Object> additionalProperties) {
        this.spaceId = spaceId;
        this.constraints = constraints;
        this.description = description;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("spaceId")
    public SpaceId getSpaceId() {
        return spaceId;
    }

    @JsonProperty("constraints")
    public List<StoredConstraint> getConstraints() {
        return constraints;
    }

    /**
     * @return A description of what the constraint to be generated should do
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AiGenerateConstraintJobConfig && equalTo((AiGenerateConstraintJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AiGenerateConstraintJobConfig other) {
        return spaceId.equals(other.spaceId)
                && constraints.equals(other.constraints)
                && description.equals(other.description);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.spaceId, this.constraints, this.description);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SpaceIdStage builder() {
        return new Builder();
    }

    public interface SpaceIdStage {
        _FinalStage spaceId(@NotNull SpaceId spaceId);

        Builder from(AiGenerateConstraintJobConfig other);
    }

    public interface _FinalStage {
        AiGenerateConstraintJobConfig build();

        _FinalStage constraints(List<StoredConstraint> constraints);

        _FinalStage addConstraints(StoredConstraint constraints);

        _FinalStage addAllConstraints(List<StoredConstraint> constraints);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SpaceIdStage, _FinalStage {
        private SpaceId spaceId;

        private Optional<String> description = Optional.empty();

        private List<StoredConstraint> constraints = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AiGenerateConstraintJobConfig other) {
            spaceId(other.getSpaceId());
            constraints(other.getConstraints());
            description(other.getDescription());
            return this;
        }

        @java.lang.Override
        @JsonSetter("spaceId")
        public _FinalStage spaceId(@NotNull SpaceId spaceId) {
            this.spaceId = Objects.requireNonNull(spaceId, "spaceId must not be null");
            return this;
        }

        /**
         * <p>A description of what the constraint to be generated should do</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllConstraints(List<StoredConstraint> constraints) {
            this.constraints.addAll(constraints);
            return this;
        }

        @java.lang.Override
        public _FinalStage addConstraints(StoredConstraint constraints) {
            this.constraints.add(constraints);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "constraints", nulls = Nulls.SKIP)
        public _FinalStage constraints(List<StoredConstraint> constraints) {
            this.constraints.clear();
            this.constraints.addAll(constraints);
            return this;
        }

        @java.lang.Override
        public AiGenerateConstraintJobConfig build() {
            return new AiGenerateConstraintJobConfig(spaceId, constraints, description, additionalProperties);
        }
    }
}
