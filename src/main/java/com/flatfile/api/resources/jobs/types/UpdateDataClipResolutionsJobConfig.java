/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.DataClipId;
import com.flatfile.api.resources.commons.types.SheetId;
import com.flatfile.api.resources.dataclips.types.ResolveTo;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateDataClipResolutionsJobConfig.Builder.class)
public final class UpdateDataClipResolutionsJobConfig {
    private final DataClipId dataClipId;

    private final SheetId clippedSheetId;

    private final ResolveTo resolveTo;

    private final String columnField;

    private final String columnValue;

    private final Map<String, Object> additionalProperties;

    private UpdateDataClipResolutionsJobConfig(
            DataClipId dataClipId,
            SheetId clippedSheetId,
            ResolveTo resolveTo,
            String columnField,
            String columnValue,
            Map<String, Object> additionalProperties) {
        this.dataClipId = dataClipId;
        this.clippedSheetId = clippedSheetId;
        this.resolveTo = resolveTo;
        this.columnField = columnField;
        this.columnValue = columnValue;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the data clip to resolve
     */
    @JsonProperty("dataClipId")
    public DataClipId getDataClipId() {
        return dataClipId;
    }

    /**
     * @return The ID of the sheet that contains the data clip
     */
    @JsonProperty("clippedSheetId")
    public SheetId getClippedSheetId() {
        return clippedSheetId;
    }

    @JsonProperty("resolveTo")
    public ResolveTo getResolveTo() {
        return resolveTo;
    }

    /**
     * @return Optional. If provided, only this column will be resolved.
     */
    @JsonProperty("columnField")
    public String getColumnField() {
        return columnField;
    }

    /**
     * @return Optional. If provided, this value in the column will be replaced with the resolution target.
     */
    @JsonProperty("columnValue")
    public String getColumnValue() {
        return columnValue;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateDataClipResolutionsJobConfig
                && equalTo((UpdateDataClipResolutionsJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateDataClipResolutionsJobConfig other) {
        return dataClipId.equals(other.dataClipId)
                && clippedSheetId.equals(other.clippedSheetId)
                && resolveTo.equals(other.resolveTo)
                && columnField.equals(other.columnField)
                && columnValue.equals(other.columnValue);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.dataClipId, this.clippedSheetId, this.resolveTo, this.columnField, this.columnValue);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DataClipIdStage builder() {
        return new Builder();
    }

    public interface DataClipIdStage {
        ClippedSheetIdStage dataClipId(@NotNull DataClipId dataClipId);

        Builder from(UpdateDataClipResolutionsJobConfig other);
    }

    public interface ClippedSheetIdStage {
        ResolveToStage clippedSheetId(@NotNull SheetId clippedSheetId);
    }

    public interface ResolveToStage {
        ColumnFieldStage resolveTo(@NotNull ResolveTo resolveTo);
    }

    public interface ColumnFieldStage {
        ColumnValueStage columnField(@NotNull String columnField);
    }

    public interface ColumnValueStage {
        _FinalStage columnValue(@NotNull String columnValue);
    }

    public interface _FinalStage {
        UpdateDataClipResolutionsJobConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DataClipIdStage,
                    ClippedSheetIdStage,
                    ResolveToStage,
                    ColumnFieldStage,
                    ColumnValueStage,
                    _FinalStage {
        private DataClipId dataClipId;

        private SheetId clippedSheetId;

        private ResolveTo resolveTo;

        private String columnField;

        private String columnValue;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateDataClipResolutionsJobConfig other) {
            dataClipId(other.getDataClipId());
            clippedSheetId(other.getClippedSheetId());
            resolveTo(other.getResolveTo());
            columnField(other.getColumnField());
            columnValue(other.getColumnValue());
            return this;
        }

        /**
         * <p>The ID of the data clip to resolve</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dataClipId")
        public ClippedSheetIdStage dataClipId(@NotNull DataClipId dataClipId) {
            this.dataClipId = Objects.requireNonNull(dataClipId, "dataClipId must not be null");
            return this;
        }

        /**
         * <p>The ID of the sheet that contains the data clip</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("clippedSheetId")
        public ResolveToStage clippedSheetId(@NotNull SheetId clippedSheetId) {
            this.clippedSheetId = Objects.requireNonNull(clippedSheetId, "clippedSheetId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("resolveTo")
        public ColumnFieldStage resolveTo(@NotNull ResolveTo resolveTo) {
            this.resolveTo = Objects.requireNonNull(resolveTo, "resolveTo must not be null");
            return this;
        }

        /**
         * <p>Optional. If provided, only this column will be resolved.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("columnField")
        public ColumnValueStage columnField(@NotNull String columnField) {
            this.columnField = Objects.requireNonNull(columnField, "columnField must not be null");
            return this;
        }

        /**
         * <p>Optional. If provided, this value in the column will be replaced with the resolution target.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("columnValue")
        public _FinalStage columnValue(@NotNull String columnValue) {
            this.columnValue = Objects.requireNonNull(columnValue, "columnValue must not be null");
            return this;
        }

        @java.lang.Override
        public UpdateDataClipResolutionsJobConfig build() {
            return new UpdateDataClipResolutionsJobConfig(
                    dataClipId, clippedSheetId, resolveTo, columnField, columnValue, additionalProperties);
        }
    }
}
