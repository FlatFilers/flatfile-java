/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.property.types.Property;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Edge.Builder.class)
public final class Edge {
    private final Property sourceField;

    private final Property destinationField;

    private final Optional<List<String>> preview;

    private final Optional<EnumDetails> enumDetails;

    private final Optional<Metadata> metadata;

    private final Map<String, Object> additionalProperties;

    private Edge(
            Property sourceField,
            Property destinationField,
            Optional<List<String>> preview,
            Optional<EnumDetails> enumDetails,
            Optional<Metadata> metadata,
            Map<String, Object> additionalProperties) {
        this.sourceField = sourceField;
        this.destinationField = destinationField;
        this.preview = preview;
        this.enumDetails = enumDetails;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sourceField")
    public Property getSourceField() {
        return sourceField;
    }

    @JsonProperty("destinationField")
    public Property getDestinationField() {
        return destinationField;
    }

    @JsonProperty("preview")
    public Optional<List<String>> getPreview() {
        return preview;
    }

    /**
     * @return Only available if one or more of the destination fields is of type enum. Provides category mapping.
     */
    @JsonProperty("enumDetails")
    public Optional<EnumDetails> getEnumDetails() {
        return enumDetails;
    }

    @JsonProperty("metadata")
    public Optional<Metadata> getMetadata() {
        return metadata;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Edge && equalTo((Edge) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Edge other) {
        return sourceField.equals(other.sourceField)
                && destinationField.equals(other.destinationField)
                && preview.equals(other.preview)
                && enumDetails.equals(other.enumDetails)
                && metadata.equals(other.metadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.sourceField, this.destinationField, this.preview, this.enumDetails, this.metadata);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourceFieldStage builder() {
        return new Builder();
    }

    public interface SourceFieldStage {
        DestinationFieldStage sourceField(Property sourceField);

        Builder from(Edge other);
    }

    public interface DestinationFieldStage {
        _FinalStage destinationField(Property destinationField);
    }

    public interface _FinalStage {
        Edge build();

        _FinalStage preview(Optional<List<String>> preview);

        _FinalStage preview(List<String> preview);

        _FinalStage enumDetails(Optional<EnumDetails> enumDetails);

        _FinalStage enumDetails(EnumDetails enumDetails);

        _FinalStage metadata(Optional<Metadata> metadata);

        _FinalStage metadata(Metadata metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SourceFieldStage, DestinationFieldStage, _FinalStage {
        private Property sourceField;

        private Property destinationField;

        private Optional<Metadata> metadata = Optional.empty();

        private Optional<EnumDetails> enumDetails = Optional.empty();

        private Optional<List<String>> preview = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Edge other) {
            sourceField(other.getSourceField());
            destinationField(other.getDestinationField());
            preview(other.getPreview());
            enumDetails(other.getEnumDetails());
            metadata(other.getMetadata());
            return this;
        }

        @Override
        @JsonSetter("sourceField")
        public DestinationFieldStage sourceField(Property sourceField) {
            this.sourceField = sourceField;
            return this;
        }

        @Override
        @JsonSetter("destinationField")
        public _FinalStage destinationField(Property destinationField) {
            this.destinationField = destinationField;
            return this;
        }

        @Override
        public _FinalStage metadata(Metadata metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        @Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>Only available if one or more of the destination fields is of type enum. Provides category mapping.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage enumDetails(EnumDetails enumDetails) {
            this.enumDetails = Optional.of(enumDetails);
            return this;
        }

        @Override
        @JsonSetter(value = "enumDetails", nulls = Nulls.SKIP)
        public _FinalStage enumDetails(Optional<EnumDetails> enumDetails) {
            this.enumDetails = enumDetails;
            return this;
        }

        @Override
        public _FinalStage preview(List<String> preview) {
            this.preview = Optional.of(preview);
            return this;
        }

        @Override
        @JsonSetter(value = "preview", nulls = Nulls.SKIP)
        public _FinalStage preview(Optional<List<String>> preview) {
            this.preview = preview;
            return this;
        }

        @Override
        public Edge build() {
            return new Edge(sourceField, destinationField, preview, enumDetails, metadata, additionalProperties);
        }
    }
}
