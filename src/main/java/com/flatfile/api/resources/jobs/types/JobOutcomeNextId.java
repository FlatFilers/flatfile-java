/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JobOutcomeNextId.Builder.class)
public final class JobOutcomeNextId {
    private final String id;

    private final Optional<String> label;

    private final Optional<String> path;

    private final Optional<String> query;

    private final Map<String, Object> additionalProperties;

    private JobOutcomeNextId(
            String id,
            Optional<String> label,
            Optional<String> path,
            Optional<String> query,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.label = label;
        this.path = path;
        this.query = query;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @JsonProperty("path")
    public Optional<String> getPath() {
        return path;
    }

    @JsonProperty("query")
    public Optional<String> getQuery() {
        return query;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobOutcomeNextId && equalTo((JobOutcomeNextId) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobOutcomeNextId other) {
        return id.equals(other.id) && label.equals(other.label) && path.equals(other.path) && query.equals(other.query);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.label, this.path, this.query);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        _FinalStage id(@NotNull String id);

        Builder from(JobOutcomeNextId other);
    }

    public interface _FinalStage {
        JobOutcomeNextId build();

        _FinalStage label(Optional<String> label);

        _FinalStage label(String label);

        _FinalStage path(Optional<String> path);

        _FinalStage path(String path);

        _FinalStage query(Optional<String> query);

        _FinalStage query(String query);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private String id;

        private Optional<String> query = Optional.empty();

        private Optional<String> path = Optional.empty();

        private Optional<String> label = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JobOutcomeNextId other) {
            id(other.getId());
            label(other.getLabel());
            path(other.getPath());
            query(other.getQuery());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage query(String query) {
            this.query = Optional.ofNullable(query);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public _FinalStage query(Optional<String> query) {
            this.query = query;
            return this;
        }

        @java.lang.Override
        public _FinalStage path(String path) {
            this.path = Optional.ofNullable(path);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "path", nulls = Nulls.SKIP)
        public _FinalStage path(Optional<String> path) {
            this.path = path;
            return this;
        }

        @java.lang.Override
        public _FinalStage label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public _FinalStage label(Optional<String> label) {
            this.label = label;
            return this;
        }

        @java.lang.Override
        public JobOutcomeNextId build() {
            return new JobOutcomeNextId(id, label, path, query, additionalProperties);
        }
    }
}
