/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import com.flatfile.api.resources.commons.types.FileId;
import com.flatfile.api.resources.commons.types.JobId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Job.Builder.class)
public final class Job implements IJobConfig {
    private final JobType type;

    private final String operation;

    private final JobSource source;

    private final Optional<JobDestination> destination;

    private final Optional<JobUpdateConfig> config;

    private final Optional<Trigger> trigger;

    private final Optional<JobStatus> status;

    private final Optional<Double> progress;

    private final Optional<FileId> fileId;

    private final Optional<JobMode> mode;

    private final Optional<Map<String, Object>> input;

    private final Optional<JobSubject> subject;

    private final Optional<Map<String, Object>> outcome;

    private final Optional<String> info;

    private final Optional<Boolean> managed;

    private final Optional<EnvironmentId> environmentId;

    private final Optional<Integer> part;

    private final Optional<Map<String, Object>> partData;

    private final Optional<JobPartExecution> partExecution;

    private final Optional<JobId> parentId;

    private final JobId id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<OffsetDateTime> startedAt;

    private final Optional<OffsetDateTime> finishedAt;

    private final Optional<OffsetDateTime> outcomeAcknowledgedAt;

    private final Map<String, Object> additionalProperties;

    private Job(
            JobType type,
            String operation,
            JobSource source,
            Optional<JobDestination> destination,
            Optional<JobUpdateConfig> config,
            Optional<Trigger> trigger,
            Optional<JobStatus> status,
            Optional<Double> progress,
            Optional<FileId> fileId,
            Optional<JobMode> mode,
            Optional<Map<String, Object>> input,
            Optional<JobSubject> subject,
            Optional<Map<String, Object>> outcome,
            Optional<String> info,
            Optional<Boolean> managed,
            Optional<EnvironmentId> environmentId,
            Optional<Integer> part,
            Optional<Map<String, Object>> partData,
            Optional<JobPartExecution> partExecution,
            Optional<JobId> parentId,
            JobId id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<OffsetDateTime> startedAt,
            Optional<OffsetDateTime> finishedAt,
            Optional<OffsetDateTime> outcomeAcknowledgedAt,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.operation = operation;
        this.source = source;
        this.destination = destination;
        this.config = config;
        this.trigger = trigger;
        this.status = status;
        this.progress = progress;
        this.fileId = fileId;
        this.mode = mode;
        this.input = input;
        this.subject = subject;
        this.outcome = outcome;
        this.info = info;
        this.managed = managed;
        this.environmentId = environmentId;
        this.part = part;
        this.partData = partData;
        this.partExecution = partExecution;
        this.parentId = parentId;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.startedAt = startedAt;
        this.finishedAt = finishedAt;
        this.outcomeAcknowledgedAt = outcomeAcknowledgedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of job
     */
    @JsonProperty("type")
    @Override
    public JobType getType() {
        return type;
    }

    /**
     * @return the type of operation to perform on the data. For example, &quot;export&quot;.
     */
    @JsonProperty("operation")
    @Override
    public String getOperation() {
        return operation;
    }

    @JsonProperty("source")
    @Override
    public JobSource getSource() {
        return source;
    }

    @JsonProperty("destination")
    @Override
    public Optional<JobDestination> getDestination() {
        return destination;
    }

    @JsonProperty("config")
    @Override
    public Optional<JobUpdateConfig> getConfig() {
        return config;
    }

    /**
     * @return the type of trigger to use for this job
     */
    @JsonProperty("trigger")
    @Override
    public Optional<Trigger> getTrigger() {
        return trigger;
    }

    /**
     * @return the status of the job
     */
    @JsonProperty("status")
    @Override
    public Optional<JobStatus> getStatus() {
        return status;
    }

    /**
     * @return the progress of the job
     */
    @JsonProperty("progress")
    @Override
    public Optional<Double> getProgress() {
        return progress;
    }

    @JsonProperty("fileId")
    @Override
    public Optional<FileId> getFileId() {
        return fileId;
    }

    /**
     * @return the mode of the job
     */
    @JsonProperty("mode")
    @Override
    public Optional<JobMode> getMode() {
        return mode;
    }

    /**
     * @return Input parameters for this job type.
     */
    @JsonProperty("input")
    @Override
    public Optional<Map<String, Object>> getInput() {
        return input;
    }

    /**
     * @return Subject parameters for this job type.
     */
    @JsonProperty("subject")
    @Override
    public Optional<JobSubject> getSubject() {
        return subject;
    }

    /**
     * @return Outcome summary of job.
     */
    @JsonProperty("outcome")
    @Override
    public Optional<Map<String, Object>> getOutcome() {
        return outcome;
    }

    /**
     * @return Current status of job in text
     */
    @JsonProperty("info")
    @Override
    public Optional<String> getInfo() {
        return info;
    }

    /**
     * @return Indicates if Flatfile is managing the control flow of this job or if it is being manually tracked.
     */
    @JsonProperty("managed")
    @Override
    public Optional<Boolean> getManaged() {
        return managed;
    }

    /**
     * @return The id of the environment this job belongs to
     */
    @JsonProperty("environmentId")
    @Override
    public Optional<EnvironmentId> getEnvironmentId() {
        return environmentId;
    }

    /**
     * @return The part number of this job
     */
    @JsonProperty("part")
    @Override
    public Optional<Integer> getPart() {
        return part;
    }

    /**
     * @return The data for this part of the job
     */
    @JsonProperty("partData")
    @Override
    public Optional<Map<String, Object>> getPartData() {
        return partData;
    }

    /**
     * @return The execution mode for this part of the job
     */
    @JsonProperty("partExecution")
    @Override
    public Optional<JobPartExecution> getPartExecution() {
        return partExecution;
    }

    /**
     * @return The id of the parent job
     */
    @JsonProperty("parentId")
    @Override
    public Optional<JobId> getParentId() {
        return parentId;
    }

    @JsonProperty("id")
    public JobId getId() {
        return id;
    }

    /**
     * @return Date the item was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Date the item was last updated
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return the time that the job started at
     */
    @JsonProperty("startedAt")
    public Optional<OffsetDateTime> getStartedAt() {
        return startedAt;
    }

    /**
     * @return the time that the job finished at
     */
    @JsonProperty("finishedAt")
    public Optional<OffsetDateTime> getFinishedAt() {
        return finishedAt;
    }

    /**
     * @return the time that the job's outcome has been acknowledged by a user
     */
    @JsonProperty("outcomeAcknowledgedAt")
    public Optional<OffsetDateTime> getOutcomeAcknowledgedAt() {
        return outcomeAcknowledgedAt;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Job && equalTo((Job) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Job other) {
        return type.equals(other.type)
                && operation.equals(other.operation)
                && source.equals(other.source)
                && destination.equals(other.destination)
                && config.equals(other.config)
                && trigger.equals(other.trigger)
                && status.equals(other.status)
                && progress.equals(other.progress)
                && fileId.equals(other.fileId)
                && mode.equals(other.mode)
                && input.equals(other.input)
                && subject.equals(other.subject)
                && outcome.equals(other.outcome)
                && info.equals(other.info)
                && managed.equals(other.managed)
                && environmentId.equals(other.environmentId)
                && part.equals(other.part)
                && partData.equals(other.partData)
                && partExecution.equals(other.partExecution)
                && parentId.equals(other.parentId)
                && id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && startedAt.equals(other.startedAt)
                && finishedAt.equals(other.finishedAt)
                && outcomeAcknowledgedAt.equals(other.outcomeAcknowledgedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.operation,
                this.source,
                this.destination,
                this.config,
                this.trigger,
                this.status,
                this.progress,
                this.fileId,
                this.mode,
                this.input,
                this.subject,
                this.outcome,
                this.info,
                this.managed,
                this.environmentId,
                this.part,
                this.partData,
                this.partExecution,
                this.parentId,
                this.id,
                this.createdAt,
                this.updatedAt,
                this.startedAt,
                this.finishedAt,
                this.outcomeAcknowledgedAt);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        OperationStage type(JobType type);

        Builder from(Job other);
    }

    public interface OperationStage {
        SourceStage operation(String operation);
    }

    public interface SourceStage {
        IdStage source(JobSource source);
    }

    public interface IdStage {
        CreatedAtStage id(JobId id);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Job build();

        _FinalStage destination(Optional<JobDestination> destination);

        _FinalStage destination(JobDestination destination);

        _FinalStage config(Optional<JobUpdateConfig> config);

        _FinalStage config(JobUpdateConfig config);

        _FinalStage trigger(Optional<Trigger> trigger);

        _FinalStage trigger(Trigger trigger);

        _FinalStage status(Optional<JobStatus> status);

        _FinalStage status(JobStatus status);

        _FinalStage progress(Optional<Double> progress);

        _FinalStage progress(Double progress);

        _FinalStage fileId(Optional<FileId> fileId);

        _FinalStage fileId(FileId fileId);

        _FinalStage mode(Optional<JobMode> mode);

        _FinalStage mode(JobMode mode);

        _FinalStage input(Optional<Map<String, Object>> input);

        _FinalStage input(Map<String, Object> input);

        _FinalStage subject(Optional<JobSubject> subject);

        _FinalStage subject(JobSubject subject);

        _FinalStage outcome(Optional<Map<String, Object>> outcome);

        _FinalStage outcome(Map<String, Object> outcome);

        _FinalStage info(Optional<String> info);

        _FinalStage info(String info);

        _FinalStage managed(Optional<Boolean> managed);

        _FinalStage managed(Boolean managed);

        _FinalStage environmentId(Optional<EnvironmentId> environmentId);

        _FinalStage environmentId(EnvironmentId environmentId);

        _FinalStage part(Optional<Integer> part);

        _FinalStage part(Integer part);

        _FinalStage partData(Optional<Map<String, Object>> partData);

        _FinalStage partData(Map<String, Object> partData);

        _FinalStage partExecution(Optional<JobPartExecution> partExecution);

        _FinalStage partExecution(JobPartExecution partExecution);

        _FinalStage parentId(Optional<JobId> parentId);

        _FinalStage parentId(JobId parentId);

        _FinalStage startedAt(Optional<OffsetDateTime> startedAt);

        _FinalStage startedAt(OffsetDateTime startedAt);

        _FinalStage finishedAt(Optional<OffsetDateTime> finishedAt);

        _FinalStage finishedAt(OffsetDateTime finishedAt);

        _FinalStage outcomeAcknowledgedAt(Optional<OffsetDateTime> outcomeAcknowledgedAt);

        _FinalStage outcomeAcknowledgedAt(OffsetDateTime outcomeAcknowledgedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage, OperationStage, SourceStage, IdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private JobType type;

        private String operation;

        private JobSource source;

        private JobId id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<OffsetDateTime> outcomeAcknowledgedAt = Optional.empty();

        private Optional<OffsetDateTime> finishedAt = Optional.empty();

        private Optional<OffsetDateTime> startedAt = Optional.empty();

        private Optional<JobId> parentId = Optional.empty();

        private Optional<JobPartExecution> partExecution = Optional.empty();

        private Optional<Map<String, Object>> partData = Optional.empty();

        private Optional<Integer> part = Optional.empty();

        private Optional<EnvironmentId> environmentId = Optional.empty();

        private Optional<Boolean> managed = Optional.empty();

        private Optional<String> info = Optional.empty();

        private Optional<Map<String, Object>> outcome = Optional.empty();

        private Optional<JobSubject> subject = Optional.empty();

        private Optional<Map<String, Object>> input = Optional.empty();

        private Optional<JobMode> mode = Optional.empty();

        private Optional<FileId> fileId = Optional.empty();

        private Optional<Double> progress = Optional.empty();

        private Optional<JobStatus> status = Optional.empty();

        private Optional<Trigger> trigger = Optional.empty();

        private Optional<JobUpdateConfig> config = Optional.empty();

        private Optional<JobDestination> destination = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Job other) {
            type(other.getType());
            operation(other.getOperation());
            source(other.getSource());
            destination(other.getDestination());
            config(other.getConfig());
            trigger(other.getTrigger());
            status(other.getStatus());
            progress(other.getProgress());
            fileId(other.getFileId());
            mode(other.getMode());
            input(other.getInput());
            subject(other.getSubject());
            outcome(other.getOutcome());
            info(other.getInfo());
            managed(other.getManaged());
            environmentId(other.getEnvironmentId());
            part(other.getPart());
            partData(other.getPartData());
            partExecution(other.getPartExecution());
            parentId(other.getParentId());
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            startedAt(other.getStartedAt());
            finishedAt(other.getFinishedAt());
            outcomeAcknowledgedAt(other.getOutcomeAcknowledgedAt());
            return this;
        }

        /**
         * <p>The type of job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("type")
        public OperationStage type(JobType type) {
            this.type = type;
            return this;
        }

        /**
         * <p>the type of operation to perform on the data. For example, &quot;export&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("operation")
        public SourceStage operation(String operation) {
            this.operation = operation;
            return this;
        }

        @Override
        @JsonSetter("source")
        public IdStage source(JobSource source) {
            this.source = source;
            return this;
        }

        @Override
        @JsonSetter("id")
        public CreatedAtStage id(JobId id) {
            this.id = id;
            return this;
        }

        /**
         * <p>Date the item was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Date the item was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>the time that the job's outcome has been acknowledged by a user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage outcomeAcknowledgedAt(OffsetDateTime outcomeAcknowledgedAt) {
            this.outcomeAcknowledgedAt = Optional.of(outcomeAcknowledgedAt);
            return this;
        }

        @Override
        @JsonSetter(value = "outcomeAcknowledgedAt", nulls = Nulls.SKIP)
        public _FinalStage outcomeAcknowledgedAt(Optional<OffsetDateTime> outcomeAcknowledgedAt) {
            this.outcomeAcknowledgedAt = outcomeAcknowledgedAt;
            return this;
        }

        /**
         * <p>the time that the job finished at</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage finishedAt(OffsetDateTime finishedAt) {
            this.finishedAt = Optional.of(finishedAt);
            return this;
        }

        @Override
        @JsonSetter(value = "finishedAt", nulls = Nulls.SKIP)
        public _FinalStage finishedAt(Optional<OffsetDateTime> finishedAt) {
            this.finishedAt = finishedAt;
            return this;
        }

        /**
         * <p>the time that the job started at</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage startedAt(OffsetDateTime startedAt) {
            this.startedAt = Optional.of(startedAt);
            return this;
        }

        @Override
        @JsonSetter(value = "startedAt", nulls = Nulls.SKIP)
        public _FinalStage startedAt(Optional<OffsetDateTime> startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        /**
         * <p>The id of the parent job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage parentId(JobId parentId) {
            this.parentId = Optional.of(parentId);
            return this;
        }

        @Override
        @JsonSetter(value = "parentId", nulls = Nulls.SKIP)
        public _FinalStage parentId(Optional<JobId> parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * <p>The execution mode for this part of the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage partExecution(JobPartExecution partExecution) {
            this.partExecution = Optional.of(partExecution);
            return this;
        }

        @Override
        @JsonSetter(value = "partExecution", nulls = Nulls.SKIP)
        public _FinalStage partExecution(Optional<JobPartExecution> partExecution) {
            this.partExecution = partExecution;
            return this;
        }

        /**
         * <p>The data for this part of the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage partData(Map<String, Object> partData) {
            this.partData = Optional.of(partData);
            return this;
        }

        @Override
        @JsonSetter(value = "partData", nulls = Nulls.SKIP)
        public _FinalStage partData(Optional<Map<String, Object>> partData) {
            this.partData = partData;
            return this;
        }

        /**
         * <p>The part number of this job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage part(Integer part) {
            this.part = Optional.of(part);
            return this;
        }

        @Override
        @JsonSetter(value = "part", nulls = Nulls.SKIP)
        public _FinalStage part(Optional<Integer> part) {
            this.part = part;
            return this;
        }

        /**
         * <p>The id of the environment this job belongs to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage environmentId(EnvironmentId environmentId) {
            this.environmentId = Optional.of(environmentId);
            return this;
        }

        @Override
        @JsonSetter(value = "environmentId", nulls = Nulls.SKIP)
        public _FinalStage environmentId(Optional<EnvironmentId> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        /**
         * <p>Indicates if Flatfile is managing the control flow of this job or if it is being manually tracked.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage managed(Boolean managed) {
            this.managed = Optional.of(managed);
            return this;
        }

        @Override
        @JsonSetter(value = "managed", nulls = Nulls.SKIP)
        public _FinalStage managed(Optional<Boolean> managed) {
            this.managed = managed;
            return this;
        }

        /**
         * <p>Current status of job in text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage info(String info) {
            this.info = Optional.of(info);
            return this;
        }

        @Override
        @JsonSetter(value = "info", nulls = Nulls.SKIP)
        public _FinalStage info(Optional<String> info) {
            this.info = info;
            return this;
        }

        /**
         * <p>Outcome summary of job.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage outcome(Map<String, Object> outcome) {
            this.outcome = Optional.of(outcome);
            return this;
        }

        @Override
        @JsonSetter(value = "outcome", nulls = Nulls.SKIP)
        public _FinalStage outcome(Optional<Map<String, Object>> outcome) {
            this.outcome = outcome;
            return this;
        }

        /**
         * <p>Subject parameters for this job type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage subject(JobSubject subject) {
            this.subject = Optional.of(subject);
            return this;
        }

        @Override
        @JsonSetter(value = "subject", nulls = Nulls.SKIP)
        public _FinalStage subject(Optional<JobSubject> subject) {
            this.subject = subject;
            return this;
        }

        /**
         * <p>Input parameters for this job type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage input(Map<String, Object> input) {
            this.input = Optional.of(input);
            return this;
        }

        @Override
        @JsonSetter(value = "input", nulls = Nulls.SKIP)
        public _FinalStage input(Optional<Map<String, Object>> input) {
            this.input = input;
            return this;
        }

        /**
         * <p>the mode of the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage mode(JobMode mode) {
            this.mode = Optional.of(mode);
            return this;
        }

        @Override
        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public _FinalStage mode(Optional<JobMode> mode) {
            this.mode = mode;
            return this;
        }

        @Override
        public _FinalStage fileId(FileId fileId) {
            this.fileId = Optional.of(fileId);
            return this;
        }

        @Override
        @JsonSetter(value = "fileId", nulls = Nulls.SKIP)
        public _FinalStage fileId(Optional<FileId> fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * <p>the progress of the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage progress(Double progress) {
            this.progress = Optional.of(progress);
            return this;
        }

        @Override
        @JsonSetter(value = "progress", nulls = Nulls.SKIP)
        public _FinalStage progress(Optional<Double> progress) {
            this.progress = progress;
            return this;
        }

        /**
         * <p>the status of the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage status(JobStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        @Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<JobStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>the type of trigger to use for this job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage trigger(Trigger trigger) {
            this.trigger = Optional.of(trigger);
            return this;
        }

        @Override
        @JsonSetter(value = "trigger", nulls = Nulls.SKIP)
        public _FinalStage trigger(Optional<Trigger> trigger) {
            this.trigger = trigger;
            return this;
        }

        @Override
        public _FinalStage config(JobUpdateConfig config) {
            this.config = Optional.of(config);
            return this;
        }

        @Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<JobUpdateConfig> config) {
            this.config = config;
            return this;
        }

        @Override
        public _FinalStage destination(JobDestination destination) {
            this.destination = Optional.of(destination);
            return this;
        }

        @Override
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public _FinalStage destination(Optional<JobDestination> destination) {
            this.destination = destination;
            return this;
        }

        @Override
        public Job build() {
            return new Job(
                    type,
                    operation,
                    source,
                    destination,
                    config,
                    trigger,
                    status,
                    progress,
                    fileId,
                    mode,
                    input,
                    subject,
                    outcome,
                    info,
                    managed,
                    environmentId,
                    part,
                    partData,
                    partExecution,
                    parentId,
                    id,
                    createdAt,
                    updatedAt,
                    startedAt,
                    finishedAt,
                    outcomeAcknowledgedAt,
                    additionalProperties);
        }
    }
}
