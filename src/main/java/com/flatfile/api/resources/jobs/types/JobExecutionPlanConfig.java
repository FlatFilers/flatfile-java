/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JobExecutionPlanConfig.Builder.class)
public final class JobExecutionPlanConfig implements IJobExecutionPlanConfig {
    private final Optional<List<Edge>> fieldMapping;

    private final Optional<List<SourceField>> unmappedSourceFields;

    private final Optional<List<DestinationField>> unmappedDestinationFields;

    private final Optional<String> programId;

    private final Map<String, Object> additionalProperties;

    private JobExecutionPlanConfig(
            Optional<List<Edge>> fieldMapping,
            Optional<List<SourceField>> unmappedSourceFields,
            Optional<List<DestinationField>> unmappedDestinationFields,
            Optional<String> programId,
            Map<String, Object> additionalProperties) {
        this.fieldMapping = fieldMapping;
        this.unmappedSourceFields = unmappedSourceFields;
        this.unmappedDestinationFields = unmappedDestinationFields;
        this.programId = programId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("fieldMapping")
    @java.lang.Override
    public Optional<List<Edge>> getFieldMapping() {
        return fieldMapping;
    }

    @JsonProperty("unmappedSourceFields")
    @java.lang.Override
    public Optional<List<SourceField>> getUnmappedSourceFields() {
        return unmappedSourceFields;
    }

    @JsonProperty("unmappedDestinationFields")
    @java.lang.Override
    public Optional<List<DestinationField>> getUnmappedDestinationFields() {
        return unmappedDestinationFields;
    }

    @JsonProperty("programId")
    @java.lang.Override
    public Optional<String> getProgramId() {
        return programId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobExecutionPlanConfig && equalTo((JobExecutionPlanConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobExecutionPlanConfig other) {
        return fieldMapping.equals(other.fieldMapping)
                && unmappedSourceFields.equals(other.unmappedSourceFields)
                && unmappedDestinationFields.equals(other.unmappedDestinationFields)
                && programId.equals(other.programId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fieldMapping, this.unmappedSourceFields, this.unmappedDestinationFields, this.programId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Edge>> fieldMapping = Optional.empty();

        private Optional<List<SourceField>> unmappedSourceFields = Optional.empty();

        private Optional<List<DestinationField>> unmappedDestinationFields = Optional.empty();

        private Optional<String> programId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(JobExecutionPlanConfig other) {
            fieldMapping(other.getFieldMapping());
            unmappedSourceFields(other.getUnmappedSourceFields());
            unmappedDestinationFields(other.getUnmappedDestinationFields());
            programId(other.getProgramId());
            return this;
        }

        @JsonSetter(value = "fieldMapping", nulls = Nulls.SKIP)
        public Builder fieldMapping(Optional<List<Edge>> fieldMapping) {
            this.fieldMapping = fieldMapping;
            return this;
        }

        public Builder fieldMapping(List<Edge> fieldMapping) {
            this.fieldMapping = Optional.ofNullable(fieldMapping);
            return this;
        }

        @JsonSetter(value = "unmappedSourceFields", nulls = Nulls.SKIP)
        public Builder unmappedSourceFields(Optional<List<SourceField>> unmappedSourceFields) {
            this.unmappedSourceFields = unmappedSourceFields;
            return this;
        }

        public Builder unmappedSourceFields(List<SourceField> unmappedSourceFields) {
            this.unmappedSourceFields = Optional.ofNullable(unmappedSourceFields);
            return this;
        }

        @JsonSetter(value = "unmappedDestinationFields", nulls = Nulls.SKIP)
        public Builder unmappedDestinationFields(Optional<List<DestinationField>> unmappedDestinationFields) {
            this.unmappedDestinationFields = unmappedDestinationFields;
            return this;
        }

        public Builder unmappedDestinationFields(List<DestinationField> unmappedDestinationFields) {
            this.unmappedDestinationFields = Optional.ofNullable(unmappedDestinationFields);
            return this;
        }

        @JsonSetter(value = "programId", nulls = Nulls.SKIP)
        public Builder programId(Optional<String> programId) {
            this.programId = programId;
            return this;
        }

        public Builder programId(String programId) {
            this.programId = Optional.ofNullable(programId);
            return this;
        }

        public JobExecutionPlanConfig build() {
            return new JobExecutionPlanConfig(
                    fieldMapping, unmappedSourceFields, unmappedDestinationFields, programId, additionalProperties);
        }
    }
}
