/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.FileId;
import com.flatfile.api.resources.commons.types.JobId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JobExecutionPlanRequest.Builder.class)
public final class JobExecutionPlanRequest implements IJobExecutionPlan {
    private final List<Edge> fieldMapping;

    private final List<SourceField> unmappedSourceFields;

    private final List<DestinationField> unmappedDestinationFields;

    private final Optional<String> programId;

    private final FileId fileId;

    private final JobId jobId;

    private final Map<String, Object> additionalProperties;

    private JobExecutionPlanRequest(
            List<Edge> fieldMapping,
            List<SourceField> unmappedSourceFields,
            List<DestinationField> unmappedDestinationFields,
            Optional<String> programId,
            FileId fileId,
            JobId jobId,
            Map<String, Object> additionalProperties) {
        this.fieldMapping = fieldMapping;
        this.unmappedSourceFields = unmappedSourceFields;
        this.unmappedDestinationFields = unmappedDestinationFields;
        this.programId = programId;
        this.fileId = fileId;
        this.jobId = jobId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("fieldMapping")
    @java.lang.Override
    public List<Edge> getFieldMapping() {
        return fieldMapping;
    }

    @JsonProperty("unmappedSourceFields")
    @java.lang.Override
    public List<SourceField> getUnmappedSourceFields() {
        return unmappedSourceFields;
    }

    @JsonProperty("unmappedDestinationFields")
    @java.lang.Override
    public List<DestinationField> getUnmappedDestinationFields() {
        return unmappedDestinationFields;
    }

    @JsonProperty("programId")
    @java.lang.Override
    public Optional<String> getProgramId() {
        return programId;
    }

    @JsonProperty("fileId")
    public FileId getFileId() {
        return fileId;
    }

    @JsonProperty("jobId")
    public JobId getJobId() {
        return jobId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobExecutionPlanRequest && equalTo((JobExecutionPlanRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobExecutionPlanRequest other) {
        return fieldMapping.equals(other.fieldMapping)
                && unmappedSourceFields.equals(other.unmappedSourceFields)
                && unmappedDestinationFields.equals(other.unmappedDestinationFields)
                && programId.equals(other.programId)
                && fileId.equals(other.fileId)
                && jobId.equals(other.jobId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fieldMapping,
                this.unmappedSourceFields,
                this.unmappedDestinationFields,
                this.programId,
                this.fileId,
                this.jobId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FileIdStage builder() {
        return new Builder();
    }

    public interface FileIdStage {
        JobIdStage fileId(@NotNull FileId fileId);

        Builder from(JobExecutionPlanRequest other);
    }

    public interface JobIdStage {
        _FinalStage jobId(@NotNull JobId jobId);
    }

    public interface _FinalStage {
        JobExecutionPlanRequest build();

        _FinalStage fieldMapping(List<Edge> fieldMapping);

        _FinalStage addFieldMapping(Edge fieldMapping);

        _FinalStage addAllFieldMapping(List<Edge> fieldMapping);

        _FinalStage unmappedSourceFields(List<SourceField> unmappedSourceFields);

        _FinalStage addUnmappedSourceFields(SourceField unmappedSourceFields);

        _FinalStage addAllUnmappedSourceFields(List<SourceField> unmappedSourceFields);

        _FinalStage unmappedDestinationFields(List<DestinationField> unmappedDestinationFields);

        _FinalStage addUnmappedDestinationFields(DestinationField unmappedDestinationFields);

        _FinalStage addAllUnmappedDestinationFields(List<DestinationField> unmappedDestinationFields);

        _FinalStage programId(Optional<String> programId);

        _FinalStage programId(String programId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FileIdStage, JobIdStage, _FinalStage {
        private FileId fileId;

        private JobId jobId;

        private Optional<String> programId = Optional.empty();

        private List<DestinationField> unmappedDestinationFields = new ArrayList<>();

        private List<SourceField> unmappedSourceFields = new ArrayList<>();

        private List<Edge> fieldMapping = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JobExecutionPlanRequest other) {
            fieldMapping(other.getFieldMapping());
            unmappedSourceFields(other.getUnmappedSourceFields());
            unmappedDestinationFields(other.getUnmappedDestinationFields());
            programId(other.getProgramId());
            fileId(other.getFileId());
            jobId(other.getJobId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("fileId")
        public JobIdStage fileId(@NotNull FileId fileId) {
            this.fileId = Objects.requireNonNull(fileId, "fileId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("jobId")
        public _FinalStage jobId(@NotNull JobId jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage programId(String programId) {
            this.programId = Optional.ofNullable(programId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "programId", nulls = Nulls.SKIP)
        public _FinalStage programId(Optional<String> programId) {
            this.programId = programId;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllUnmappedDestinationFields(List<DestinationField> unmappedDestinationFields) {
            this.unmappedDestinationFields.addAll(unmappedDestinationFields);
            return this;
        }

        @java.lang.Override
        public _FinalStage addUnmappedDestinationFields(DestinationField unmappedDestinationFields) {
            this.unmappedDestinationFields.add(unmappedDestinationFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "unmappedDestinationFields", nulls = Nulls.SKIP)
        public _FinalStage unmappedDestinationFields(List<DestinationField> unmappedDestinationFields) {
            this.unmappedDestinationFields.clear();
            this.unmappedDestinationFields.addAll(unmappedDestinationFields);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllUnmappedSourceFields(List<SourceField> unmappedSourceFields) {
            this.unmappedSourceFields.addAll(unmappedSourceFields);
            return this;
        }

        @java.lang.Override
        public _FinalStage addUnmappedSourceFields(SourceField unmappedSourceFields) {
            this.unmappedSourceFields.add(unmappedSourceFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "unmappedSourceFields", nulls = Nulls.SKIP)
        public _FinalStage unmappedSourceFields(List<SourceField> unmappedSourceFields) {
            this.unmappedSourceFields.clear();
            this.unmappedSourceFields.addAll(unmappedSourceFields);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllFieldMapping(List<Edge> fieldMapping) {
            this.fieldMapping.addAll(fieldMapping);
            return this;
        }

        @java.lang.Override
        public _FinalStage addFieldMapping(Edge fieldMapping) {
            this.fieldMapping.add(fieldMapping);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fieldMapping", nulls = Nulls.SKIP)
        public _FinalStage fieldMapping(List<Edge> fieldMapping) {
            this.fieldMapping.clear();
            this.fieldMapping.addAll(fieldMapping);
            return this;
        }

        @java.lang.Override
        public JobExecutionPlanRequest build() {
            return new JobExecutionPlanRequest(
                    fieldMapping,
                    unmappedSourceFields,
                    unmappedDestinationFields,
                    programId,
                    fileId,
                    jobId,
                    additionalProperties);
        }
    }
}
