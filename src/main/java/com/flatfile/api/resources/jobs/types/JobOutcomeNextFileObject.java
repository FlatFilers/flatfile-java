/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JobOutcomeNextFileObject.Builder.class)
public final class JobOutcomeNextFileObject {
    private final String fileId;

    private final Optional<String> label;

    private final Map<String, Object> additionalProperties;

    private JobOutcomeNextFileObject(String fileId, Optional<String> label, Map<String, Object> additionalProperties) {
        this.fileId = fileId;
        this.label = label;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("fileId")
    public String getFileId() {
        return fileId;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobOutcomeNextFileObject && equalTo((JobOutcomeNextFileObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobOutcomeNextFileObject other) {
        return fileId.equals(other.fileId) && label.equals(other.label);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fileId, this.label);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FileIdStage builder() {
        return new Builder();
    }

    public interface FileIdStage {
        _FinalStage fileId(@NotNull String fileId);

        Builder from(JobOutcomeNextFileObject other);
    }

    public interface _FinalStage {
        JobOutcomeNextFileObject build();

        _FinalStage label(Optional<String> label);

        _FinalStage label(String label);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FileIdStage, _FinalStage {
        private String fileId;

        private Optional<String> label = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JobOutcomeNextFileObject other) {
            fileId(other.getFileId());
            label(other.getLabel());
            return this;
        }

        @java.lang.Override
        @JsonSetter("fileId")
        public _FinalStage fileId(@NotNull String fileId) {
            this.fileId = Objects.requireNonNull(fileId, "fileId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public _FinalStage label(Optional<String> label) {
            this.label = label;
            return this;
        }

        @java.lang.Override
        public JobOutcomeNextFileObject build() {
            return new JobOutcomeNextFileObject(fileId, label, additionalProperties);
        }
    }
}
