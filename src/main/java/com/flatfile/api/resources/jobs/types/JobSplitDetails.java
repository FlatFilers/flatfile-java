/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = JobSplitDetails.Builder.class)
public final class JobSplitDetails {
    private final JobParts parts;

    private final Optional<Boolean> runInParallel;

    private final Map<String, Object> additionalProperties;

    private JobSplitDetails(JobParts parts, Optional<Boolean> runInParallel, Map<String, Object> additionalProperties) {
        this.parts = parts;
        this.runInParallel = runInParallel;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("parts")
    public JobParts getParts() {
        return parts;
    }

    @JsonProperty("runInParallel")
    public Optional<Boolean> getRunInParallel() {
        return runInParallel;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobSplitDetails && equalTo((JobSplitDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobSplitDetails other) {
        return parts.equals(other.parts) && runInParallel.equals(other.runInParallel);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.parts, this.runInParallel);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PartsStage builder() {
        return new Builder();
    }

    public interface PartsStage {
        _FinalStage parts(JobParts parts);

        Builder from(JobSplitDetails other);
    }

    public interface _FinalStage {
        JobSplitDetails build();

        _FinalStage runInParallel(Optional<Boolean> runInParallel);

        _FinalStage runInParallel(Boolean runInParallel);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PartsStage, _FinalStage {
        private JobParts parts;

        private Optional<Boolean> runInParallel = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JobSplitDetails other) {
            parts(other.getParts());
            runInParallel(other.getRunInParallel());
            return this;
        }

        @java.lang.Override
        @JsonSetter("parts")
        public _FinalStage parts(JobParts parts) {
            this.parts = parts;
            return this;
        }

        @java.lang.Override
        public _FinalStage runInParallel(Boolean runInParallel) {
            this.runInParallel = Optional.of(runInParallel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "runInParallel", nulls = Nulls.SKIP)
        public _FinalStage runInParallel(Optional<Boolean> runInParallel) {
            this.runInParallel = runInParallel;
            return this;
        }

        @java.lang.Override
        public JobSplitDetails build() {
            return new JobSplitDetails(parts, runInParallel, additionalProperties);
        }
    }
}
