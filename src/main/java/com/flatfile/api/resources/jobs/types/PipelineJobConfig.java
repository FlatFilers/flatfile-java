/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PipelineJobConfig.Builder.class)
public final class PipelineJobConfig {
    private final SheetId sourceSheetId;

    private final SheetId destinationSheetId;

    private final Map<String, Object> additionalProperties;

    private PipelineJobConfig(
            SheetId sourceSheetId, SheetId destinationSheetId, Map<String, Object> additionalProperties) {
        this.sourceSheetId = sourceSheetId;
        this.destinationSheetId = destinationSheetId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sourceSheetId")
    public SheetId getSourceSheetId() {
        return sourceSheetId;
    }

    @JsonProperty("destinationSheetId")
    public SheetId getDestinationSheetId() {
        return destinationSheetId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PipelineJobConfig && equalTo((PipelineJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PipelineJobConfig other) {
        return sourceSheetId.equals(other.sourceSheetId) && destinationSheetId.equals(other.destinationSheetId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sourceSheetId, this.destinationSheetId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourceSheetIdStage builder() {
        return new Builder();
    }

    public interface SourceSheetIdStage {
        DestinationSheetIdStage sourceSheetId(SheetId sourceSheetId);

        Builder from(PipelineJobConfig other);
    }

    public interface DestinationSheetIdStage {
        _FinalStage destinationSheetId(SheetId destinationSheetId);
    }

    public interface _FinalStage {
        PipelineJobConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SourceSheetIdStage, DestinationSheetIdStage, _FinalStage {
        private SheetId sourceSheetId;

        private SheetId destinationSheetId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PipelineJobConfig other) {
            sourceSheetId(other.getSourceSheetId());
            destinationSheetId(other.getDestinationSheetId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sourceSheetId")
        public DestinationSheetIdStage sourceSheetId(SheetId sourceSheetId) {
            this.sourceSheetId = sourceSheetId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("destinationSheetId")
        public _FinalStage destinationSheetId(SheetId destinationSheetId) {
            this.destinationSheetId = destinationSheetId;
            return this;
        }

        @java.lang.Override
        public PipelineJobConfig build() {
            return new PipelineJobConfig(sourceSheetId, destinationSheetId, additionalProperties);
        }
    }
}
