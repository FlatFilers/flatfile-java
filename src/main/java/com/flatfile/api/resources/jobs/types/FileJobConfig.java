/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = FileJobConfig.Builder.class)
public final class FileJobConfig {
    private final Driver driver;

    private final Optional<Map<String, Object>> options;

    private final Optional<Integer> detectedHeaderRow;

    private final Map<String, Object> additionalProperties;

    private FileJobConfig(
            Driver driver,
            Optional<Map<String, Object>> options,
            Optional<Integer> detectedHeaderRow,
            Map<String, Object> additionalProperties) {
        this.driver = driver;
        this.options = options;
        this.detectedHeaderRow = detectedHeaderRow;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The driver to use for extracting data from the file
     */
    @JsonProperty("driver")
    public Driver getDriver() {
        return driver;
    }

    /**
     * @return The options to use for extracting data from the file
     */
    @JsonProperty("options")
    public Optional<Map<String, Object>> getOptions() {
        return options;
    }

    /**
     * @return The row number of the header row detected at extraction time
     */
    @JsonProperty("detectedHeaderRow")
    public Optional<Integer> getDetectedHeaderRow() {
        return detectedHeaderRow;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileJobConfig && equalTo((FileJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileJobConfig other) {
        return driver.equals(other.driver)
                && options.equals(other.options)
                && detectedHeaderRow.equals(other.detectedHeaderRow);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.driver, this.options, this.detectedHeaderRow);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DriverStage builder() {
        return new Builder();
    }

    public interface DriverStage {
        _FinalStage driver(Driver driver);

        Builder from(FileJobConfig other);
    }

    public interface _FinalStage {
        FileJobConfig build();

        _FinalStage options(Optional<Map<String, Object>> options);

        _FinalStage options(Map<String, Object> options);

        _FinalStage detectedHeaderRow(Optional<Integer> detectedHeaderRow);

        _FinalStage detectedHeaderRow(Integer detectedHeaderRow);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DriverStage, _FinalStage {
        private Driver driver;

        private Optional<Integer> detectedHeaderRow = Optional.empty();

        private Optional<Map<String, Object>> options = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FileJobConfig other) {
            driver(other.getDriver());
            options(other.getOptions());
            detectedHeaderRow(other.getDetectedHeaderRow());
            return this;
        }

        /**
         * <p>The driver to use for extracting data from the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("driver")
        public _FinalStage driver(Driver driver) {
            this.driver = driver;
            return this;
        }

        /**
         * <p>The row number of the header row detected at extraction time</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage detectedHeaderRow(Integer detectedHeaderRow) {
            this.detectedHeaderRow = Optional.of(detectedHeaderRow);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "detectedHeaderRow", nulls = Nulls.SKIP)
        public _FinalStage detectedHeaderRow(Optional<Integer> detectedHeaderRow) {
            this.detectedHeaderRow = detectedHeaderRow;
            return this;
        }

        /**
         * <p>The options to use for extracting data from the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage options(Map<String, Object> options) {
            this.options = Optional.of(options);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<Map<String, Object>> options) {
            this.options = options;
            return this;
        }

        @java.lang.Override
        public FileJobConfig build() {
            return new FileJobConfig(driver, options, detectedHeaderRow, additionalProperties);
        }
    }
}
