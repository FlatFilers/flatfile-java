/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.DataClipId;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AddRecordsToDataClipJobConfig.Builder.class)
public final class AddRecordsToDataClipJobConfig {
    private final DataClipId dataClipId;

    private final SheetId sheetId;

    private final Map<String, Object> additionalProperties;

    private AddRecordsToDataClipJobConfig(
            DataClipId dataClipId, SheetId sheetId, Map<String, Object> additionalProperties) {
        this.dataClipId = dataClipId;
        this.sheetId = sheetId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("dataClipId")
    public DataClipId getDataClipId() {
        return dataClipId;
    }

    @JsonProperty("sheetId")
    public SheetId getSheetId() {
        return sheetId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AddRecordsToDataClipJobConfig && equalTo((AddRecordsToDataClipJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AddRecordsToDataClipJobConfig other) {
        return dataClipId.equals(other.dataClipId) && sheetId.equals(other.sheetId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.dataClipId, this.sheetId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DataClipIdStage builder() {
        return new Builder();
    }

    public interface DataClipIdStage {
        SheetIdStage dataClipId(@NotNull DataClipId dataClipId);

        Builder from(AddRecordsToDataClipJobConfig other);
    }

    public interface SheetIdStage {
        _FinalStage sheetId(@NotNull SheetId sheetId);
    }

    public interface _FinalStage {
        AddRecordsToDataClipJobConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DataClipIdStage, SheetIdStage, _FinalStage {
        private DataClipId dataClipId;

        private SheetId sheetId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AddRecordsToDataClipJobConfig other) {
            dataClipId(other.getDataClipId());
            sheetId(other.getSheetId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("dataClipId")
        public SheetIdStage dataClipId(@NotNull DataClipId dataClipId) {
            this.dataClipId = Objects.requireNonNull(dataClipId, "dataClipId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("sheetId")
        public _FinalStage sheetId(@NotNull SheetId sheetId) {
            this.sheetId = Objects.requireNonNull(sheetId, "sheetId must not be null");
            return this;
        }

        @java.lang.Override
        public AddRecordsToDataClipJobConfig build() {
            return new AddRecordsToDataClipJobConfig(dataClipId, sheetId, additionalProperties);
        }
    }
}
