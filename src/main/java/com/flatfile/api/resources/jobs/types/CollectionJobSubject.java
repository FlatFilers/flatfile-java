/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CollectionJobSubject.Builder.class)
public final class CollectionJobSubject {
    private final String resource;

    private final Optional<Map<String, Object>> params;

    private final Optional<Map<String, Object>> query;

    private final Map<String, Object> additionalProperties;

    private CollectionJobSubject(
            String resource,
            Optional<Map<String, Object>> params,
            Optional<Map<String, Object>> query,
            Map<String, Object> additionalProperties) {
        this.resource = resource;
        this.params = params;
        this.query = query;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("resource")
    public String getResource() {
        return resource;
    }

    @JsonProperty("params")
    public Optional<Map<String, Object>> getParams() {
        return params;
    }

    @JsonProperty("query")
    public Optional<Map<String, Object>> getQuery() {
        return query;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CollectionJobSubject && equalTo((CollectionJobSubject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CollectionJobSubject other) {
        return resource.equals(other.resource) && params.equals(other.params) && query.equals(other.query);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.resource, this.params, this.query);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ResourceStage builder() {
        return new Builder();
    }

    public interface ResourceStage {
        _FinalStage resource(String resource);

        Builder from(CollectionJobSubject other);
    }

    public interface _FinalStage {
        CollectionJobSubject build();

        _FinalStage params(Optional<Map<String, Object>> params);

        _FinalStage params(Map<String, Object> params);

        _FinalStage query(Optional<Map<String, Object>> query);

        _FinalStage query(Map<String, Object> query);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ResourceStage, _FinalStage {
        private String resource;

        private Optional<Map<String, Object>> query = Optional.empty();

        private Optional<Map<String, Object>> params = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CollectionJobSubject other) {
            resource(other.getResource());
            params(other.getParams());
            query(other.getQuery());
            return this;
        }

        @java.lang.Override
        @JsonSetter("resource")
        public _FinalStage resource(String resource) {
            this.resource = resource;
            return this;
        }

        @java.lang.Override
        public _FinalStage query(Map<String, Object> query) {
            this.query = Optional.of(query);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public _FinalStage query(Optional<Map<String, Object>> query) {
            this.query = query;
            return this;
        }

        @java.lang.Override
        public _FinalStage params(Map<String, Object> params) {
            this.params = Optional.of(params);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "params", nulls = Nulls.SKIP)
        public _FinalStage params(Optional<Map<String, Object>> params) {
            this.params = params;
            return this;
        }

        @java.lang.Override
        public CollectionJobSubject build() {
            return new CollectionJobSubject(resource, params, query, additionalProperties);
        }
    }
}
