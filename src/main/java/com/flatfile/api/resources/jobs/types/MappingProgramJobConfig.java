/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.jobs.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MappingProgramJobConfig.Builder.class)
public final class MappingProgramJobConfig {
    private final SheetId sourceSheetId;

    private final SheetId destinationSheetId;

    private final List<Map<String, Object>> mappingRules;

    private final Map<String, Object> additionalProperties;

    private MappingProgramJobConfig(
            SheetId sourceSheetId,
            SheetId destinationSheetId,
            List<Map<String, Object>> mappingRules,
            Map<String, Object> additionalProperties) {
        this.sourceSheetId = sourceSheetId;
        this.destinationSheetId = destinationSheetId;
        this.mappingRules = mappingRules;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sourceSheetId")
    public SheetId getSourceSheetId() {
        return sourceSheetId;
    }

    @JsonProperty("destinationSheetId")
    public SheetId getDestinationSheetId() {
        return destinationSheetId;
    }

    @JsonProperty("mappingRules")
    public List<Map<String, Object>> getMappingRules() {
        return mappingRules;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MappingProgramJobConfig && equalTo((MappingProgramJobConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MappingProgramJobConfig other) {
        return sourceSheetId.equals(other.sourceSheetId)
                && destinationSheetId.equals(other.destinationSheetId)
                && mappingRules.equals(other.mappingRules);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sourceSheetId, this.destinationSheetId, this.mappingRules);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourceSheetIdStage builder() {
        return new Builder();
    }

    public interface SourceSheetIdStage {
        DestinationSheetIdStage sourceSheetId(@NotNull SheetId sourceSheetId);

        Builder from(MappingProgramJobConfig other);
    }

    public interface DestinationSheetIdStage {
        _FinalStage destinationSheetId(@NotNull SheetId destinationSheetId);
    }

    public interface _FinalStage {
        MappingProgramJobConfig build();

        _FinalStage mappingRules(List<Map<String, Object>> mappingRules);

        _FinalStage addMappingRules(Map<String, Object> mappingRules);

        _FinalStage addAllMappingRules(List<Map<String, Object>> mappingRules);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SourceSheetIdStage, DestinationSheetIdStage, _FinalStage {
        private SheetId sourceSheetId;

        private SheetId destinationSheetId;

        private List<Map<String, Object>> mappingRules = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MappingProgramJobConfig other) {
            sourceSheetId(other.getSourceSheetId());
            destinationSheetId(other.getDestinationSheetId());
            mappingRules(other.getMappingRules());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sourceSheetId")
        public DestinationSheetIdStage sourceSheetId(@NotNull SheetId sourceSheetId) {
            this.sourceSheetId = Objects.requireNonNull(sourceSheetId, "sourceSheetId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("destinationSheetId")
        public _FinalStage destinationSheetId(@NotNull SheetId destinationSheetId) {
            this.destinationSheetId = Objects.requireNonNull(destinationSheetId, "destinationSheetId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllMappingRules(List<Map<String, Object>> mappingRules) {
            this.mappingRules.addAll(mappingRules);
            return this;
        }

        @java.lang.Override
        public _FinalStage addMappingRules(Map<String, Object> mappingRules) {
            this.mappingRules.add(mappingRules);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "mappingRules", nulls = Nulls.SKIP)
        public _FinalStage mappingRules(List<Map<String, Object>> mappingRules) {
            this.mappingRules.clear();
            this.mappingRules.addAll(mappingRules);
            return this;
        }

        @java.lang.Override
        public MappingProgramJobConfig build() {
            return new MappingProgramJobConfig(sourceSheetId, destinationSheetId, mappingRules, additionalProperties);
        }
    }
}
