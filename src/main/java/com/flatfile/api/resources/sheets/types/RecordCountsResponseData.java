/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.sheets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.ISuccess;
import com.flatfile.api.resources.commons.types.SuccessData;
import com.flatfile.api.resources.records.types.RecordCounts;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RecordCountsResponseData.Builder.class)
public final class RecordCountsResponseData implements ISuccess {
    private final Optional<SuccessData> data;

    private final RecordCounts counts;

    private final Map<String, Object> additionalProperties;

    private RecordCountsResponseData(
            Optional<SuccessData> data, RecordCounts counts, Map<String, Object> additionalProperties) {
        this.data = data;
        this.counts = counts;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    @Override
    public Optional<SuccessData> getData() {
        return data;
    }

    @JsonProperty("counts")
    public RecordCounts getCounts() {
        return counts;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RecordCountsResponseData && equalTo((RecordCountsResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RecordCountsResponseData other) {
        return data.equals(other.data) && counts.equals(other.counts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.data, this.counts);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CountsStage builder() {
        return new Builder();
    }

    public interface CountsStage {
        _FinalStage counts(RecordCounts counts);

        Builder from(RecordCountsResponseData other);
    }

    public interface _FinalStage {
        RecordCountsResponseData build();

        _FinalStage data(Optional<SuccessData> data);

        _FinalStage data(SuccessData data);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CountsStage, _FinalStage {
        private RecordCounts counts;

        private Optional<SuccessData> data = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(RecordCountsResponseData other) {
            data(other.getData());
            counts(other.getCounts());
            return this;
        }

        @Override
        @JsonSetter("counts")
        public _FinalStage counts(RecordCounts counts) {
            this.counts = counts;
            return this;
        }

        @Override
        public _FinalStage data(SuccessData data) {
            this.data = Optional.of(data);
            return this;
        }

        @Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(Optional<SuccessData> data) {
            this.data = data;
            return this;
        }

        @Override
        public RecordCountsResponseData build() {
            return new RecordCountsResponseData(data, counts, additionalProperties);
        }
    }
}
