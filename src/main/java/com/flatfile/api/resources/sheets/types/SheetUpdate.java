/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.sheets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SheetId;
import com.flatfile.api.resources.commons.types.WorkbookId;
import com.flatfile.api.resources.records.types.RecordCounts;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SheetUpdate.Builder.class)
public final class SheetUpdate implements ISheetUpdate {
    private final Optional<SheetId> id;

    private final Optional<WorkbookId> workbookId;

    private final Optional<SheetConfig> config;

    private final Optional<RecordCounts> countRecords;

    private final Optional<String> namespace;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<OffsetDateTime> createdAt;

    private final Map<String, Object> additionalProperties;

    private SheetUpdate(
            Optional<SheetId> id,
            Optional<WorkbookId> workbookId,
            Optional<SheetConfig> config,
            Optional<RecordCounts> countRecords,
            Optional<String> namespace,
            Optional<OffsetDateTime> updatedAt,
            Optional<OffsetDateTime> createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.workbookId = workbookId;
        this.config = config;
        this.countRecords = countRecords;
        this.namespace = namespace;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the Sheet.
     */
    @JsonProperty("id")
    @Override
    public Optional<SheetId> getId() {
        return id;
    }

    /**
     * @return The ID of the Workbook.
     */
    @JsonProperty("workbookId")
    @Override
    public Optional<WorkbookId> getWorkbookId() {
        return workbookId;
    }

    /**
     * @return Describes shape of data as well as behavior.
     */
    @JsonProperty("config")
    @Override
    public Optional<SheetConfig> getConfig() {
        return config;
    }

    /**
     * @return The amount of records in the Sheet.
     */
    @JsonProperty("countRecords")
    @Override
    public Optional<RecordCounts> getCountRecords() {
        return countRecords;
    }

    /**
     * @return The scoped namespace of the Sheet.
     */
    @JsonProperty("namespace")
    @Override
    public Optional<String> getNamespace() {
        return namespace;
    }

    /**
     * @return Date the sheet was last updated
     */
    @JsonProperty("updatedAt")
    @Override
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Date the sheet was created
     */
    @JsonProperty("createdAt")
    @Override
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SheetUpdate && equalTo((SheetUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SheetUpdate other) {
        return id.equals(other.id)
                && workbookId.equals(other.workbookId)
                && config.equals(other.config)
                && countRecords.equals(other.countRecords)
                && namespace.equals(other.namespace)
                && updatedAt.equals(other.updatedAt)
                && createdAt.equals(other.createdAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.workbookId,
                this.config,
                this.countRecords,
                this.namespace,
                this.updatedAt,
                this.createdAt);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SheetId> id = Optional.empty();

        private Optional<WorkbookId> workbookId = Optional.empty();

        private Optional<SheetConfig> config = Optional.empty();

        private Optional<RecordCounts> countRecords = Optional.empty();

        private Optional<String> namespace = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SheetUpdate other) {
            id(other.getId());
            workbookId(other.getWorkbookId());
            config(other.getConfig());
            countRecords(other.getCountRecords());
            namespace(other.getNamespace());
            updatedAt(other.getUpdatedAt());
            createdAt(other.getCreatedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<SheetId> id) {
            this.id = id;
            return this;
        }

        public Builder id(SheetId id) {
            this.id = Optional.of(id);
            return this;
        }

        @JsonSetter(value = "workbookId", nulls = Nulls.SKIP)
        public Builder workbookId(Optional<WorkbookId> workbookId) {
            this.workbookId = workbookId;
            return this;
        }

        public Builder workbookId(WorkbookId workbookId) {
            this.workbookId = Optional.of(workbookId);
            return this;
        }

        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public Builder config(Optional<SheetConfig> config) {
            this.config = config;
            return this;
        }

        public Builder config(SheetConfig config) {
            this.config = Optional.of(config);
            return this;
        }

        @JsonSetter(value = "countRecords", nulls = Nulls.SKIP)
        public Builder countRecords(Optional<RecordCounts> countRecords) {
            this.countRecords = countRecords;
            return this;
        }

        public Builder countRecords(RecordCounts countRecords) {
            this.countRecords = Optional.of(countRecords);
            return this;
        }

        @JsonSetter(value = "namespace", nulls = Nulls.SKIP)
        public Builder namespace(Optional<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Optional.of(namespace);
            return this;
        }

        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.of(updatedAt);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.of(createdAt);
            return this;
        }

        public SheetUpdate build() {
            return new SheetUpdate(
                    id, workbookId, config, countRecords, namespace, updatedAt, createdAt, additionalProperties);
        }
    }
}
