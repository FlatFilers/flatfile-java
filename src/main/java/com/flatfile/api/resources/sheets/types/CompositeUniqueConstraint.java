/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.sheets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CompositeUniqueConstraint.Builder.class)
public final class CompositeUniqueConstraint {
    private final String name;

    private final List<String> fields;

    private final Optional<List<String>> requiredFields;

    private final CompositeUniqueConstraintStrategy strategy;

    private final Map<String, Object> additionalProperties;

    private CompositeUniqueConstraint(
            String name,
            List<String> fields,
            Optional<List<String>> requiredFields,
            CompositeUniqueConstraintStrategy strategy,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.fields = fields;
        this.requiredFields = requiredFields;
        this.strategy = strategy;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the constraint
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The fields that must be unique together
     */
    @JsonProperty("fields")
    public List<String> getFields() {
        return fields;
    }

    /**
     * @return Fields that, when empty, will cause this unique constraint to be ignored
     */
    @JsonProperty("requiredFields")
    public Optional<List<String>> getRequiredFields() {
        return requiredFields;
    }

    @JsonProperty("strategy")
    public CompositeUniqueConstraintStrategy getStrategy() {
        return strategy;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompositeUniqueConstraint && equalTo((CompositeUniqueConstraint) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompositeUniqueConstraint other) {
        return name.equals(other.name)
                && fields.equals(other.fields)
                && requiredFields.equals(other.requiredFields)
                && strategy.equals(other.strategy);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.fields, this.requiredFields, this.strategy);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        StrategyStage name(String name);

        Builder from(CompositeUniqueConstraint other);
    }

    public interface StrategyStage {
        _FinalStage strategy(CompositeUniqueConstraintStrategy strategy);
    }

    public interface _FinalStage {
        CompositeUniqueConstraint build();

        _FinalStage fields(List<String> fields);

        _FinalStage addFields(String fields);

        _FinalStage addAllFields(List<String> fields);

        _FinalStage requiredFields(Optional<List<String>> requiredFields);

        _FinalStage requiredFields(List<String> requiredFields);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, StrategyStage, _FinalStage {
        private String name;

        private CompositeUniqueConstraintStrategy strategy;

        private Optional<List<String>> requiredFields = Optional.empty();

        private List<String> fields = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CompositeUniqueConstraint other) {
            name(other.getName());
            fields(other.getFields());
            requiredFields(other.getRequiredFields());
            strategy(other.getStrategy());
            return this;
        }

        /**
         * <p>The name of the constraint</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public StrategyStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("strategy")
        public _FinalStage strategy(CompositeUniqueConstraintStrategy strategy) {
            this.strategy = strategy;
            return this;
        }

        /**
         * <p>Fields that, when empty, will cause this unique constraint to be ignored</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requiredFields(List<String> requiredFields) {
            this.requiredFields = Optional.of(requiredFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "requiredFields", nulls = Nulls.SKIP)
        public _FinalStage requiredFields(Optional<List<String>> requiredFields) {
            this.requiredFields = requiredFields;
            return this;
        }

        /**
         * <p>The fields that must be unique together</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllFields(List<String> fields) {
            this.fields.addAll(fields);
            return this;
        }

        /**
         * <p>The fields that must be unique together</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addFields(String fields) {
            this.fields.add(fields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public _FinalStage fields(List<String> fields) {
            this.fields.clear();
            this.fields.addAll(fields);
            return this;
        }

        @java.lang.Override
        public CompositeUniqueConstraint build() {
            return new CompositeUniqueConstraint(name, fields, requiredFields, strategy, additionalProperties);
        }
    }
}
