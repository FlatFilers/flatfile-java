/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.sheets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Action;
import com.flatfile.api.resources.property.types.Property;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SheetConfig.Builder.class)
public final class SheetConfig {
    private final String name;

    private final Optional<String> description;

    private final Optional<String> slug;

    private final Optional<Boolean> readonly;

    private final Optional<Boolean> allowAdditionalFields;

    private final Optional<Double> mappingConfidenceThreshold;

    private final Optional<List<SheetAccess>> access;

    private final List<Property> fields;

    private final Optional<List<Action>> actions;

    private final Map<String, Object> additionalProperties;

    private SheetConfig(
            String name,
            Optional<String> description,
            Optional<String> slug,
            Optional<Boolean> readonly,
            Optional<Boolean> allowAdditionalFields,
            Optional<Double> mappingConfidenceThreshold,
            Optional<List<SheetAccess>> access,
            List<Property> fields,
            Optional<List<Action>> actions,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.slug = slug;
        this.readonly = readonly;
        this.allowAdditionalFields = allowAdditionalFields;
        this.mappingConfidenceThreshold = mappingConfidenceThreshold;
        this.access = access;
        this.fields = fields;
        this.actions = actions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of your Sheet as it will appear to your end users.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return A sentence or two describing the purpose of your Sheet.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return A unique identifier for your Sheet.
     */
    @JsonProperty("slug")
    public Optional<String> getSlug() {
        return slug;
    }

    /**
     * @return A boolean specifying whether or not this sheet is read only. Read only sheets are not editable by end users.
     */
    @JsonProperty("readonly")
    public Optional<Boolean> getReadonly() {
        return readonly;
    }

    /**
     * @return Allow end users to add fields during mapping.
     */
    @JsonProperty("allowAdditionalFields")
    public Optional<Boolean> getAllowAdditionalFields() {
        return allowAdditionalFields;
    }

    /**
     * @return The minimum confidence required to automatically map a field
     */
    @JsonProperty("mappingConfidenceThreshold")
    public Optional<Double> getMappingConfidenceThreshold() {
        return mappingConfidenceThreshold;
    }

    /**
     * @return Control Sheet-level access for all users.
     */
    @JsonProperty("access")
    public Optional<List<SheetAccess>> getAccess() {
        return access;
    }

    /**
     * @return Where you define your Sheet’s data schema.
     */
    @JsonProperty("fields")
    public List<Property> getFields() {
        return fields;
    }

    /**
     * @return An array of actions that end users can perform on this Sheet.
     */
    @JsonProperty("actions")
    public Optional<List<Action>> getActions() {
        return actions;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SheetConfig && equalTo((SheetConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SheetConfig other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && slug.equals(other.slug)
                && readonly.equals(other.readonly)
                && allowAdditionalFields.equals(other.allowAdditionalFields)
                && mappingConfidenceThreshold.equals(other.mappingConfidenceThreshold)
                && access.equals(other.access)
                && fields.equals(other.fields)
                && actions.equals(other.actions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.description,
                this.slug,
                this.readonly,
                this.allowAdditionalFields,
                this.mappingConfidenceThreshold,
                this.access,
                this.fields,
                this.actions);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(String name);

        Builder from(SheetConfig other);
    }

    public interface _FinalStage {
        SheetConfig build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage slug(Optional<String> slug);

        _FinalStage slug(String slug);

        _FinalStage readonly(Optional<Boolean> readonly);

        _FinalStage readonly(Boolean readonly);

        _FinalStage allowAdditionalFields(Optional<Boolean> allowAdditionalFields);

        _FinalStage allowAdditionalFields(Boolean allowAdditionalFields);

        _FinalStage mappingConfidenceThreshold(Optional<Double> mappingConfidenceThreshold);

        _FinalStage mappingConfidenceThreshold(Double mappingConfidenceThreshold);

        _FinalStage access(Optional<List<SheetAccess>> access);

        _FinalStage access(List<SheetAccess> access);

        _FinalStage fields(List<Property> fields);

        _FinalStage addFields(Property fields);

        _FinalStage addAllFields(List<Property> fields);

        _FinalStage actions(Optional<List<Action>> actions);

        _FinalStage actions(List<Action> actions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<List<Action>> actions = Optional.empty();

        private List<Property> fields = new ArrayList<>();

        private Optional<List<SheetAccess>> access = Optional.empty();

        private Optional<Double> mappingConfidenceThreshold = Optional.empty();

        private Optional<Boolean> allowAdditionalFields = Optional.empty();

        private Optional<Boolean> readonly = Optional.empty();

        private Optional<String> slug = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SheetConfig other) {
            name(other.getName());
            description(other.getDescription());
            slug(other.getSlug());
            readonly(other.getReadonly());
            allowAdditionalFields(other.getAllowAdditionalFields());
            mappingConfidenceThreshold(other.getMappingConfidenceThreshold());
            access(other.getAccess());
            fields(other.getFields());
            actions(other.getActions());
            return this;
        }

        /**
         * <p>The name of your Sheet as it will appear to your end users.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("name")
        public _FinalStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * <p>An array of actions that end users can perform on this Sheet.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage actions(List<Action> actions) {
            this.actions = Optional.of(actions);
            return this;
        }

        @Override
        @JsonSetter(value = "actions", nulls = Nulls.SKIP)
        public _FinalStage actions(Optional<List<Action>> actions) {
            this.actions = actions;
            return this;
        }

        /**
         * <p>Where you define your Sheet’s data schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage addAllFields(List<Property> fields) {
            this.fields.addAll(fields);
            return this;
        }

        /**
         * <p>Where you define your Sheet’s data schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage addFields(Property fields) {
            this.fields.add(fields);
            return this;
        }

        @Override
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public _FinalStage fields(List<Property> fields) {
            this.fields.clear();
            this.fields.addAll(fields);
            return this;
        }

        /**
         * <p>Control Sheet-level access for all users.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage access(List<SheetAccess> access) {
            this.access = Optional.of(access);
            return this;
        }

        @Override
        @JsonSetter(value = "access", nulls = Nulls.SKIP)
        public _FinalStage access(Optional<List<SheetAccess>> access) {
            this.access = access;
            return this;
        }

        /**
         * <p>The minimum confidence required to automatically map a field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage mappingConfidenceThreshold(Double mappingConfidenceThreshold) {
            this.mappingConfidenceThreshold = Optional.of(mappingConfidenceThreshold);
            return this;
        }

        @Override
        @JsonSetter(value = "mappingConfidenceThreshold", nulls = Nulls.SKIP)
        public _FinalStage mappingConfidenceThreshold(Optional<Double> mappingConfidenceThreshold) {
            this.mappingConfidenceThreshold = mappingConfidenceThreshold;
            return this;
        }

        /**
         * <p>Allow end users to add fields during mapping.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage allowAdditionalFields(Boolean allowAdditionalFields) {
            this.allowAdditionalFields = Optional.of(allowAdditionalFields);
            return this;
        }

        @Override
        @JsonSetter(value = "allowAdditionalFields", nulls = Nulls.SKIP)
        public _FinalStage allowAdditionalFields(Optional<Boolean> allowAdditionalFields) {
            this.allowAdditionalFields = allowAdditionalFields;
            return this;
        }

        /**
         * <p>A boolean specifying whether or not this sheet is read only. Read only sheets are not editable by end users.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage readonly(Boolean readonly) {
            this.readonly = Optional.of(readonly);
            return this;
        }

        @Override
        @JsonSetter(value = "readonly", nulls = Nulls.SKIP)
        public _FinalStage readonly(Optional<Boolean> readonly) {
            this.readonly = readonly;
            return this;
        }

        /**
         * <p>A unique identifier for your Sheet.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage slug(String slug) {
            this.slug = Optional.of(slug);
            return this;
        }

        @Override
        @JsonSetter(value = "slug", nulls = Nulls.SKIP)
        public _FinalStage slug(Optional<String> slug) {
            this.slug = slug;
            return this;
        }

        /**
         * <p>A sentence or two describing the purpose of your Sheet.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage description(String description) {
            this.description = Optional.of(description);
            return this;
        }

        @Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @Override
        public SheetConfig build() {
            return new SheetConfig(
                    name,
                    description,
                    slug,
                    readonly,
                    allowAdditionalFields,
                    mappingConfidenceThreshold,
                    access,
                    fields,
                    actions,
                    additionalProperties);
        }
    }
}
