/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.sheets.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.CommitId;
import com.flatfile.api.resources.commons.types.Filter;
import com.flatfile.api.resources.commons.types.FilterField;
import com.flatfile.api.resources.commons.types.SearchField;
import com.flatfile.api.resources.commons.types.SearchValue;
import com.flatfile.api.resources.commons.types.VersionId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetRecordCountsRequest.Builder.class)
public final class GetRecordCountsRequest {
    private final Optional<String> versionId;

    private final Optional<VersionId> sinceVersionId;

    private final Optional<CommitId> commitId;

    private final Optional<CommitId> sinceCommitId;

    private final Optional<Filter> filter;

    private final Optional<FilterField> filterField;

    private final Optional<SearchValue> searchValue;

    private final Optional<SearchField> searchField;

    private final Optional<Boolean> byField;

    private final Optional<String> q;

    private final Map<String, Object> additionalProperties;

    private GetRecordCountsRequest(
            Optional<String> versionId,
            Optional<VersionId> sinceVersionId,
            Optional<CommitId> commitId,
            Optional<CommitId> sinceCommitId,
            Optional<Filter> filter,
            Optional<FilterField> filterField,
            Optional<SearchValue> searchValue,
            Optional<SearchField> searchField,
            Optional<Boolean> byField,
            Optional<String> q,
            Map<String, Object> additionalProperties) {
        this.versionId = versionId;
        this.sinceVersionId = sinceVersionId;
        this.commitId = commitId;
        this.sinceCommitId = sinceCommitId;
        this.filter = filter;
        this.filterField = filterField;
        this.searchValue = searchValue;
        this.searchField = searchField;
        this.byField = byField;
        this.q = q;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <p>records that were changed in that version and only those records.</p>
     */
    @JsonProperty("versionId")
    public Optional<String> getVersionId() {
        return versionId;
    }

    /**
     * @return Deprecated, use <code>sinceCommitId</code> instead.
     */
    @JsonProperty("sinceVersionId")
    public Optional<VersionId> getSinceVersionId() {
        return sinceVersionId;
    }

    /**
     * @return <p>records that were changed in that version in addition to any records from versions after that version.</p>
     */
    @JsonProperty("commitId")
    public Optional<CommitId> getCommitId() {
        return commitId;
    }

    /**
     * @return Listing a commit ID here will return all records since the specified commit.
     */
    @JsonProperty("sinceCommitId")
    public Optional<CommitId> getSinceCommitId() {
        return sinceCommitId;
    }

    /**
     * @return Options to filter records
     */
    @JsonProperty("filter")
    public Optional<Filter> getFilter() {
        return filter;
    }

    /**
     * @return The field to filter the data on.
     */
    @JsonProperty("filterField")
    public Optional<FilterField> getFilterField() {
        return filterField;
    }

    /**
     * @return The value to search for data on.
     */
    @JsonProperty("searchValue")
    public Optional<SearchValue> getSearchValue() {
        return searchValue;
    }

    /**
     * @return The field to search for data on.
     */
    @JsonProperty("searchField")
    public Optional<SearchField> getSearchField() {
        return searchField;
    }

    /**
     * @return If true, the counts for each field will also be returned
     */
    @JsonProperty("byField")
    public Optional<Boolean> getByField() {
        return byField;
    }

    /**
     * @return An FFQL query used to filter the result set to be counted
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetRecordCountsRequest && equalTo((GetRecordCountsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetRecordCountsRequest other) {
        return versionId.equals(other.versionId)
                && sinceVersionId.equals(other.sinceVersionId)
                && commitId.equals(other.commitId)
                && sinceCommitId.equals(other.sinceCommitId)
                && filter.equals(other.filter)
                && filterField.equals(other.filterField)
                && searchValue.equals(other.searchValue)
                && searchField.equals(other.searchField)
                && byField.equals(other.byField)
                && q.equals(other.q);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.versionId,
                this.sinceVersionId,
                this.commitId,
                this.sinceCommitId,
                this.filter,
                this.filterField,
                this.searchValue,
                this.searchField,
                this.byField,
                this.q);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> versionId = Optional.empty();

        private Optional<VersionId> sinceVersionId = Optional.empty();

        private Optional<CommitId> commitId = Optional.empty();

        private Optional<CommitId> sinceCommitId = Optional.empty();

        private Optional<Filter> filter = Optional.empty();

        private Optional<FilterField> filterField = Optional.empty();

        private Optional<SearchValue> searchValue = Optional.empty();

        private Optional<SearchField> searchField = Optional.empty();

        private Optional<Boolean> byField = Optional.empty();

        private Optional<String> q = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetRecordCountsRequest other) {
            versionId(other.getVersionId());
            sinceVersionId(other.getSinceVersionId());
            commitId(other.getCommitId());
            sinceCommitId(other.getSinceCommitId());
            filter(other.getFilter());
            filterField(other.getFilterField());
            searchValue(other.getSearchValue());
            searchField(other.getSearchField());
            byField(other.getByField());
            q(other.getQ());
            return this;
        }

        @JsonSetter(value = "versionId", nulls = Nulls.SKIP)
        public Builder versionId(Optional<String> versionId) {
            this.versionId = versionId;
            return this;
        }

        public Builder versionId(String versionId) {
            this.versionId = Optional.ofNullable(versionId);
            return this;
        }

        @JsonSetter(value = "sinceVersionId", nulls = Nulls.SKIP)
        public Builder sinceVersionId(Optional<VersionId> sinceVersionId) {
            this.sinceVersionId = sinceVersionId;
            return this;
        }

        public Builder sinceVersionId(VersionId sinceVersionId) {
            this.sinceVersionId = Optional.ofNullable(sinceVersionId);
            return this;
        }

        @JsonSetter(value = "commitId", nulls = Nulls.SKIP)
        public Builder commitId(Optional<CommitId> commitId) {
            this.commitId = commitId;
            return this;
        }

        public Builder commitId(CommitId commitId) {
            this.commitId = Optional.ofNullable(commitId);
            return this;
        }

        @JsonSetter(value = "sinceCommitId", nulls = Nulls.SKIP)
        public Builder sinceCommitId(Optional<CommitId> sinceCommitId) {
            this.sinceCommitId = sinceCommitId;
            return this;
        }

        public Builder sinceCommitId(CommitId sinceCommitId) {
            this.sinceCommitId = Optional.ofNullable(sinceCommitId);
            return this;
        }

        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public Builder filter(Optional<Filter> filter) {
            this.filter = filter;
            return this;
        }

        public Builder filter(Filter filter) {
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        @JsonSetter(value = "filterField", nulls = Nulls.SKIP)
        public Builder filterField(Optional<FilterField> filterField) {
            this.filterField = filterField;
            return this;
        }

        public Builder filterField(FilterField filterField) {
            this.filterField = Optional.ofNullable(filterField);
            return this;
        }

        @JsonSetter(value = "searchValue", nulls = Nulls.SKIP)
        public Builder searchValue(Optional<SearchValue> searchValue) {
            this.searchValue = searchValue;
            return this;
        }

        public Builder searchValue(SearchValue searchValue) {
            this.searchValue = Optional.ofNullable(searchValue);
            return this;
        }

        @JsonSetter(value = "searchField", nulls = Nulls.SKIP)
        public Builder searchField(Optional<SearchField> searchField) {
            this.searchField = searchField;
            return this;
        }

        public Builder searchField(SearchField searchField) {
            this.searchField = Optional.ofNullable(searchField);
            return this;
        }

        @JsonSetter(value = "byField", nulls = Nulls.SKIP)
        public Builder byField(Optional<Boolean> byField) {
            this.byField = byField;
            return this;
        }

        public Builder byField(Boolean byField) {
            this.byField = Optional.ofNullable(byField);
            return this;
        }

        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public Builder q(Optional<String> q) {
            this.q = q;
            return this;
        }

        public Builder q(String q) {
            this.q = Optional.ofNullable(q);
            return this;
        }

        public GetRecordCountsRequest build() {
            return new GetRecordCountsRequest(
                    versionId,
                    sinceVersionId,
                    commitId,
                    sinceCommitId,
                    filter,
                    filterField,
                    searchValue,
                    searchField,
                    byField,
                    q,
                    additionalProperties);
        }
    }
}
