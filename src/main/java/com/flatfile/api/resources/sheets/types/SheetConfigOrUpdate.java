/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.sheets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Action;
import com.flatfile.api.resources.commons.types.SheetId;
import com.flatfile.api.resources.commons.types.WorkbookId;
import com.flatfile.api.resources.property.types.Property;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SheetConfigOrUpdate.Builder.class)
public final class SheetConfigOrUpdate implements ISheetConfigUpdate, ISheetUpdate {
    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<String> slug;

    private final Optional<Boolean> readonly;

    private final Optional<Boolean> allowAdditionalFields;

    private final Optional<Double> mappingConfidenceThreshold;

    private final Optional<List<SheetAccess>> access;

    private final Optional<List<Property>> fields;

    private final Optional<List<Action>> actions;

    private final Optional<SheetId> id;

    private final Optional<WorkbookId> workbookId;

    private final Optional<SheetConfig> config;

    private final Optional<String> namespace;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<OffsetDateTime> createdAt;

    private final Map<String, Object> additionalProperties;

    private SheetConfigOrUpdate(
            Optional<String> name,
            Optional<String> description,
            Optional<String> slug,
            Optional<Boolean> readonly,
            Optional<Boolean> allowAdditionalFields,
            Optional<Double> mappingConfidenceThreshold,
            Optional<List<SheetAccess>> access,
            Optional<List<Property>> fields,
            Optional<List<Action>> actions,
            Optional<SheetId> id,
            Optional<WorkbookId> workbookId,
            Optional<SheetConfig> config,
            Optional<String> namespace,
            Optional<OffsetDateTime> updatedAt,
            Optional<OffsetDateTime> createdAt,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.slug = slug;
        this.readonly = readonly;
        this.allowAdditionalFields = allowAdditionalFields;
        this.mappingConfidenceThreshold = mappingConfidenceThreshold;
        this.access = access;
        this.fields = fields;
        this.actions = actions;
        this.id = id;
        this.workbookId = workbookId;
        this.config = config;
        this.namespace = namespace;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of your Sheet as it will appear to your end users.
     */
    @JsonProperty("name")
    @java.lang.Override
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return A sentence or two describing the purpose of your Sheet.
     */
    @JsonProperty("description")
    @java.lang.Override
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return A unique identifier for your Sheet. <strong>Required when updating a Workbook.</strong>
     */
    @JsonProperty("slug")
    @java.lang.Override
    public Optional<String> getSlug() {
        return slug;
    }

    /**
     * @return A boolean specifying whether or not this sheet is read only. Read only sheets are not editable by end users.
     */
    @JsonProperty("readonly")
    @java.lang.Override
    public Optional<Boolean> getReadonly() {
        return readonly;
    }

    /**
     * @return Allow end users to add fields during mapping.
     */
    @JsonProperty("allowAdditionalFields")
    @java.lang.Override
    public Optional<Boolean> getAllowAdditionalFields() {
        return allowAdditionalFields;
    }

    /**
     * @return The minimum confidence required to automatically map a field
     */
    @JsonProperty("mappingConfidenceThreshold")
    @java.lang.Override
    public Optional<Double> getMappingConfidenceThreshold() {
        return mappingConfidenceThreshold;
    }

    /**
     * @return Control Sheet-level access for all users.
     */
    @JsonProperty("access")
    @java.lang.Override
    public Optional<List<SheetAccess>> getAccess() {
        return access;
    }

    /**
     * @return Where you define your Sheetâ€™s data schema.
     */
    @JsonProperty("fields")
    @java.lang.Override
    public Optional<List<Property>> getFields() {
        return fields;
    }

    /**
     * @return An array of actions that end users can perform on this Sheet.
     */
    @JsonProperty("actions")
    @java.lang.Override
    public Optional<List<Action>> getActions() {
        return actions;
    }

    /**
     * @return The ID of the Sheet.
     */
    @JsonProperty("id")
    @java.lang.Override
    public Optional<SheetId> getId() {
        return id;
    }

    /**
     * @return The ID of the Workbook.
     */
    @JsonProperty("workbookId")
    @java.lang.Override
    public Optional<WorkbookId> getWorkbookId() {
        return workbookId;
    }

    /**
     * @return Describes shape of data as well as behavior.
     */
    @JsonProperty("config")
    @java.lang.Override
    public Optional<SheetConfig> getConfig() {
        return config;
    }

    /**
     * @return The scoped namespace of the Sheet.
     */
    @JsonProperty("namespace")
    @java.lang.Override
    public Optional<String> getNamespace() {
        return namespace;
    }

    /**
     * @return Date the sheet was last updated
     */
    @JsonProperty("updatedAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Date the sheet was created
     */
    @JsonProperty("createdAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SheetConfigOrUpdate && equalTo((SheetConfigOrUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SheetConfigOrUpdate other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && slug.equals(other.slug)
                && readonly.equals(other.readonly)
                && allowAdditionalFields.equals(other.allowAdditionalFields)
                && mappingConfidenceThreshold.equals(other.mappingConfidenceThreshold)
                && access.equals(other.access)
                && fields.equals(other.fields)
                && actions.equals(other.actions)
                && id.equals(other.id)
                && workbookId.equals(other.workbookId)
                && config.equals(other.config)
                && namespace.equals(other.namespace)
                && updatedAt.equals(other.updatedAt)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.description,
                this.slug,
                this.readonly,
                this.allowAdditionalFields,
                this.mappingConfidenceThreshold,
                this.access,
                this.fields,
                this.actions,
                this.id,
                this.workbookId,
                this.config,
                this.namespace,
                this.updatedAt,
                this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> slug = Optional.empty();

        private Optional<Boolean> readonly = Optional.empty();

        private Optional<Boolean> allowAdditionalFields = Optional.empty();

        private Optional<Double> mappingConfidenceThreshold = Optional.empty();

        private Optional<List<SheetAccess>> access = Optional.empty();

        private Optional<List<Property>> fields = Optional.empty();

        private Optional<List<Action>> actions = Optional.empty();

        private Optional<SheetId> id = Optional.empty();

        private Optional<WorkbookId> workbookId = Optional.empty();

        private Optional<SheetConfig> config = Optional.empty();

        private Optional<String> namespace = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SheetConfigOrUpdate other) {
            name(other.getName());
            description(other.getDescription());
            slug(other.getSlug());
            readonly(other.getReadonly());
            allowAdditionalFields(other.getAllowAdditionalFields());
            mappingConfidenceThreshold(other.getMappingConfidenceThreshold());
            access(other.getAccess());
            fields(other.getFields());
            actions(other.getActions());
            id(other.getId());
            workbookId(other.getWorkbookId());
            config(other.getConfig());
            namespace(other.getNamespace());
            updatedAt(other.getUpdatedAt());
            createdAt(other.getCreatedAt());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.of(description);
            return this;
        }

        @JsonSetter(value = "slug", nulls = Nulls.SKIP)
        public Builder slug(Optional<String> slug) {
            this.slug = slug;
            return this;
        }

        public Builder slug(String slug) {
            this.slug = Optional.of(slug);
            return this;
        }

        @JsonSetter(value = "readonly", nulls = Nulls.SKIP)
        public Builder readonly(Optional<Boolean> readonly) {
            this.readonly = readonly;
            return this;
        }

        public Builder readonly(Boolean readonly) {
            this.readonly = Optional.of(readonly);
            return this;
        }

        @JsonSetter(value = "allowAdditionalFields", nulls = Nulls.SKIP)
        public Builder allowAdditionalFields(Optional<Boolean> allowAdditionalFields) {
            this.allowAdditionalFields = allowAdditionalFields;
            return this;
        }

        public Builder allowAdditionalFields(Boolean allowAdditionalFields) {
            this.allowAdditionalFields = Optional.of(allowAdditionalFields);
            return this;
        }

        @JsonSetter(value = "mappingConfidenceThreshold", nulls = Nulls.SKIP)
        public Builder mappingConfidenceThreshold(Optional<Double> mappingConfidenceThreshold) {
            this.mappingConfidenceThreshold = mappingConfidenceThreshold;
            return this;
        }

        public Builder mappingConfidenceThreshold(Double mappingConfidenceThreshold) {
            this.mappingConfidenceThreshold = Optional.of(mappingConfidenceThreshold);
            return this;
        }

        @JsonSetter(value = "access", nulls = Nulls.SKIP)
        public Builder access(Optional<List<SheetAccess>> access) {
            this.access = access;
            return this;
        }

        public Builder access(List<SheetAccess> access) {
            this.access = Optional.of(access);
            return this;
        }

        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<List<Property>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(List<Property> fields) {
            this.fields = Optional.of(fields);
            return this;
        }

        @JsonSetter(value = "actions", nulls = Nulls.SKIP)
        public Builder actions(Optional<List<Action>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder actions(List<Action> actions) {
            this.actions = Optional.of(actions);
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<SheetId> id) {
            this.id = id;
            return this;
        }

        public Builder id(SheetId id) {
            this.id = Optional.of(id);
            return this;
        }

        @JsonSetter(value = "workbookId", nulls = Nulls.SKIP)
        public Builder workbookId(Optional<WorkbookId> workbookId) {
            this.workbookId = workbookId;
            return this;
        }

        public Builder workbookId(WorkbookId workbookId) {
            this.workbookId = Optional.of(workbookId);
            return this;
        }

        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public Builder config(Optional<SheetConfig> config) {
            this.config = config;
            return this;
        }

        public Builder config(SheetConfig config) {
            this.config = Optional.of(config);
            return this;
        }

        @JsonSetter(value = "namespace", nulls = Nulls.SKIP)
        public Builder namespace(Optional<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Optional.of(namespace);
            return this;
        }

        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.of(updatedAt);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.of(createdAt);
            return this;
        }

        public SheetConfigOrUpdate build() {
            return new SheetConfigOrUpdate(
                    name,
                    description,
                    slug,
                    readonly,
                    allowAdditionalFields,
                    mappingConfidenceThreshold,
                    access,
                    fields,
                    actions,
                    id,
                    workbookId,
                    config,
                    namespace,
                    updatedAt,
                    createdAt,
                    additionalProperties);
        }
    }
}
