/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.spaces.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SpaceId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DeleteSpacesRequest.Builder.class)
public final class DeleteSpacesRequest {
    private final SpaceId ids;

    private final Map<String, Object> additionalProperties;

    private DeleteSpacesRequest(SpaceId ids, Map<String, Object> additionalProperties) {
        this.ids = ids;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of ids for the spaces to be deleted
     */
    @JsonProperty("ids")
    public SpaceId getIds() {
        return ids;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteSpacesRequest && equalTo((DeleteSpacesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteSpacesRequest other) {
        return ids.equals(other.ids);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.ids);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdsStage builder() {
        return new Builder();
    }

    public interface IdsStage {
        _FinalStage ids(SpaceId ids);

        Builder from(DeleteSpacesRequest other);
    }

    public interface _FinalStage {
        DeleteSpacesRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdsStage, _FinalStage {
        private SpaceId ids;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(DeleteSpacesRequest other) {
            ids(other.getIds());
            return this;
        }

        /**
         * <p>List of ids for the spaces to be deleted</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("ids")
        public _FinalStage ids(SpaceId ids) {
            this.ids = ids;
            return this;
        }

        @Override
        public DeleteSpacesRequest build() {
            return new DeleteSpacesRequest(ids, additionalProperties);
        }
    }
}
