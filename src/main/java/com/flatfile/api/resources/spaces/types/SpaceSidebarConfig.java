/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.spaces.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.WorkbookId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SpaceSidebarConfig.Builder.class)
public final class SpaceSidebarConfig {
    private final Optional<List<WorkbookId>> workbookSidebarOrder;

    private final Map<String, Object> additionalProperties;

    private SpaceSidebarConfig(
            Optional<List<WorkbookId>> workbookSidebarOrder, Map<String, Object> additionalProperties) {
        this.workbookSidebarOrder = workbookSidebarOrder;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Used to set the order of workbooks in the sidebar. This will not affect workbooks that are pinned and workbooks that are not specified here will be sorted alphabetically.
     */
    @JsonProperty("workbookSidebarOrder")
    public Optional<List<WorkbookId>> getWorkbookSidebarOrder() {
        return workbookSidebarOrder;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SpaceSidebarConfig && equalTo((SpaceSidebarConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SpaceSidebarConfig other) {
        return workbookSidebarOrder.equals(other.workbookSidebarOrder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.workbookSidebarOrder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<WorkbookId>> workbookSidebarOrder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SpaceSidebarConfig other) {
            workbookSidebarOrder(other.getWorkbookSidebarOrder());
            return this;
        }

        @JsonSetter(value = "workbookSidebarOrder", nulls = Nulls.SKIP)
        public Builder workbookSidebarOrder(Optional<List<WorkbookId>> workbookSidebarOrder) {
            this.workbookSidebarOrder = workbookSidebarOrder;
            return this;
        }

        public Builder workbookSidebarOrder(List<WorkbookId> workbookSidebarOrder) {
            this.workbookSidebarOrder = Optional.of(workbookSidebarOrder);
            return this;
        }

        public SpaceSidebarConfig build() {
            return new SpaceSidebarConfig(workbookSidebarOrder, additionalProperties);
        }
    }
}
