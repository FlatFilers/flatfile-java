/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.spaces.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GuidanceOptions.Builder.class)
public final class GuidanceOptions {
    private final String target;

    private final TriggerEnum trigger;

    private final TypeEnum type;

    private final RoleEnum role;

    private final Map<String, Object> additionalProperties;

    private GuidanceOptions(
            String target,
            TriggerEnum trigger,
            TypeEnum type,
            RoleEnum role,
            Map<String, Object> additionalProperties) {
        this.target = target;
        this.trigger = trigger;
        this.type = type;
        this.role = role;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("target")
    public String getTarget() {
        return target;
    }

    @JsonProperty("trigger")
    public TriggerEnum getTrigger() {
        return trigger;
    }

    @JsonProperty("type")
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty("role")
    public RoleEnum getRole() {
        return role;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GuidanceOptions && equalTo((GuidanceOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GuidanceOptions other) {
        return target.equals(other.target)
                && trigger.equals(other.trigger)
                && type.equals(other.type)
                && role.equals(other.role);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.target, this.trigger, this.type, this.role);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TargetStage builder() {
        return new Builder();
    }

    public interface TargetStage {
        TriggerStage target(@NotNull String target);

        Builder from(GuidanceOptions other);
    }

    public interface TriggerStage {
        TypeStage trigger(@NotNull TriggerEnum trigger);
    }

    public interface TypeStage {
        RoleStage type(@NotNull TypeEnum type);
    }

    public interface RoleStage {
        _FinalStage role(@NotNull RoleEnum role);
    }

    public interface _FinalStage {
        GuidanceOptions build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TargetStage, TriggerStage, TypeStage, RoleStage, _FinalStage {
        private String target;

        private TriggerEnum trigger;

        private TypeEnum type;

        private RoleEnum role;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GuidanceOptions other) {
            target(other.getTarget());
            trigger(other.getTrigger());
            type(other.getType());
            role(other.getRole());
            return this;
        }

        @java.lang.Override
        @JsonSetter("target")
        public TriggerStage target(@NotNull String target) {
            this.target = Objects.requireNonNull(target, "target must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("trigger")
        public TypeStage trigger(@NotNull TriggerEnum trigger) {
            this.trigger = Objects.requireNonNull(trigger, "trigger must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public RoleStage type(@NotNull TypeEnum type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("role")
        public _FinalStage role(@NotNull RoleEnum role) {
            this.role = Objects.requireNonNull(role, "role must not be null");
            return this;
        }

        @java.lang.Override
        public GuidanceOptions build() {
            return new GuidanceOptions(target, trigger, type, role, additionalProperties);
        }
    }
}
