/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.spaces.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.GuidanceId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GuidanceResource.Builder.class)
public final class GuidanceResource {
    private final GuidanceId id;

    private final String guideSlug;

    private final GuidanceOptions options;

    private final Map<String, Object> additionalProperties;

    private GuidanceResource(
            GuidanceId id, String guideSlug, GuidanceOptions options, Map<String, Object> additionalProperties) {
        this.id = id;
        this.guideSlug = guideSlug;
        this.options = options;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public GuidanceId getId() {
        return id;
    }

    @JsonProperty("guideSlug")
    public String getGuideSlug() {
        return guideSlug;
    }

    @JsonProperty("options")
    public GuidanceOptions getOptions() {
        return options;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GuidanceResource && equalTo((GuidanceResource) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GuidanceResource other) {
        return id.equals(other.id) && guideSlug.equals(other.guideSlug) && options.equals(other.options);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.guideSlug, this.options);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        GuideSlugStage id(@NotNull GuidanceId id);

        Builder from(GuidanceResource other);
    }

    public interface GuideSlugStage {
        OptionsStage guideSlug(@NotNull String guideSlug);
    }

    public interface OptionsStage {
        _FinalStage options(@NotNull GuidanceOptions options);
    }

    public interface _FinalStage {
        GuidanceResource build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, GuideSlugStage, OptionsStage, _FinalStage {
        private GuidanceId id;

        private String guideSlug;

        private GuidanceOptions options;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GuidanceResource other) {
            id(other.getId());
            guideSlug(other.getGuideSlug());
            options(other.getOptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public GuideSlugStage id(@NotNull GuidanceId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("guideSlug")
        public OptionsStage guideSlug(@NotNull String guideSlug) {
            this.guideSlug = Objects.requireNonNull(guideSlug, "guideSlug must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("options")
        public _FinalStage options(@NotNull GuidanceOptions options) {
            this.options = Objects.requireNonNull(options, "options must not be null");
            return this;
        }

        @java.lang.Override
        public GuidanceResource build() {
            return new GuidanceResource(id, guideSlug, options, additionalProperties);
        }
    }
}
