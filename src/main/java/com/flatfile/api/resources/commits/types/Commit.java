/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commits.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.CommitId;
import com.flatfile.api.resources.commons.types.SheetId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Commit.Builder.class)
public final class Commit {
    private final CommitId id;

    private final SheetId sheetId;

    private final String createdBy;

    private final Optional<String> completedBy;

    private final OffsetDateTime createdAt;

    private final Optional<OffsetDateTime> completedAt;

    private final Map<String, Object> additionalProperties;

    private Commit(
            CommitId id,
            SheetId sheetId,
            String createdBy,
            Optional<String> completedBy,
            OffsetDateTime createdAt,
            Optional<OffsetDateTime> completedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.sheetId = sheetId;
        this.createdBy = createdBy;
        this.completedBy = completedBy;
        this.createdAt = createdAt;
        this.completedAt = completedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public CommitId getId() {
        return id;
    }

    @JsonProperty("sheetId")
    public SheetId getSheetId() {
        return sheetId;
    }

    /**
     * @return The actor (user or system) who created the commit
     */
    @JsonProperty("createdBy")
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * @return The actor (user or system) who completed the commit
     */
    @JsonProperty("completedBy")
    public Optional<String> getCompletedBy() {
        return completedBy;
    }

    /**
     * @return The time the commit was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The time the commit was acknowledged
     */
    @JsonProperty("completedAt")
    public Optional<OffsetDateTime> getCompletedAt() {
        return completedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Commit && equalTo((Commit) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Commit other) {
        return id.equals(other.id)
                && sheetId.equals(other.sheetId)
                && createdBy.equals(other.createdBy)
                && completedBy.equals(other.completedBy)
                && createdAt.equals(other.createdAt)
                && completedAt.equals(other.completedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.sheetId, this.createdBy, this.completedBy, this.createdAt, this.completedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        SheetIdStage id(@NotNull CommitId id);

        Builder from(Commit other);
    }

    public interface SheetIdStage {
        CreatedByStage sheetId(@NotNull SheetId sheetId);
    }

    public interface CreatedByStage {
        CreatedAtStage createdBy(@NotNull String createdBy);
    }

    public interface CreatedAtStage {
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        Commit build();

        _FinalStage completedBy(Optional<String> completedBy);

        _FinalStage completedBy(String completedBy);

        _FinalStage completedAt(Optional<OffsetDateTime> completedAt);

        _FinalStage completedAt(OffsetDateTime completedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, SheetIdStage, CreatedByStage, CreatedAtStage, _FinalStage {
        private CommitId id;

        private SheetId sheetId;

        private String createdBy;

        private OffsetDateTime createdAt;

        private Optional<OffsetDateTime> completedAt = Optional.empty();

        private Optional<String> completedBy = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Commit other) {
            id(other.getId());
            sheetId(other.getSheetId());
            createdBy(other.getCreatedBy());
            completedBy(other.getCompletedBy());
            createdAt(other.getCreatedAt());
            completedAt(other.getCompletedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public SheetIdStage id(@NotNull CommitId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("sheetId")
        public CreatedByStage sheetId(@NotNull SheetId sheetId) {
            this.sheetId = Objects.requireNonNull(sheetId, "sheetId must not be null");
            return this;
        }

        /**
         * <p>The actor (user or system) who created the commit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdBy")
        public CreatedAtStage createdBy(@NotNull String createdBy) {
            this.createdBy = Objects.requireNonNull(createdBy, "createdBy must not be null");
            return this;
        }

        /**
         * <p>The time the commit was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The time the commit was acknowledged</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage completedAt(OffsetDateTime completedAt) {
            this.completedAt = Optional.ofNullable(completedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "completedAt", nulls = Nulls.SKIP)
        public _FinalStage completedAt(Optional<OffsetDateTime> completedAt) {
            this.completedAt = completedAt;
            return this;
        }

        /**
         * <p>The actor (user or system) who completed the commit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage completedBy(String completedBy) {
            this.completedBy = Optional.ofNullable(completedBy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "completedBy", nulls = Nulls.SKIP)
        public _FinalStage completedBy(Optional<String> completedBy) {
            this.completedBy = completedBy;
            return this;
        }

        @java.lang.Override
        public Commit build() {
            return new Commit(id, sheetId, createdBy, completedBy, createdAt, completedAt, additionalProperties);
        }
    }
}
