/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.mapping.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.MappingId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DeleteMultipleRulesRequest.Builder.class)
public final class DeleteMultipleRulesRequest {
    private final List<MappingId> ruleIds;

    private final Map<String, Object> additionalProperties;

    private DeleteMultipleRulesRequest(List<MappingId> ruleIds, Map<String, Object> additionalProperties) {
        this.ruleIds = ruleIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Array of rule IDs to be deleted
     */
    @JsonProperty("ruleIds")
    public List<MappingId> getRuleIds() {
        return ruleIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteMultipleRulesRequest && equalTo((DeleteMultipleRulesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteMultipleRulesRequest other) {
        return ruleIds.equals(other.ruleIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ruleIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<MappingId> ruleIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeleteMultipleRulesRequest other) {
            ruleIds(other.getRuleIds());
            return this;
        }

        @JsonSetter(value = "ruleIds", nulls = Nulls.SKIP)
        public Builder ruleIds(List<MappingId> ruleIds) {
            this.ruleIds.clear();
            this.ruleIds.addAll(ruleIds);
            return this;
        }

        public Builder addRuleIds(MappingId ruleIds) {
            this.ruleIds.add(ruleIds);
            return this;
        }

        public Builder addAllRuleIds(List<MappingId> ruleIds) {
            this.ruleIds.addAll(ruleIds);
            return this;
        }

        public DeleteMultipleRulesRequest build() {
            return new DeleteMultipleRulesRequest(ruleIds, additionalProperties);
        }
    }
}
