/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.mapping.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MappingRuleConfig.Builder.class)
public final class MappingRuleConfig implements IMappingRuleConfig {
    private final String name;

    private final MappingRuleType type;

    private final Optional<Object> config;

    private final Map<String, Object> additionalProperties;

    private MappingRuleConfig(
            String name, MappingRuleType type, Optional<Object> config, Map<String, Object> additionalProperties) {
        this.name = name;
        this.type = type;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the mapping rule
     */
    @JsonProperty("name")
    @Override
    public String getName() {
        return name;
    }

    @JsonProperty("type")
    @Override
    public MappingRuleType getType() {
        return type;
    }

    @JsonProperty("config")
    @Override
    public Optional<Object> getConfig() {
        return config;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MappingRuleConfig && equalTo((MappingRuleConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MappingRuleConfig other) {
        return name.equals(other.name) && type.equals(other.type) && config.equals(other.config);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.name, this.type, this.config);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        TypeStage name(String name);

        Builder from(MappingRuleConfig other);
    }

    public interface TypeStage {
        _FinalStage type(MappingRuleType type);
    }

    public interface _FinalStage {
        MappingRuleConfig build();

        _FinalStage config(Optional<Object> config);

        _FinalStage config(Object config);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, TypeStage, _FinalStage {
        private String name;

        private MappingRuleType type;

        private Optional<Object> config = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(MappingRuleConfig other) {
            name(other.getName());
            type(other.getType());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>Name of the mapping rule</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("name")
        public TypeStage name(String name) {
            this.name = name;
            return this;
        }

        @Override
        @JsonSetter("type")
        public _FinalStage type(MappingRuleType type) {
            this.type = type;
            return this;
        }

        @Override
        public _FinalStage config(Object config) {
            this.config = Optional.of(config);
            return this;
        }

        @Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<Object> config) {
            this.config = config;
            return this;
        }

        @Override
        public MappingRuleConfig build() {
            return new MappingRuleConfig(name, type, config, additionalProperties);
        }
    }
}
