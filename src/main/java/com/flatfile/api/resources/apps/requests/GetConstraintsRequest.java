/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.apps.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetConstraintsRequest.Builder.class)
public final class GetConstraintsRequest {
    private final Optional<Boolean> includeBuiltins;

    private final Map<String, Object> additionalProperties;

    private GetConstraintsRequest(Optional<Boolean> includeBuiltins, Map<String, Object> additionalProperties) {
        this.includeBuiltins = includeBuiltins;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether to include built-in constraints
     */
    @JsonProperty("includeBuiltins")
    public Optional<Boolean> getIncludeBuiltins() {
        return includeBuiltins;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetConstraintsRequest && equalTo((GetConstraintsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetConstraintsRequest other) {
        return includeBuiltins.equals(other.includeBuiltins);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.includeBuiltins);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> includeBuiltins = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetConstraintsRequest other) {
            includeBuiltins(other.getIncludeBuiltins());
            return this;
        }

        @JsonSetter(value = "includeBuiltins", nulls = Nulls.SKIP)
        public Builder includeBuiltins(Optional<Boolean> includeBuiltins) {
            this.includeBuiltins = includeBuiltins;
            return this;
        }

        public Builder includeBuiltins(Boolean includeBuiltins) {
            this.includeBuiltins = Optional.ofNullable(includeBuiltins);
            return this;
        }

        public GetConstraintsRequest build() {
            return new GetConstraintsRequest(includeBuiltins, additionalProperties);
        }
    }
}
