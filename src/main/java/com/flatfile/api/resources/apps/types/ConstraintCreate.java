/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.apps.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConstraintCreate.Builder.class)
public final class ConstraintCreate {
    private final Optional<String> description;

    private final Optional<String> function;

    private final Optional<Object> options;

    private final Optional<String> label;

    private final Map<String, Object> additionalProperties;

    private ConstraintCreate(
            Optional<String> description,
            Optional<String> function,
            Optional<Object> options,
            Optional<String> label,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.function = function;
        this.options = options;
        this.label = label;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("function")
    public Optional<String> getFunction() {
        return function;
    }

    @JsonProperty("options")
    public Optional<Object> getOptions() {
        return options;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConstraintCreate && equalTo((ConstraintCreate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConstraintCreate other) {
        return description.equals(other.description)
                && function.equals(other.function)
                && options.equals(other.options)
                && label.equals(other.label);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.description, this.function, this.options, this.label);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();

        private Optional<String> function = Optional.empty();

        private Optional<Object> options = Optional.empty();

        private Optional<String> label = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConstraintCreate other) {
            description(other.getDescription());
            function(other.getFunction());
            options(other.getOptions());
            label(other.getLabel());
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "function", nulls = Nulls.SKIP)
        public Builder function(Optional<String> function) {
            this.function = function;
            return this;
        }

        public Builder function(String function) {
            this.function = Optional.ofNullable(function);
            return this;
        }

        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public Builder options(Optional<Object> options) {
            this.options = options;
            return this;
        }

        public Builder options(Object options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        public ConstraintCreate build() {
            return new ConstraintCreate(description, function, options, label, additionalProperties);
        }
    }
}
