/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserConfig.Builder.class)
public final class UserConfig implements IUserConfig {
    private final String email;

    private final String name;

    private final String accountId;

    private final Map<String, Object> additionalProperties;

    private UserConfig(String email, String name, String accountId, Map<String, Object> additionalProperties) {
        this.email = email;
        this.name = name;
        this.accountId = accountId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("email")
    @Override
    public String getEmail() {
        return email;
    }

    @JsonProperty("name")
    @Override
    public String getName() {
        return name;
    }

    @JsonProperty("accountId")
    @Override
    public String getAccountId() {
        return accountId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserConfig && equalTo((UserConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserConfig other) {
        return email.equals(other.email) && name.equals(other.name) && accountId.equals(other.accountId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.email, this.name, this.accountId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EmailStage builder() {
        return new Builder();
    }

    public interface EmailStage {
        NameStage email(String email);

        Builder from(UserConfig other);
    }

    public interface NameStage {
        AccountIdStage name(String name);
    }

    public interface AccountIdStage {
        _FinalStage accountId(String accountId);
    }

    public interface _FinalStage {
        UserConfig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EmailStage, NameStage, AccountIdStage, _FinalStage {
        private String email;

        private String name;

        private String accountId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(UserConfig other) {
            email(other.getEmail());
            name(other.getName());
            accountId(other.getAccountId());
            return this;
        }

        @Override
        @JsonSetter("email")
        public NameStage email(String email) {
            this.email = email;
            return this;
        }

        @Override
        @JsonSetter("name")
        public AccountIdStage name(String name) {
            this.name = name;
            return this;
        }

        @Override
        @JsonSetter("accountId")
        public _FinalStage accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }

        @Override
        public UserConfig build() {
            return new UserConfig(email, name, accountId, additionalProperties);
        }
    }
}
