/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListApiTokensRequest.Builder.class)
public final class ListApiTokensRequest {
    private final String tenantId;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> pageNumber;

    private final Map<String, Object> additionalProperties;

    private ListApiTokensRequest(
            String tenantId,
            Optional<Integer> pageSize,
            Optional<Integer> pageNumber,
            Map<String, Object> additionalProperties) {
        this.tenantId = tenantId;
        this.pageSize = pageSize;
        this.pageNumber = pageNumber;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("tenantId")
    public String getTenantId() {
        return tenantId;
    }

    /**
     * @return Number of tokens to return in a page (default 10)
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Based on pageSize, which page of records to return
     */
    @JsonProperty("pageNumber")
    public Optional<Integer> getPageNumber() {
        return pageNumber;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListApiTokensRequest && equalTo((ListApiTokensRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListApiTokensRequest other) {
        return tenantId.equals(other.tenantId)
                && pageSize.equals(other.pageSize)
                && pageNumber.equals(other.pageNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.tenantId, this.pageSize, this.pageNumber);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TenantIdStage builder() {
        return new Builder();
    }

    public interface TenantIdStage {
        _FinalStage tenantId(String tenantId);

        Builder from(ListApiTokensRequest other);
    }

    public interface _FinalStage {
        ListApiTokensRequest build();

        _FinalStage pageSize(Optional<Integer> pageSize);

        _FinalStage pageSize(Integer pageSize);

        _FinalStage pageNumber(Optional<Integer> pageNumber);

        _FinalStage pageNumber(Integer pageNumber);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TenantIdStage, _FinalStage {
        private String tenantId;

        private Optional<Integer> pageNumber = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ListApiTokensRequest other) {
            tenantId(other.getTenantId());
            pageSize(other.getPageSize());
            pageNumber(other.getPageNumber());
            return this;
        }

        @Override
        @JsonSetter("tenantId")
        public _FinalStage tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        /**
         * <p>Based on pageSize, which page of records to return</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage pageNumber(Integer pageNumber) {
            this.pageNumber = Optional.of(pageNumber);
            return this;
        }

        @Override
        @JsonSetter(value = "pageNumber", nulls = Nulls.SKIP)
        public _FinalStage pageNumber(Optional<Integer> pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * <p>Number of tokens to return in a page (default 10)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage pageSize(Integer pageSize) {
            this.pageSize = Optional.of(pageSize);
            return this;
        }

        @Override
        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public _FinalStage pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        @Override
        public ListApiTokensRequest build() {
            return new ListApiTokensRequest(tenantId, pageSize, pageNumber, additionalProperties);
        }
    }
}
