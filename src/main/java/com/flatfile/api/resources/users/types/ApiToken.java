/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ApiToken.Builder.class)
public final class ApiToken {
    private final String clientId;

    private final String description;

    private final Map<String, Object> metadata;

    private final String createdAt;

    private final Optional<String> secret;

    private final Map<String, Object> additionalProperties;

    private ApiToken(
            String clientId,
            String description,
            Map<String, Object> metadata,
            String createdAt,
            Optional<String> secret,
            Map<String, Object> additionalProperties) {
        this.clientId = clientId;
        this.description = description;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.secret = secret;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("clientId")
    public String getClientId() {
        return clientId;
    }

    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    @JsonProperty("metadata")
    public Map<String, Object> getMetadata() {
        return metadata;
    }

    @JsonProperty("createdAt")
    public String getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("secret")
    public Optional<String> getSecret() {
        return secret;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApiToken && equalTo((ApiToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApiToken other) {
        return clientId.equals(other.clientId)
                && description.equals(other.description)
                && metadata.equals(other.metadata)
                && createdAt.equals(other.createdAt)
                && secret.equals(other.secret);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.clientId, this.description, this.metadata, this.createdAt, this.secret);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ClientIdStage builder() {
        return new Builder();
    }

    public interface ClientIdStage {
        DescriptionStage clientId(String clientId);

        Builder from(ApiToken other);
    }

    public interface DescriptionStage {
        CreatedAtStage description(String description);
    }

    public interface CreatedAtStage {
        _FinalStage createdAt(String createdAt);
    }

    public interface _FinalStage {
        ApiToken build();

        _FinalStage metadata(Map<String, Object> metadata);

        _FinalStage putAllMetadata(Map<String, Object> metadata);

        _FinalStage metadata(String key, Object value);

        _FinalStage secret(Optional<String> secret);

        _FinalStage secret(String secret);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ClientIdStage, DescriptionStage, CreatedAtStage, _FinalStage {
        private String clientId;

        private String description;

        private String createdAt;

        private Optional<String> secret = Optional.empty();

        private Map<String, Object> metadata = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ApiToken other) {
            clientId(other.getClientId());
            description(other.getDescription());
            metadata(other.getMetadata());
            createdAt(other.getCreatedAt());
            secret(other.getSecret());
            return this;
        }

        @Override
        @JsonSetter("clientId")
        public DescriptionStage clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }

        @Override
        @JsonSetter("description")
        public CreatedAtStage description(String description) {
            this.description = description;
            return this;
        }

        @Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @Override
        public _FinalStage secret(String secret) {
            this.secret = Optional.of(secret);
            return this;
        }

        @Override
        @JsonSetter(value = "secret", nulls = Nulls.SKIP)
        public _FinalStage secret(Optional<String> secret) {
            this.secret = secret;
            return this;
        }

        @Override
        public _FinalStage metadata(String key, Object value) {
            this.metadata.put(key, value);
            return this;
        }

        @Override
        public _FinalStage putAllMetadata(Map<String, Object> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        @Override
        public ApiToken build() {
            return new ApiToken(clientId, description, metadata, createdAt, secret, additionalProperties);
        }
    }
}
