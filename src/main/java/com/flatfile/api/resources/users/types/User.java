/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.AccountId;
import com.flatfile.api.resources.commons.types.UserId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = User.Builder.class)
public final class User implements IUser, IUserConfig {
    private final UserId id;

    private final String idp;

    private final Optional<String> idpRef;

    private final Map<String, Object> metadata;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<OffsetDateTime> lastSeenAt;

    private final Optional<Integer> dashboard;

    private final String email;

    private final String name;

    private final AccountId accountId;

    private final Map<String, Object> additionalProperties;

    private User(
            UserId id,
            String idp,
            Optional<String> idpRef,
            Map<String, Object> metadata,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<OffsetDateTime> lastSeenAt,
            Optional<Integer> dashboard,
            String email,
            String name,
            AccountId accountId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.idp = idp;
        this.idpRef = idpRef;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.lastSeenAt = lastSeenAt;
        this.dashboard = dashboard;
        this.email = email;
        this.name = name;
        this.accountId = accountId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public UserId getId() {
        return id;
    }

    @JsonProperty("idp")
    @java.lang.Override
    public String getIdp() {
        return idp;
    }

    @JsonProperty("idpRef")
    @java.lang.Override
    public Optional<String> getIdpRef() {
        return idpRef;
    }

    @JsonProperty("metadata")
    @java.lang.Override
    public Map<String, Object> getMetadata() {
        return metadata;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("lastSeenAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getLastSeenAt() {
        return lastSeenAt;
    }

    @JsonProperty("dashboard")
    @java.lang.Override
    public Optional<Integer> getDashboard() {
        return dashboard;
    }

    @JsonProperty("email")
    @java.lang.Override
    public String getEmail() {
        return email;
    }

    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    @JsonProperty("accountId")
    @java.lang.Override
    public AccountId getAccountId() {
        return accountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof User && equalTo((User) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(User other) {
        return id.equals(other.id)
                && idp.equals(other.idp)
                && idpRef.equals(other.idpRef)
                && metadata.equals(other.metadata)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && lastSeenAt.equals(other.lastSeenAt)
                && dashboard.equals(other.dashboard)
                && email.equals(other.email)
                && name.equals(other.name)
                && accountId.equals(other.accountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.idp,
                this.idpRef,
                this.metadata,
                this.createdAt,
                this.updatedAt,
                this.lastSeenAt,
                this.dashboard,
                this.email,
                this.name,
                this.accountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        IdpStage id(@NotNull UserId id);

        Builder from(User other);
    }

    public interface IdpStage {
        CreatedAtStage idp(@NotNull String idp);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        EmailStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface EmailStage {
        NameStage email(@NotNull String email);
    }

    public interface NameStage {
        AccountIdStage name(@NotNull String name);
    }

    public interface AccountIdStage {
        _FinalStage accountId(@NotNull AccountId accountId);
    }

    public interface _FinalStage {
        User build();

        _FinalStage idpRef(Optional<String> idpRef);

        _FinalStage idpRef(String idpRef);

        _FinalStage metadata(Map<String, Object> metadata);

        _FinalStage putAllMetadata(Map<String, Object> metadata);

        _FinalStage metadata(String key, Object value);

        _FinalStage lastSeenAt(Optional<OffsetDateTime> lastSeenAt);

        _FinalStage lastSeenAt(OffsetDateTime lastSeenAt);

        _FinalStage dashboard(Optional<Integer> dashboard);

        _FinalStage dashboard(Integer dashboard);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    IdpStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    EmailStage,
                    NameStage,
                    AccountIdStage,
                    _FinalStage {
        private UserId id;

        private String idp;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String email;

        private String name;

        private AccountId accountId;

        private Optional<Integer> dashboard = Optional.empty();

        private Optional<OffsetDateTime> lastSeenAt = Optional.empty();

        private Map<String, Object> metadata = new LinkedHashMap<>();

        private Optional<String> idpRef = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(User other) {
            id(other.getId());
            idp(other.getIdp());
            idpRef(other.getIdpRef());
            metadata(other.getMetadata());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            lastSeenAt(other.getLastSeenAt());
            dashboard(other.getDashboard());
            email(other.getEmail());
            name(other.getName());
            accountId(other.getAccountId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public IdpStage id(@NotNull UserId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("idp")
        public CreatedAtStage idp(@NotNull String idp) {
            this.idp = Objects.requireNonNull(idp, "idp must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public EmailStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public NameStage email(@NotNull String email) {
            this.email = Objects.requireNonNull(email, "email must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public AccountIdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountId")
        public _FinalStage accountId(@NotNull AccountId accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage dashboard(Integer dashboard) {
            this.dashboard = Optional.ofNullable(dashboard);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dashboard", nulls = Nulls.SKIP)
        public _FinalStage dashboard(Optional<Integer> dashboard) {
            this.dashboard = dashboard;
            return this;
        }

        @java.lang.Override
        public _FinalStage lastSeenAt(OffsetDateTime lastSeenAt) {
            this.lastSeenAt = Optional.ofNullable(lastSeenAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lastSeenAt", nulls = Nulls.SKIP)
        public _FinalStage lastSeenAt(Optional<OffsetDateTime> lastSeenAt) {
            this.lastSeenAt = lastSeenAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(String key, Object value) {
            this.metadata.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, Object> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        public _FinalStage idpRef(String idpRef) {
            this.idpRef = Optional.ofNullable(idpRef);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idpRef", nulls = Nulls.SKIP)
        public _FinalStage idpRef(Optional<String> idpRef) {
            this.idpRef = idpRef;
            return this;
        }

        @java.lang.Override
        public User build() {
            return new User(
                    id,
                    idp,
                    idpRef,
                    metadata,
                    createdAt,
                    updatedAt,
                    lastSeenAt,
                    dashboard,
                    email,
                    name,
                    accountId,
                    additionalProperties);
        }
    }
}
