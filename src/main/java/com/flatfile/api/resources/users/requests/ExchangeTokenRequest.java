/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ExchangeTokenRequest.Builder.class)
public final class ExchangeTokenRequest {
    private final Optional<String> token;

    private final Optional<String> email;

    private final Optional<String> spaceId;

    private final Map<String, Object> additionalProperties;

    private ExchangeTokenRequest(
            Optional<String> token,
            Optional<String> email,
            Optional<String> spaceId,
            Map<String, Object> additionalProperties) {
        this.token = token;
        this.email = email;
        this.spaceId = spaceId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The token to use for the request
     */
    @JsonProperty("token")
    public Optional<String> getToken() {
        return token;
    }

    /**
     * @return The invited guest's email, required if no token
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return The spaceId, required if no token
     */
    @JsonProperty("spaceId")
    public Optional<String> getSpaceId() {
        return spaceId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExchangeTokenRequest && equalTo((ExchangeTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExchangeTokenRequest other) {
        return token.equals(other.token) && email.equals(other.email) && spaceId.equals(other.spaceId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.token, this.email, this.spaceId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> token = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> spaceId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExchangeTokenRequest other) {
            token(other.getToken());
            email(other.getEmail());
            spaceId(other.getSpaceId());
            return this;
        }

        @JsonSetter(value = "token", nulls = Nulls.SKIP)
        public Builder token(Optional<String> token) {
            this.token = token;
            return this;
        }

        public Builder token(String token) {
            this.token = Optional.of(token);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public Builder spaceId(Optional<String> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        public Builder spaceId(String spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        public ExchangeTokenRequest build() {
            return new ExchangeTokenRequest(token, email, spaceId, additionalProperties);
        }
    }
}
