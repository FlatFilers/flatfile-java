/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.versions.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = VersionsPostRequestBody.Builder.class)
public final class VersionsPostRequestBody {
    private final Optional<String> sheetId;

    private final Optional<String> parentVersionId;

    private final Map<String, Object> additionalProperties;

    private VersionsPostRequestBody(
            Optional<String> sheetId, Optional<String> parentVersionId, Map<String, Object> additionalProperties) {
        this.sheetId = sheetId;
        this.parentVersionId = parentVersionId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sheetId")
    public Optional<String> getSheetId() {
        return sheetId;
    }

    @JsonProperty("parentVersionId")
    public Optional<String> getParentVersionId() {
        return parentVersionId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VersionsPostRequestBody && equalTo((VersionsPostRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VersionsPostRequestBody other) {
        return sheetId.equals(other.sheetId) && parentVersionId.equals(other.parentVersionId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.sheetId, this.parentVersionId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sheetId = Optional.empty();

        private Optional<String> parentVersionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VersionsPostRequestBody other) {
            sheetId(other.getSheetId());
            parentVersionId(other.getParentVersionId());
            return this;
        }

        @JsonSetter(value = "sheetId", nulls = Nulls.SKIP)
        public Builder sheetId(Optional<String> sheetId) {
            this.sheetId = sheetId;
            return this;
        }

        public Builder sheetId(String sheetId) {
            this.sheetId = Optional.of(sheetId);
            return this;
        }

        @JsonSetter(value = "parentVersionId", nulls = Nulls.SKIP)
        public Builder parentVersionId(Optional<String> parentVersionId) {
            this.parentVersionId = parentVersionId;
            return this;
        }

        public Builder parentVersionId(String parentVersionId) {
            this.parentVersionId = Optional.of(parentVersionId);
            return this;
        }

        public VersionsPostRequestBody build() {
            return new VersionsPostRequestBody(sheetId, parentVersionId, additionalProperties);
        }
    }
}
