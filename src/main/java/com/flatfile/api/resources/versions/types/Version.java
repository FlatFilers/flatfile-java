/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.versions.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.VersionId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Version.Builder.class)
public final class Version {
    private final VersionId versionId;

    private final Map<String, Object> additionalProperties;

    private Version(VersionId versionId, Map<String, Object> additionalProperties) {
        this.versionId = versionId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("versionId")
    public VersionId getVersionId() {
        return versionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Version && equalTo((Version) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Version other) {
        return versionId.equals(other.versionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.versionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VersionIdStage builder() {
        return new Builder();
    }

    public interface VersionIdStage {
        _FinalStage versionId(@NotNull VersionId versionId);

        Builder from(Version other);
    }

    public interface _FinalStage {
        Version build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements VersionIdStage, _FinalStage {
        private VersionId versionId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Version other) {
            versionId(other.getVersionId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("versionId")
        public _FinalStage versionId(@NotNull VersionId versionId) {
            this.versionId = Objects.requireNonNull(versionId, "versionId must not be null");
            return this;
        }

        @java.lang.Override
        public Version build() {
            return new Version(versionId, additionalProperties);
        }
    }
}
