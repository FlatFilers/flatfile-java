/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ValidationMessage.Builder.class)
public final class ValidationMessage {
    private final Optional<ValidationType> type;

    private final Optional<ValidationSource> source;

    private final Optional<String> message;

    private final Map<String, Object> additionalProperties;

    private ValidationMessage(
            Optional<ValidationType> type,
            Optional<ValidationSource> source,
            Optional<String> message,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.source = source;
        this.message = message;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<ValidationType> getType() {
        return type;
    }

    @JsonProperty("source")
    public Optional<ValidationSource> getSource() {
        return source;
    }

    @JsonProperty("message")
    public Optional<String> getMessage() {
        return message;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ValidationMessage && equalTo((ValidationMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ValidationMessage other) {
        return type.equals(other.type) && source.equals(other.source) && message.equals(other.message);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.type, this.source, this.message);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ValidationType> type = Optional.empty();

        private Optional<ValidationSource> source = Optional.empty();

        private Optional<String> message = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ValidationMessage other) {
            type(other.getType());
            source(other.getSource());
            message(other.getMessage());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<ValidationType> type) {
            this.type = type;
            return this;
        }

        public Builder type(ValidationType type) {
            this.type = Optional.of(type);
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<ValidationSource> source) {
            this.source = source;
            return this;
        }

        public Builder source(ValidationSource source) {
            this.source = Optional.of(source);
            return this;
        }

        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<String> message) {
            this.message = message;
            return this;
        }

        public Builder message(String message) {
            this.message = Optional.of(message);
            return this;
        }

        public ValidationMessage build() {
            return new ValidationMessage(type, source, message, additionalProperties);
        }
    }
}
