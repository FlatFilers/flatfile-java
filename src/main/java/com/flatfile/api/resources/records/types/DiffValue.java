/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DiffValue.Builder.class)
public final class DiffValue implements ICellValue {
    private final Optional<Boolean> valid;

    private final Optional<List<ValidationMessage>> messages;

    private final Optional<Map<String, Object>> metadata;

    private final Optional<CellValueUnion> value;

    private final Optional<String> layer;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<CellValueUnion> snapshotValue;

    private final Optional<CellValueUnion> clipValue;

    private final Map<String, Object> additionalProperties;

    private DiffValue(
            Optional<Boolean> valid,
            Optional<List<ValidationMessage>> messages,
            Optional<Map<String, Object>> metadata,
            Optional<CellValueUnion> value,
            Optional<String> layer,
            Optional<OffsetDateTime> updatedAt,
            Optional<CellValueUnion> snapshotValue,
            Optional<CellValueUnion> clipValue,
            Map<String, Object> additionalProperties) {
        this.valid = valid;
        this.messages = messages;
        this.metadata = metadata;
        this.value = value;
        this.layer = layer;
        this.updatedAt = updatedAt;
        this.snapshotValue = snapshotValue;
        this.clipValue = clipValue;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("valid")
    @java.lang.Override
    public Optional<Boolean> getValid() {
        return valid;
    }

    @JsonProperty("messages")
    @java.lang.Override
    public Optional<List<ValidationMessage>> getMessages() {
        return messages;
    }

    /**
     * @return Deprecated, use record level metadata instead.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @JsonProperty("value")
    @java.lang.Override
    public Optional<CellValueUnion> getValue() {
        return value;
    }

    @JsonProperty("layer")
    @java.lang.Override
    public Optional<String> getLayer() {
        return layer;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("snapshotValue")
    public Optional<CellValueUnion> getSnapshotValue() {
        return snapshotValue;
    }

    @JsonProperty("clipValue")
    public Optional<CellValueUnion> getClipValue() {
        return clipValue;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DiffValue && equalTo((DiffValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DiffValue other) {
        return valid.equals(other.valid)
                && messages.equals(other.messages)
                && metadata.equals(other.metadata)
                && value.equals(other.value)
                && layer.equals(other.layer)
                && updatedAt.equals(other.updatedAt)
                && snapshotValue.equals(other.snapshotValue)
                && clipValue.equals(other.clipValue);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.valid,
                this.messages,
                this.metadata,
                this.value,
                this.layer,
                this.updatedAt,
                this.snapshotValue,
                this.clipValue);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> valid = Optional.empty();

        private Optional<List<ValidationMessage>> messages = Optional.empty();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<CellValueUnion> value = Optional.empty();

        private Optional<String> layer = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<CellValueUnion> snapshotValue = Optional.empty();

        private Optional<CellValueUnion> clipValue = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DiffValue other) {
            valid(other.getValid());
            messages(other.getMessages());
            metadata(other.getMetadata());
            value(other.getValue());
            layer(other.getLayer());
            updatedAt(other.getUpdatedAt());
            snapshotValue(other.getSnapshotValue());
            clipValue(other.getClipValue());
            return this;
        }

        @JsonSetter(value = "valid", nulls = Nulls.SKIP)
        public Builder valid(Optional<Boolean> valid) {
            this.valid = valid;
            return this;
        }

        public Builder valid(Boolean valid) {
            this.valid = Optional.ofNullable(valid);
            return this;
        }

        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<ValidationMessage>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<ValidationMessage> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<CellValueUnion> value) {
            this.value = value;
            return this;
        }

        public Builder value(CellValueUnion value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        @JsonSetter(value = "layer", nulls = Nulls.SKIP)
        public Builder layer(Optional<String> layer) {
            this.layer = layer;
            return this;
        }

        public Builder layer(String layer) {
            this.layer = Optional.ofNullable(layer);
            return this;
        }

        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "snapshotValue", nulls = Nulls.SKIP)
        public Builder snapshotValue(Optional<CellValueUnion> snapshotValue) {
            this.snapshotValue = snapshotValue;
            return this;
        }

        public Builder snapshotValue(CellValueUnion snapshotValue) {
            this.snapshotValue = Optional.ofNullable(snapshotValue);
            return this;
        }

        @JsonSetter(value = "clipValue", nulls = Nulls.SKIP)
        public Builder clipValue(Optional<CellValueUnion> clipValue) {
            this.clipValue = clipValue;
            return this;
        }

        public Builder clipValue(CellValueUnion clipValue) {
            this.clipValue = Optional.ofNullable(clipValue);
            return this;
        }

        public DiffValue build() {
            return new DiffValue(
                    valid, messages, metadata, value, layer, updatedAt, snapshotValue, clipValue, additionalProperties);
        }
    }
}
