/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Filter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = FindAndReplaceRecordRequestDeprecated.Builder.class)
public final class FindAndReplaceRecordRequestDeprecated {
    private final String fieldKey;

    private final String searchValue;

    private final Optional<Filter> filter;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> pageNumber;

    private final Object replace;

    private final Map<String, Object> additionalProperties;

    private FindAndReplaceRecordRequestDeprecated(
            String fieldKey,
            String searchValue,
            Optional<Filter> filter,
            Optional<Integer> pageSize,
            Optional<Integer> pageNumber,
            Object replace,
            Map<String, Object> additionalProperties) {
        this.fieldKey = fieldKey;
        this.searchValue = searchValue;
        this.filter = filter;
        this.pageSize = pageSize;
        this.pageNumber = pageNumber;
        this.replace = replace;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique key used to identify a field in a sheet
     */
    @JsonProperty("fieldKey")
    public String getFieldKey() {
        return fieldKey;
    }

    /**
     * @return A value to find for a given field in a sheet. Wrap the value in &quot;&quot; for exact match
     */
    @JsonProperty("searchValue")
    public String getSearchValue() {
        return searchValue;
    }

    @JsonProperty("filter")
    public Optional<Filter> getFilter() {
        return filter;
    }

    /**
     * @return Number of records to return in a page (default 1000 if pageNumber included)
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Based on pageSize, which page of records to return
     */
    @JsonProperty("pageNumber")
    public Optional<Integer> getPageNumber() {
        return pageNumber;
    }

    /**
     * @return The value to replace found values with
     */
    @JsonProperty("replace")
    public Object getReplace() {
        return replace;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FindAndReplaceRecordRequestDeprecated
                && equalTo((FindAndReplaceRecordRequestDeprecated) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FindAndReplaceRecordRequestDeprecated other) {
        return fieldKey.equals(other.fieldKey)
                && searchValue.equals(other.searchValue)
                && filter.equals(other.filter)
                && pageSize.equals(other.pageSize)
                && pageNumber.equals(other.pageNumber)
                && replace.equals(other.replace);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.fieldKey, this.searchValue, this.filter, this.pageSize, this.pageNumber, this.replace);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FieldKeyStage builder() {
        return new Builder();
    }

    public interface FieldKeyStage {
        SearchValueStage fieldKey(String fieldKey);

        Builder from(FindAndReplaceRecordRequestDeprecated other);
    }

    public interface SearchValueStage {
        ReplaceStage searchValue(String searchValue);
    }

    public interface ReplaceStage {
        _FinalStage replace(Object replace);
    }

    public interface _FinalStage {
        FindAndReplaceRecordRequestDeprecated build();

        _FinalStage filter(Optional<Filter> filter);

        _FinalStage filter(Filter filter);

        _FinalStage pageSize(Optional<Integer> pageSize);

        _FinalStage pageSize(Integer pageSize);

        _FinalStage pageNumber(Optional<Integer> pageNumber);

        _FinalStage pageNumber(Integer pageNumber);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FieldKeyStage, SearchValueStage, ReplaceStage, _FinalStage {
        private String fieldKey;

        private String searchValue;

        private Object replace;

        private Optional<Integer> pageNumber = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Filter> filter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(FindAndReplaceRecordRequestDeprecated other) {
            fieldKey(other.getFieldKey());
            searchValue(other.getSearchValue());
            filter(other.getFilter());
            pageSize(other.getPageSize());
            pageNumber(other.getPageNumber());
            replace(other.getReplace());
            return this;
        }

        /**
         * <p>A unique key used to identify a field in a sheet</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("fieldKey")
        public SearchValueStage fieldKey(String fieldKey) {
            this.fieldKey = fieldKey;
            return this;
        }

        /**
         * <p>A value to find for a given field in a sheet. Wrap the value in &quot;&quot; for exact match</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("searchValue")
        public ReplaceStage searchValue(String searchValue) {
            this.searchValue = searchValue;
            return this;
        }

        /**
         * <p>The value to replace found values with</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("replace")
        public _FinalStage replace(Object replace) {
            this.replace = replace;
            return this;
        }

        /**
         * <p>Based on pageSize, which page of records to return</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage pageNumber(Integer pageNumber) {
            this.pageNumber = Optional.of(pageNumber);
            return this;
        }

        @Override
        @JsonSetter(value = "pageNumber", nulls = Nulls.SKIP)
        public _FinalStage pageNumber(Optional<Integer> pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * <p>Number of records to return in a page (default 1000 if pageNumber included)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage pageSize(Integer pageSize) {
            this.pageSize = Optional.of(pageSize);
            return this;
        }

        @Override
        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public _FinalStage pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        @Override
        public _FinalStage filter(Filter filter) {
            this.filter = Optional.of(filter);
            return this;
        }

        @Override
        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public _FinalStage filter(Optional<Filter> filter) {
            this.filter = filter;
            return this;
        }

        @Override
        public FindAndReplaceRecordRequestDeprecated build() {
            return new FindAndReplaceRecordRequestDeprecated(
                    fieldKey, searchValue, filter, pageSize, pageNumber, replace, additionalProperties);
        }
    }
}
