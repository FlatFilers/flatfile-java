/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.RecordId;
import com.flatfile.api.resources.commons.types.VersionId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RecordBase.Builder.class)
public final class RecordBase implements IRecordBase {
    private final RecordId id;

    private final Optional<VersionId> versionId;

    private final Optional<Boolean> valid;

    private final Optional<List<ValidationMessage>> messages;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private RecordBase(
            RecordId id,
            Optional<VersionId> versionId,
            Optional<Boolean> valid,
            Optional<List<ValidationMessage>> messages,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.versionId = versionId;
        this.valid = valid;
        this.messages = messages;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @Override
    public RecordId getId() {
        return id;
    }

    @JsonProperty("versionId")
    @Override
    public Optional<VersionId> getVersionId() {
        return versionId;
    }

    @JsonProperty("valid")
    @Override
    public Optional<Boolean> getValid() {
        return valid;
    }

    @JsonProperty("messages")
    @Override
    public Optional<List<ValidationMessage>> getMessages() {
        return messages;
    }

    @JsonProperty("metadata")
    @Override
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RecordBase && equalTo((RecordBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RecordBase other) {
        return id.equals(other.id)
                && versionId.equals(other.versionId)
                && valid.equals(other.valid)
                && messages.equals(other.messages)
                && metadata.equals(other.metadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.versionId, this.valid, this.messages, this.metadata);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        _FinalStage id(RecordId id);

        Builder from(RecordBase other);
    }

    public interface _FinalStage {
        RecordBase build();

        _FinalStage versionId(Optional<VersionId> versionId);

        _FinalStage versionId(VersionId versionId);

        _FinalStage valid(Optional<Boolean> valid);

        _FinalStage valid(Boolean valid);

        _FinalStage messages(Optional<List<ValidationMessage>> messages);

        _FinalStage messages(List<ValidationMessage> messages);

        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private RecordId id;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<List<ValidationMessage>> messages = Optional.empty();

        private Optional<Boolean> valid = Optional.empty();

        private Optional<VersionId> versionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(RecordBase other) {
            id(other.getId());
            versionId(other.getVersionId());
            valid(other.getValid());
            messages(other.getMessages());
            metadata(other.getMetadata());
            return this;
        }

        @Override
        @JsonSetter("id")
        public _FinalStage id(RecordId id) {
            this.id = id;
            return this;
        }

        @Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        @Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        @Override
        public _FinalStage messages(List<ValidationMessage> messages) {
            this.messages = Optional.of(messages);
            return this;
        }

        @Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<ValidationMessage>> messages) {
            this.messages = messages;
            return this;
        }

        @Override
        public _FinalStage valid(Boolean valid) {
            this.valid = Optional.of(valid);
            return this;
        }

        @Override
        @JsonSetter(value = "valid", nulls = Nulls.SKIP)
        public _FinalStage valid(Optional<Boolean> valid) {
            this.valid = valid;
            return this;
        }

        @Override
        public _FinalStage versionId(VersionId versionId) {
            this.versionId = Optional.of(versionId);
            return this;
        }

        @Override
        @JsonSetter(value = "versionId", nulls = Nulls.SKIP)
        public _FinalStage versionId(Optional<VersionId> versionId) {
            this.versionId = versionId;
            return this;
        }

        @Override
        public RecordBase build() {
            return new RecordBase(id, versionId, valid, messages, metadata, additionalProperties);
        }
    }
}
