/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.RecordId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DeleteRecordsRequest.Builder.class)
public final class DeleteRecordsRequest {
    private final RecordId ids;

    private final Map<String, Object> additionalProperties;

    private DeleteRecordsRequest(RecordId ids, Map<String, Object> additionalProperties) {
        this.ids = ids;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A list of record IDs to delete. Maximum of 100 allowed.
     */
    @JsonProperty("ids")
    public RecordId getIds() {
        return ids;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteRecordsRequest && equalTo((DeleteRecordsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteRecordsRequest other) {
        return ids.equals(other.ids);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ids);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdsStage builder() {
        return new Builder();
    }

    public interface IdsStage {
        _FinalStage ids(RecordId ids);

        Builder from(DeleteRecordsRequest other);
    }

    public interface _FinalStage {
        DeleteRecordsRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdsStage, _FinalStage {
        private RecordId ids;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeleteRecordsRequest other) {
            ids(other.getIds());
            return this;
        }

        /**
         * <p>A list of record IDs to delete. Maximum of 100 allowed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ids")
        public _FinalStage ids(RecordId ids) {
            this.ids = ids;
            return this;
        }

        @java.lang.Override
        public DeleteRecordsRequest build() {
            return new DeleteRecordsRequest(ids, additionalProperties);
        }
    }
}
