/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records;

import com.flatfile.api.core.ApiError;
import com.flatfile.api.core.ClientOptions;
import com.flatfile.api.core.MediaTypes;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.core.RequestOptions;
import com.flatfile.api.resources.commons.types.SheetId;
import com.flatfile.api.resources.commons.types.Success;
import com.flatfile.api.resources.records.requests.DeleteRecordsRequest;
import com.flatfile.api.resources.records.requests.FindAndReplaceRecordRequest;
import com.flatfile.api.resources.records.requests.GetRecordsRequest;
import com.flatfile.api.resources.records.types.GetRecordsResponse;
import com.flatfile.api.resources.records.types.RecordData;
import com.flatfile.api.resources.records.types.Records;
import com.flatfile.api.resources.records.types.RecordsResponse;
import com.flatfile.api.resources.versions.types.VersionResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class RecordsClient {
    protected final ClientOptions clientOptions;

    public RecordsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns records from a sheet in a workbook
     */
    public GetRecordsResponse get(SheetId sheetId) {
        return get(sheetId, GetRecordsRequest.builder().build());
    }

    /**
     * Returns records from a sheet in a workbook
     */
    public GetRecordsResponse get(SheetId sheetId, GetRecordsRequest request) {
        return get(sheetId, request, null);
    }

    /**
     * Returns records from a sheet in a workbook
     */
    public GetRecordsResponse get(SheetId sheetId, GetRecordsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sheets")
                .addPathSegment(sheetId.toString())
                .addPathSegments("records");
        if (request.getVersionId().isPresent()) {
            httpUrl.addQueryParameter("versionId", request.getVersionId().get().toString());
        }
        if (request.getCommitId().isPresent()) {
            httpUrl.addQueryParameter("commitId", request.getCommitId().get().toString());
        }
        if (request.getSinceVersionId().isPresent()) {
            httpUrl.addQueryParameter(
                    "sinceVersionId", request.getSinceVersionId().get().toString());
        }
        if (request.getSinceCommitId().isPresent()) {
            httpUrl.addQueryParameter(
                    "sinceCommitId", request.getSinceCommitId().get().toString());
        }
        if (request.getSortField().isPresent()) {
            httpUrl.addQueryParameter("sortField", request.getSortField().get().toString());
        }
        if (request.getSortDirection().isPresent()) {
            httpUrl.addQueryParameter(
                    "sortDirection", request.getSortDirection().get().toString());
        }
        if (request.getFilter().isPresent()) {
            httpUrl.addQueryParameter("filter", request.getFilter().get().toString());
        }
        if (request.getFilterField().isPresent()) {
            httpUrl.addQueryParameter(
                    "filterField", request.getFilterField().get().toString());
        }
        if (request.getSearchValue().isPresent()) {
            httpUrl.addQueryParameter(
                    "searchValue", request.getSearchValue().get().toString());
        }
        if (request.getSearchField().isPresent()) {
            httpUrl.addQueryParameter(
                    "searchField", request.getSearchField().get().toString());
        }
        if (request.getIds().isPresent()) {
            httpUrl.addQueryParameter("ids", request.getIds().get().toString());
        }
        if (request.getPageSize().isPresent()) {
            httpUrl.addQueryParameter("pageSize", request.getPageSize().get().toString());
        }
        if (request.getPageNumber().isPresent()) {
            httpUrl.addQueryParameter(
                    "pageNumber", request.getPageNumber().get().toString());
        }
        if (request.getIncludeCounts().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeCounts", request.getIncludeCounts().get().toString());
        }
        if (request.getIncludeLength().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeLength", request.getIncludeLength().get().toString());
        }
        if (request.getIncludeLinks().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeLinks", request.getIncludeLinks().get().toString());
        }
        if (request.getIncludeMessages().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeMessages", request.getIncludeMessages().get().toString());
        }
        if (request.getFields().isPresent()) {
            httpUrl.addQueryParameter("fields", request.getFields().get());
        }
        if (request.getFor().isPresent()) {
            httpUrl.addQueryParameter("for", request.getFor().get().toString());
        }
        if (request.getQ().isPresent()) {
            httpUrl.addQueryParameter("q", request.getQ().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), GetRecordsResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates existing records in a workbook sheet
     */
    public VersionResponse update(SheetId sheetId, Records request) {
        return update(sheetId, request, null);
    }

    /**
     * Updates existing records in a workbook sheet
     */
    public VersionResponse update(SheetId sheetId, Records request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sheets")
                .addPathSegment(sheetId.toString())
                .addPathSegments("records")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), VersionResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Adds records to a workbook sheet
     */
    public RecordsResponse insert(SheetId sheetId, List<RecordData> request) {
        return insert(sheetId, request, null);
    }

    /**
     * Adds records to a workbook sheet
     */
    public RecordsResponse insert(SheetId sheetId, List<RecordData> request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sheets")
                .addPathSegment(sheetId.toString())
                .addPathSegments("records")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), RecordsResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes records from a workbook sheet
     */
    public Success delete(SheetId sheetId, DeleteRecordsRequest request) {
        return delete(sheetId, request, null);
    }

    /**
     * Deletes records from a workbook sheet
     */
    public Success delete(SheetId sheetId, DeleteRecordsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sheets")
                .addPathSegment(sheetId.toString())
                .addPathSegments("records");
        httpUrl.addQueryParameter("ids", request.getIds().toString());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Success.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Searches for all values that match the 'find' value (globally or for a specific field via 'fieldKey') and replaces them with the 'replace' value. Wrap 'find' value in double quotes for exact match (&quot;&quot;). Returns a commitId for the updated records
     */
    public VersionResponse findAndReplace(SheetId sheetId, FindAndReplaceRecordRequest request) {
        return findAndReplace(sheetId, request, null);
    }

    /**
     * Searches for all values that match the 'find' value (globally or for a specific field via 'fieldKey') and replaces them with the 'replace' value. Wrap 'find' value in double quotes for exact match (&quot;&quot;). Returns a commitId for the updated records
     */
    public VersionResponse findAndReplace(
            SheetId sheetId, FindAndReplaceRecordRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sheets")
                .addPathSegment(sheetId.toString())
                .addPathSegments("find-replace");
        if (request.getFilter().isPresent()) {
            httpUrl.addQueryParameter("filter", request.getFilter().get().toString());
        }
        if (request.getFilterField().isPresent()) {
            httpUrl.addQueryParameter(
                    "filterField", request.getFilterField().get().toString());
        }
        if (request.getSearchValue().isPresent()) {
            httpUrl.addQueryParameter(
                    "searchValue", request.getSearchValue().get().toString());
        }
        if (request.getSearchField().isPresent()) {
            httpUrl.addQueryParameter(
                    "searchField", request.getSearchField().get().toString());
        }
        if (request.getIds().isPresent()) {
            httpUrl.addQueryParameter("ids", request.getIds().get().toString());
        }
        if (request.getQ().isPresent()) {
            httpUrl.addQueryParameter("q", request.getQ().get());
        }
        Map<String, Object> properties = new HashMap<>();
        if (request.getFind().isPresent()) {
            properties.put("find", request.getFind());
        }
        if (request.getReplace().isPresent()) {
            properties.put("replace", request.getReplace());
        }
        properties.put("fieldKey", request.getFieldKey());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), VersionResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
