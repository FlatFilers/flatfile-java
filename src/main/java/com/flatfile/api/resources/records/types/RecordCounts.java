/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RecordCounts.Builder.class)
public final class RecordCounts {
    private final int total;

    private final int valid;

    private final int error;

    private final Optional<Map<String, Integer>> errorsByField;

    private final Optional<Map<String, FieldRecordCounts>> byField;

    private final Map<String, Object> additionalProperties;

    private RecordCounts(
            int total,
            int valid,
            int error,
            Optional<Map<String, Integer>> errorsByField,
            Optional<Map<String, FieldRecordCounts>> byField,
            Map<String, Object> additionalProperties) {
        this.total = total;
        this.valid = valid;
        this.error = error;
        this.errorsByField = errorsByField;
        this.byField = byField;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("total")
    public int getTotal() {
        return total;
    }

    @JsonProperty("valid")
    public int getValid() {
        return valid;
    }

    @JsonProperty("error")
    public int getError() {
        return error;
    }

    @JsonProperty("errorsByField")
    public Optional<Map<String, Integer>> getErrorsByField() {
        return errorsByField;
    }

    /**
     * @return Counts for valid, error, and total records grouped by field key
     */
    @JsonProperty("byField")
    public Optional<Map<String, FieldRecordCounts>> getByField() {
        return byField;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RecordCounts && equalTo((RecordCounts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RecordCounts other) {
        return total == other.total
                && valid == other.valid
                && error == other.error
                && errorsByField.equals(other.errorsByField)
                && byField.equals(other.byField);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.total, this.valid, this.error, this.errorsByField, this.byField);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalStage builder() {
        return new Builder();
    }

    public interface TotalStage {
        ValidStage total(int total);

        Builder from(RecordCounts other);
    }

    public interface ValidStage {
        ErrorStage valid(int valid);
    }

    public interface ErrorStage {
        _FinalStage error(int error);
    }

    public interface _FinalStage {
        RecordCounts build();

        _FinalStage errorsByField(Optional<Map<String, Integer>> errorsByField);

        _FinalStage errorsByField(Map<String, Integer> errorsByField);

        _FinalStage byField(Optional<Map<String, FieldRecordCounts>> byField);

        _FinalStage byField(Map<String, FieldRecordCounts> byField);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalStage, ValidStage, ErrorStage, _FinalStage {
        private int total;

        private int valid;

        private int error;

        private Optional<Map<String, FieldRecordCounts>> byField = Optional.empty();

        private Optional<Map<String, Integer>> errorsByField = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RecordCounts other) {
            total(other.getTotal());
            valid(other.getValid());
            error(other.getError());
            errorsByField(other.getErrorsByField());
            byField(other.getByField());
            return this;
        }

        @java.lang.Override
        @JsonSetter("total")
        public ValidStage total(int total) {
            this.total = total;
            return this;
        }

        @java.lang.Override
        @JsonSetter("valid")
        public ErrorStage valid(int valid) {
            this.valid = valid;
            return this;
        }

        @java.lang.Override
        @JsonSetter("error")
        public _FinalStage error(int error) {
            this.error = error;
            return this;
        }

        /**
         * <p>Counts for valid, error, and total records grouped by field key</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage byField(Map<String, FieldRecordCounts> byField) {
            this.byField = Optional.ofNullable(byField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "byField", nulls = Nulls.SKIP)
        public _FinalStage byField(Optional<Map<String, FieldRecordCounts>> byField) {
            this.byField = byField;
            return this;
        }

        @java.lang.Override
        public _FinalStage errorsByField(Map<String, Integer> errorsByField) {
            this.errorsByField = Optional.ofNullable(errorsByField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "errorsByField", nulls = Nulls.SKIP)
        public _FinalStage errorsByField(Optional<Map<String, Integer>> errorsByField) {
            this.errorsByField = errorsByField;
            return this;
        }

        @java.lang.Override
        public RecordCounts build() {
            return new RecordCounts(total, valid, error, errorsByField, byField, additionalProperties);
        }
    }
}
