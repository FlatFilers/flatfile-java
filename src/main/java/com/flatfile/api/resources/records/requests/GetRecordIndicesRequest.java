/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.records.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.CommitId;
import com.flatfile.api.resources.commons.types.Filter;
import com.flatfile.api.resources.commons.types.FilterField;
import com.flatfile.api.resources.commons.types.RecordId;
import com.flatfile.api.resources.commons.types.SearchField;
import com.flatfile.api.resources.commons.types.SearchValue;
import com.flatfile.api.resources.commons.types.SortDirection;
import com.flatfile.api.resources.commons.types.SortField;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetRecordIndicesRequest.Builder.class)
public final class GetRecordIndicesRequest {
    private final Optional<CommitId> commitId;

    private final Optional<CommitId> sinceCommitId;

    private final Optional<SortField> sortField;

    private final Optional<SortDirection> sortDirection;

    private final Optional<Filter> filter;

    private final Optional<FilterField> filterField;

    private final Optional<SearchValue> searchValue;

    private final Optional<SearchField> searchField;

    private final RecordId ids;

    private final Optional<String> q;

    private final Map<String, Object> additionalProperties;

    private GetRecordIndicesRequest(
            Optional<CommitId> commitId,
            Optional<CommitId> sinceCommitId,
            Optional<SortField> sortField,
            Optional<SortDirection> sortDirection,
            Optional<Filter> filter,
            Optional<FilterField> filterField,
            Optional<SearchValue> searchValue,
            Optional<SearchField> searchField,
            RecordId ids,
            Optional<String> q,
            Map<String, Object> additionalProperties) {
        this.commitId = commitId;
        this.sinceCommitId = sinceCommitId;
        this.sortField = sortField;
        this.sortDirection = sortDirection;
        this.filter = filter;
        this.filterField = filterField;
        this.searchValue = searchValue;
        this.searchField = searchField;
        this.ids = ids;
        this.q = q;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("commitId")
    public Optional<CommitId> getCommitId() {
        return commitId;
    }

    @JsonProperty("sinceCommitId")
    public Optional<CommitId> getSinceCommitId() {
        return sinceCommitId;
    }

    @JsonProperty("sortField")
    public Optional<SortField> getSortField() {
        return sortField;
    }

    @JsonProperty("sortDirection")
    public Optional<SortDirection> getSortDirection() {
        return sortDirection;
    }

    @JsonProperty("filter")
    public Optional<Filter> getFilter() {
        return filter;
    }

    /**
     * @return Name of field by which to filter records
     */
    @JsonProperty("filterField")
    public Optional<FilterField> getFilterField() {
        return filterField;
    }

    @JsonProperty("searchValue")
    public Optional<SearchValue> getSearchValue() {
        return searchValue;
    }

    @JsonProperty("searchField")
    public Optional<SearchField> getSearchField() {
        return searchField;
    }

    /**
     * @return List of record IDs to include in the query. Limit 100.
     */
    @JsonProperty("ids")
    public RecordId getIds() {
        return ids;
    }

    /**
     * @return An FFQL query used to filter the result set
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetRecordIndicesRequest && equalTo((GetRecordIndicesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetRecordIndicesRequest other) {
        return commitId.equals(other.commitId)
                && sinceCommitId.equals(other.sinceCommitId)
                && sortField.equals(other.sortField)
                && sortDirection.equals(other.sortDirection)
                && filter.equals(other.filter)
                && filterField.equals(other.filterField)
                && searchValue.equals(other.searchValue)
                && searchField.equals(other.searchField)
                && ids.equals(other.ids)
                && q.equals(other.q);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.commitId,
                this.sinceCommitId,
                this.sortField,
                this.sortDirection,
                this.filter,
                this.filterField,
                this.searchValue,
                this.searchField,
                this.ids,
                this.q);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdsStage builder() {
        return new Builder();
    }

    public interface IdsStage {
        _FinalStage ids(@NotNull RecordId ids);

        Builder from(GetRecordIndicesRequest other);
    }

    public interface _FinalStage {
        GetRecordIndicesRequest build();

        _FinalStage commitId(Optional<CommitId> commitId);

        _FinalStage commitId(CommitId commitId);

        _FinalStage sinceCommitId(Optional<CommitId> sinceCommitId);

        _FinalStage sinceCommitId(CommitId sinceCommitId);

        _FinalStage sortField(Optional<SortField> sortField);

        _FinalStage sortField(SortField sortField);

        _FinalStage sortDirection(Optional<SortDirection> sortDirection);

        _FinalStage sortDirection(SortDirection sortDirection);

        _FinalStage filter(Optional<Filter> filter);

        _FinalStage filter(Filter filter);

        _FinalStage filterField(Optional<FilterField> filterField);

        _FinalStage filterField(FilterField filterField);

        _FinalStage searchValue(Optional<SearchValue> searchValue);

        _FinalStage searchValue(SearchValue searchValue);

        _FinalStage searchField(Optional<SearchField> searchField);

        _FinalStage searchField(SearchField searchField);

        _FinalStage q(Optional<String> q);

        _FinalStage q(String q);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdsStage, _FinalStage {
        private RecordId ids;

        private Optional<String> q = Optional.empty();

        private Optional<SearchField> searchField = Optional.empty();

        private Optional<SearchValue> searchValue = Optional.empty();

        private Optional<FilterField> filterField = Optional.empty();

        private Optional<Filter> filter = Optional.empty();

        private Optional<SortDirection> sortDirection = Optional.empty();

        private Optional<SortField> sortField = Optional.empty();

        private Optional<CommitId> sinceCommitId = Optional.empty();

        private Optional<CommitId> commitId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GetRecordIndicesRequest other) {
            commitId(other.getCommitId());
            sinceCommitId(other.getSinceCommitId());
            sortField(other.getSortField());
            sortDirection(other.getSortDirection());
            filter(other.getFilter());
            filterField(other.getFilterField());
            searchValue(other.getSearchValue());
            searchField(other.getSearchField());
            ids(other.getIds());
            q(other.getQ());
            return this;
        }

        /**
         * <p>List of record IDs to include in the query. Limit 100.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ids")
        public _FinalStage ids(@NotNull RecordId ids) {
            this.ids = Objects.requireNonNull(ids, "ids must not be null");
            return this;
        }

        /**
         * <p>An FFQL query used to filter the result set</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage q(String q) {
            this.q = Optional.ofNullable(q);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public _FinalStage q(Optional<String> q) {
            this.q = q;
            return this;
        }

        @java.lang.Override
        public _FinalStage searchField(SearchField searchField) {
            this.searchField = Optional.ofNullable(searchField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "searchField", nulls = Nulls.SKIP)
        public _FinalStage searchField(Optional<SearchField> searchField) {
            this.searchField = searchField;
            return this;
        }

        @java.lang.Override
        public _FinalStage searchValue(SearchValue searchValue) {
            this.searchValue = Optional.ofNullable(searchValue);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "searchValue", nulls = Nulls.SKIP)
        public _FinalStage searchValue(Optional<SearchValue> searchValue) {
            this.searchValue = searchValue;
            return this;
        }

        /**
         * <p>Name of field by which to filter records</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage filterField(FilterField filterField) {
            this.filterField = Optional.ofNullable(filterField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filterField", nulls = Nulls.SKIP)
        public _FinalStage filterField(Optional<FilterField> filterField) {
            this.filterField = filterField;
            return this;
        }

        @java.lang.Override
        public _FinalStage filter(Filter filter) {
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public _FinalStage filter(Optional<Filter> filter) {
            this.filter = filter;
            return this;
        }

        @java.lang.Override
        public _FinalStage sortDirection(SortDirection sortDirection) {
            this.sortDirection = Optional.ofNullable(sortDirection);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sortDirection", nulls = Nulls.SKIP)
        public _FinalStage sortDirection(Optional<SortDirection> sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }

        @java.lang.Override
        public _FinalStage sortField(SortField sortField) {
            this.sortField = Optional.ofNullable(sortField);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sortField", nulls = Nulls.SKIP)
        public _FinalStage sortField(Optional<SortField> sortField) {
            this.sortField = sortField;
            return this;
        }

        @java.lang.Override
        public _FinalStage sinceCommitId(CommitId sinceCommitId) {
            this.sinceCommitId = Optional.ofNullable(sinceCommitId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sinceCommitId", nulls = Nulls.SKIP)
        public _FinalStage sinceCommitId(Optional<CommitId> sinceCommitId) {
            this.sinceCommitId = sinceCommitId;
            return this;
        }

        @java.lang.Override
        public _FinalStage commitId(CommitId commitId) {
            this.commitId = Optional.ofNullable(commitId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "commitId", nulls = Nulls.SKIP)
        public _FinalStage commitId(Optional<CommitId> commitId) {
            this.commitId = commitId;
            return this;
        }

        @java.lang.Override
        public GetRecordIndicesRequest build() {
            return new GetRecordIndicesRequest(
                    commitId,
                    sinceCommitId,
                    sortField,
                    sortDirection,
                    filter,
                    filterField,
                    searchValue,
                    searchField,
                    ids,
                    q,
                    additionalProperties);
        }
    }
}
