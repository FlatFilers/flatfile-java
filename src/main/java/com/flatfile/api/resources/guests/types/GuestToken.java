/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.guests.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GuestToken.Builder.class)
public final class GuestToken {
    private final String token;

    private final boolean valid;

    private final Map<String, Object> additionalProperties;

    private GuestToken(String token, boolean valid, Map<String, Object> additionalProperties) {
        this.token = token;
        this.valid = valid;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The token used to authenticate the guest
     */
    @JsonProperty("token")
    public String getToken() {
        return token;
    }

    @JsonProperty("valid")
    public boolean getValid() {
        return valid;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GuestToken && equalTo((GuestToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GuestToken other) {
        return token.equals(other.token) && valid == other.valid;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.token, this.valid);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TokenStage builder() {
        return new Builder();
    }

    public interface TokenStage {
        ValidStage token(String token);

        Builder from(GuestToken other);
    }

    public interface ValidStage {
        _FinalStage valid(boolean valid);
    }

    public interface _FinalStage {
        GuestToken build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TokenStage, ValidStage, _FinalStage {
        private String token;

        private boolean valid;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(GuestToken other) {
            token(other.getToken());
            valid(other.getValid());
            return this;
        }

        /**
         * <p>The token used to authenticate the guest</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("token")
        public ValidStage token(String token) {
            this.token = token;
            return this;
        }

        @Override
        @JsonSetter("valid")
        public _FinalStage valid(boolean valid) {
            this.valid = valid;
            return this;
        }

        @Override
        public GuestToken build() {
            return new GuestToken(token, valid, additionalProperties);
        }
    }
}
