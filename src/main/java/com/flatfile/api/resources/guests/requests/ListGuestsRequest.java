/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.guests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SpaceId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListGuestsRequest.Builder.class)
public final class ListGuestsRequest {
    private final SpaceId spaceId;

    private final Optional<String> email;

    private final Map<String, Object> additionalProperties;

    private ListGuestsRequest(SpaceId spaceId, Optional<String> email, Map<String, Object> additionalProperties) {
        this.spaceId = spaceId;
        this.email = email;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID of space to return
     */
    @JsonProperty("spaceId")
    public SpaceId getSpaceId() {
        return spaceId;
    }

    /**
     * @return Email of guest to return
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListGuestsRequest && equalTo((ListGuestsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListGuestsRequest other) {
        return spaceId.equals(other.spaceId) && email.equals(other.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.spaceId, this.email);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SpaceIdStage builder() {
        return new Builder();
    }

    public interface SpaceIdStage {
        _FinalStage spaceId(SpaceId spaceId);

        Builder from(ListGuestsRequest other);
    }

    public interface _FinalStage {
        ListGuestsRequest build();

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SpaceIdStage, _FinalStage {
        private SpaceId spaceId;

        private Optional<String> email = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ListGuestsRequest other) {
            spaceId(other.getSpaceId());
            email(other.getEmail());
            return this;
        }

        /**
         * <p>ID of space to return</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("spaceId")
        public _FinalStage spaceId(SpaceId spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        /**
         * <p>Email of guest to return</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @Override
        public ListGuestsRequest build() {
            return new ListGuestsRequest(spaceId, email, additionalProperties);
        }
    }
}
