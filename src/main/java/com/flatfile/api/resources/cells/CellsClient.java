/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.cells;

import com.flatfile.api.core.ApiError;
import com.flatfile.api.core.ClientOptions;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.core.RequestOptions;
import com.flatfile.api.resources.cells.requests.GetFieldValuesRequestDeprecated;
import com.flatfile.api.resources.cells.types.CellsResponseDeprecated;
import com.flatfile.api.resources.commons.types.SheetId;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

public class CellsClient {
    protected final ClientOptions clientOptions;

    public CellsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns record cell values grouped by all fields in the sheet
     */
    public CellsResponseDeprecated getValues(SheetId sheetId) {
        return getValues(sheetId, GetFieldValuesRequestDeprecated.builder().build());
    }

    /**
     * Returns record cell values grouped by all fields in the sheet
     */
    public CellsResponseDeprecated getValues(
            SheetId sheetId, GetFieldValuesRequestDeprecated request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sheets")
                .addPathSegment(sheetId.toString())
                .addPathSegments("cells");
        if (request.getFieldKey().isPresent()) {
            httpUrl.addQueryParameter("fieldKey", request.getFieldKey().get().toString());
        }
        if (request.getSortField().isPresent()) {
            httpUrl.addQueryParameter("sortField", request.getSortField().get().toString());
        }
        if (request.getSortDirection().isPresent()) {
            httpUrl.addQueryParameter(
                    "sortDirection", request.getSortDirection().get().toString());
        }
        if (request.getFilter().isPresent()) {
            httpUrl.addQueryParameter("filter", request.getFilter().get().toString());
        }
        if (request.getFilterField().isPresent()) {
            httpUrl.addQueryParameter(
                    "filterField", request.getFilterField().get().toString());
        }
        if (request.getPageSize().isPresent()) {
            httpUrl.addQueryParameter("pageSize", request.getPageSize().get().toString());
        }
        if (request.getPageNumber().isPresent()) {
            httpUrl.addQueryParameter(
                    "pageNumber", request.getPageNumber().get().toString());
        }
        if (request.getDistinct().isPresent()) {
            httpUrl.addQueryParameter("distinct", request.getDistinct().get().toString());
        }
        if (request.getIncludeCounts().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeCounts", request.getIncludeCounts().get().toString());
        }
        if (request.getSearchValue().isPresent()) {
            httpUrl.addQueryParameter(
                    "searchValue", request.getSearchValue().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), CellsResponseDeprecated.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns record cell values grouped by all fields in the sheet
     */
    public CellsResponseDeprecated getValues(SheetId sheetId, GetFieldValuesRequestDeprecated request) {
        return getValues(sheetId, request, null);
    }
}
