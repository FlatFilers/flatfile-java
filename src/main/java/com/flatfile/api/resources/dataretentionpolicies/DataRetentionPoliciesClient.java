/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.dataretentionpolicies;

import com.flatfile.api.core.ApiError;
import com.flatfile.api.core.ClientOptions;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.core.RequestOptions;
import com.flatfile.api.resources.commons.types.DataRetentionPolicyId;
import com.flatfile.api.resources.commons.types.Success;
import com.flatfile.api.resources.dataretentionpolicies.requests.ListDataRetentionPoliciesRequest;
import com.flatfile.api.resources.dataretentionpolicies.types.DataRetentionPolicyConfig;
import com.flatfile.api.resources.dataretentionpolicies.types.DataRetentionPolicyResponse;
import com.flatfile.api.resources.dataretentionpolicies.types.ListDataRetentionPoliciesResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class DataRetentionPoliciesClient {
    protected final ClientOptions clientOptions;

    public DataRetentionPoliciesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns all data retention policies on an account matching a filter for environmentId
     */
    public ListDataRetentionPoliciesResponse list() {
        return list(ListDataRetentionPoliciesRequest.builder().build());
    }

    /**
     * Returns all data retention policies on an account matching a filter for environmentId
     */
    public ListDataRetentionPoliciesResponse list(
            ListDataRetentionPoliciesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("data-retention-policies");
        if (request.getEnvironmentId().isPresent()) {
            httpUrl.addQueryParameter(
                    "environmentId", request.getEnvironmentId().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), ListDataRetentionPoliciesResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns all data retention policies on an account matching a filter for environmentId
     */
    public ListDataRetentionPoliciesResponse list(ListDataRetentionPoliciesRequest request) {
        return list(request, null);
    }

    /**
     * Add a new data retention policy to the space
     */
    public DataRetentionPolicyResponse create(DataRetentionPolicyConfig request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("data-retention-policies")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), DataRetentionPolicyResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Add a new data retention policy to the space
     */
    public DataRetentionPolicyResponse create(DataRetentionPolicyConfig request) {
        return create(request, null);
    }

    /**
     * Returns a single data retention policy
     */
    public DataRetentionPolicyResponse get(DataRetentionPolicyId id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("data-retention-policies")
                .addPathSegment(id.toString())
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), DataRetentionPolicyResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns a single data retention policy
     */
    public DataRetentionPolicyResponse get(DataRetentionPolicyId id) {
        return get(id, null);
    }

    /**
     * Updates a single data retention policy
     */
    public DataRetentionPolicyResponse update(
            DataRetentionPolicyId id, DataRetentionPolicyConfig request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("data-retention-policies")
                .addPathSegment(id.toString())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), DataRetentionPolicyResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates a single data retention policy
     */
    public DataRetentionPolicyResponse update(DataRetentionPolicyId id, DataRetentionPolicyConfig request) {
        return update(id, request, null);
    }

    /**
     * Deletes a single data retention policy
     */
    public Success delete(DataRetentionPolicyId id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("data-retention-policies")
                .addPathSegment(id.toString())
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Success.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes a single data retention policy
     */
    public Success delete(DataRetentionPolicyId id) {
        return delete(id, null);
    }
}
