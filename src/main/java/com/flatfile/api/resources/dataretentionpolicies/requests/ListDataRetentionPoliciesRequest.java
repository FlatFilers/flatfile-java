/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.dataretentionpolicies.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListDataRetentionPoliciesRequest.Builder.class)
public final class ListDataRetentionPoliciesRequest {
    private final Optional<EnvironmentId> environmentId;

    private final Map<String, Object> additionalProperties;

    private ListDataRetentionPoliciesRequest(
            Optional<EnvironmentId> environmentId, Map<String, Object> additionalProperties) {
        this.environmentId = environmentId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The associated Environment ID of the policy.
     */
    @JsonProperty("environmentId")
    public Optional<EnvironmentId> getEnvironmentId() {
        return environmentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListDataRetentionPoliciesRequest && equalTo((ListDataRetentionPoliciesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListDataRetentionPoliciesRequest other) {
        return environmentId.equals(other.environmentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.environmentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<EnvironmentId> environmentId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListDataRetentionPoliciesRequest other) {
            environmentId(other.getEnvironmentId());
            return this;
        }

        @JsonSetter(value = "environmentId", nulls = Nulls.SKIP)
        public Builder environmentId(Optional<EnvironmentId> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(EnvironmentId environmentId) {
            this.environmentId = Optional.ofNullable(environmentId);
            return this;
        }

        public ListDataRetentionPoliciesRequest build() {
            return new ListDataRetentionPoliciesRequest(environmentId, additionalProperties);
        }
    }
}
