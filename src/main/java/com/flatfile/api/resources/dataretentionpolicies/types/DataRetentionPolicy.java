/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.dataretentionpolicies.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.DataRetentionPolicyId;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DataRetentionPolicy.Builder.class)
public final class DataRetentionPolicy implements IDataRetentionPolicyConfig {
    private final DataRetentionPolicyEnum type;

    private final int period;

    private final EnvironmentId environmentId;

    private final DataRetentionPolicyId id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private DataRetentionPolicy(
            DataRetentionPolicyEnum type,
            int period,
            EnvironmentId environmentId,
            DataRetentionPolicyId id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.period = period;
        this.environmentId = environmentId;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    @java.lang.Override
    public DataRetentionPolicyEnum getType() {
        return type;
    }

    @JsonProperty("period")
    @java.lang.Override
    public int getPeriod() {
        return period;
    }

    @JsonProperty("environmentId")
    @java.lang.Override
    public EnvironmentId getEnvironmentId() {
        return environmentId;
    }

    @JsonProperty("id")
    public DataRetentionPolicyId getId() {
        return id;
    }

    /**
     * @return Date the policy was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Date the policy was last updated
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DataRetentionPolicy && equalTo((DataRetentionPolicy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DataRetentionPolicy other) {
        return type.equals(other.type)
                && period == other.period
                && environmentId.equals(other.environmentId)
                && id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.period, this.environmentId, this.id, this.createdAt, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        PeriodStage type(@NotNull DataRetentionPolicyEnum type);

        Builder from(DataRetentionPolicy other);
    }

    public interface PeriodStage {
        EnvironmentIdStage period(int period);
    }

    public interface EnvironmentIdStage {
        IdStage environmentId(@NotNull EnvironmentId environmentId);
    }

    public interface IdStage {
        CreatedAtStage id(@NotNull DataRetentionPolicyId id);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        DataRetentionPolicy build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage,
                    PeriodStage,
                    EnvironmentIdStage,
                    IdStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private DataRetentionPolicyEnum type;

        private int period;

        private EnvironmentId environmentId;

        private DataRetentionPolicyId id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DataRetentionPolicy other) {
            type(other.getType());
            period(other.getPeriod());
            environmentId(other.getEnvironmentId());
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public PeriodStage type(@NotNull DataRetentionPolicyEnum type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("period")
        public EnvironmentIdStage period(int period) {
            this.period = period;
            return this;
        }

        @java.lang.Override
        @JsonSetter("environmentId")
        public IdStage environmentId(@NotNull EnvironmentId environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId, "environmentId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(@NotNull DataRetentionPolicyId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Date the policy was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>Date the policy was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public DataRetentionPolicy build() {
            return new DataRetentionPolicy(type, period, environmentId, id, createdAt, updatedAt, additionalProperties);
        }
    }
}
