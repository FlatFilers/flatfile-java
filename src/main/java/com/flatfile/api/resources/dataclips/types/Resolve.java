/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.dataclips.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Resolve.Builder.class)
public final class Resolve {
    private final Optional<String> field;

    private final Optional<ResolveType> type;

    private final Optional<ResolveTo> resolveTo;

    private final Map<String, Object> additionalProperties;

    private Resolve(
            Optional<String> field,
            Optional<ResolveType> type,
            Optional<ResolveTo> resolveTo,
            Map<String, Object> additionalProperties) {
        this.field = field;
        this.type = type;
        this.resolveTo = resolveTo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("field")
    public Optional<String> getField() {
        return field;
    }

    @JsonProperty("type")
    public Optional<ResolveType> getType() {
        return type;
    }

    @JsonProperty("resolveTo")
    public Optional<ResolveTo> getResolveTo() {
        return resolveTo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Resolve && equalTo((Resolve) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Resolve other) {
        return field.equals(other.field) && type.equals(other.type) && resolveTo.equals(other.resolveTo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.field, this.type, this.resolveTo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> field = Optional.empty();

        private Optional<ResolveType> type = Optional.empty();

        private Optional<ResolveTo> resolveTo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Resolve other) {
            field(other.getField());
            type(other.getType());
            resolveTo(other.getResolveTo());
            return this;
        }

        @JsonSetter(value = "field", nulls = Nulls.SKIP)
        public Builder field(Optional<String> field) {
            this.field = field;
            return this;
        }

        public Builder field(String field) {
            this.field = Optional.ofNullable(field);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<ResolveType> type) {
            this.type = type;
            return this;
        }

        public Builder type(ResolveType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "resolveTo", nulls = Nulls.SKIP)
        public Builder resolveTo(Optional<ResolveTo> resolveTo) {
            this.resolveTo = resolveTo;
            return this;
        }

        public Builder resolveTo(ResolveTo resolveTo) {
            this.resolveTo = Optional.ofNullable(resolveTo);
            return this;
        }

        public Resolve build() {
            return new Resolve(field, type, resolveTo, additionalProperties);
        }
    }
}
