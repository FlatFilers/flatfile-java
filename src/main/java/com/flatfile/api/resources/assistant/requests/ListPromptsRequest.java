/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.assistant.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.assistant.types.PromptTypeQueryEnum;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListPromptsRequest.Builder.class)
public final class ListPromptsRequest {
    private final Optional<PromptTypeQueryEnum> promptType;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> pageNumber;

    private final Map<String, Object> additionalProperties;

    private ListPromptsRequest(
            Optional<PromptTypeQueryEnum> promptType,
            Optional<Integer> pageSize,
            Optional<Integer> pageNumber,
            Map<String, Object> additionalProperties) {
        this.promptType = promptType;
        this.pageSize = pageSize;
        this.pageNumber = pageNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Type of prompt (default AI_ASSIST)
     */
    @JsonProperty("promptType")
    public Optional<PromptTypeQueryEnum> getPromptType() {
        return promptType;
    }

    /**
     * @return Number of prompts to return in a page (default 7)
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Based on pageSize, which page of prompts to return
     */
    @JsonProperty("pageNumber")
    public Optional<Integer> getPageNumber() {
        return pageNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListPromptsRequest && equalTo((ListPromptsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListPromptsRequest other) {
        return promptType.equals(other.promptType)
                && pageSize.equals(other.pageSize)
                && pageNumber.equals(other.pageNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.promptType, this.pageSize, this.pageNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PromptTypeQueryEnum> promptType = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> pageNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListPromptsRequest other) {
            promptType(other.getPromptType());
            pageSize(other.getPageSize());
            pageNumber(other.getPageNumber());
            return this;
        }

        @JsonSetter(value = "promptType", nulls = Nulls.SKIP)
        public Builder promptType(Optional<PromptTypeQueryEnum> promptType) {
            this.promptType = promptType;
            return this;
        }

        public Builder promptType(PromptTypeQueryEnum promptType) {
            this.promptType = Optional.ofNullable(promptType);
            return this;
        }

        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "pageNumber", nulls = Nulls.SKIP)
        public Builder pageNumber(Optional<Integer> pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        public Builder pageNumber(Integer pageNumber) {
            this.pageNumber = Optional.ofNullable(pageNumber);
            return this;
        }

        public ListPromptsRequest build() {
            return new ListPromptsRequest(promptType, pageSize, pageNumber, additionalProperties);
        }
    }
}
