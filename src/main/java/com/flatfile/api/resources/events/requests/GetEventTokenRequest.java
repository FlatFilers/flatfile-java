/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.events.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GetEventTokenRequest.Builder.class)
public final class GetEventTokenRequest {
    private final Optional<String> spaceId;

    private final Optional<String> scope;

    private final Map<String, Object> additionalProperties;

    private GetEventTokenRequest(
            Optional<String> spaceId, Optional<String> scope, Map<String, Object> additionalProperties) {
        this.spaceId = spaceId;
        this.scope = scope;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The space id
     */
    @JsonProperty("spaceId")
    public Optional<String> getSpaceId() {
        return spaceId;
    }

    /**
     * @return The resource ID of the event stream (space or environment id)
     */
    @JsonProperty("scope")
    public Optional<String> getScope() {
        return scope;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetEventTokenRequest && equalTo((GetEventTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetEventTokenRequest other) {
        return spaceId.equals(other.spaceId) && scope.equals(other.scope);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.spaceId, this.scope);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> spaceId = Optional.empty();

        private Optional<String> scope = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetEventTokenRequest other) {
            spaceId(other.getSpaceId());
            scope(other.getScope());
            return this;
        }

        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public Builder spaceId(Optional<String> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        public Builder spaceId(String spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public Builder scope(Optional<String> scope) {
            this.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            this.scope = Optional.of(scope);
            return this;
        }

        public GetEventTokenRequest build() {
            return new GetEventTokenRequest(spaceId, scope, additionalProperties);
        }
    }
}
