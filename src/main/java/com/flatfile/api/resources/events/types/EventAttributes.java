/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EventAttributes.Builder.class)
public final class EventAttributes {
    private final Optional<OffsetDateTime> targetUpdatedAt;

    private final Optional<Progress> progress;

    private final Map<String, Object> additionalProperties;

    private EventAttributes(
            Optional<OffsetDateTime> targetUpdatedAt,
            Optional<Progress> progress,
            Map<String, Object> additionalProperties) {
        this.targetUpdatedAt = targetUpdatedAt;
        this.progress = progress;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Date the related entity was last updated
     */
    @JsonProperty("targetUpdatedAt")
    public Optional<OffsetDateTime> getTargetUpdatedAt() {
        return targetUpdatedAt;
    }

    /**
     * @return The progress of the event within a collection of iterable events
     */
    @JsonProperty("progress")
    public Optional<Progress> getProgress() {
        return progress;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EventAttributes && equalTo((EventAttributes) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EventAttributes other) {
        return targetUpdatedAt.equals(other.targetUpdatedAt) && progress.equals(other.progress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.targetUpdatedAt, this.progress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> targetUpdatedAt = Optional.empty();

        private Optional<Progress> progress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EventAttributes other) {
            targetUpdatedAt(other.getTargetUpdatedAt());
            progress(other.getProgress());
            return this;
        }

        @JsonSetter(value = "targetUpdatedAt", nulls = Nulls.SKIP)
        public Builder targetUpdatedAt(Optional<OffsetDateTime> targetUpdatedAt) {
            this.targetUpdatedAt = targetUpdatedAt;
            return this;
        }

        public Builder targetUpdatedAt(OffsetDateTime targetUpdatedAt) {
            this.targetUpdatedAt = Optional.of(targetUpdatedAt);
            return this;
        }

        @JsonSetter(value = "progress", nulls = Nulls.SKIP)
        public Builder progress(Optional<Progress> progress) {
            this.progress = progress;
            return this;
        }

        public Builder progress(Progress progress) {
            this.progress = Optional.of(progress);
            return this;
        }

        public EventAttributes build() {
            return new EventAttributes(targetUpdatedAt, progress, additionalProperties);
        }
    }
}
