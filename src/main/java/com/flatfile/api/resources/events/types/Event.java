/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class Event {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private Event(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static Event agentCreated(GenericEvent value) {
        return new Event(new AgentCreatedValue(value));
    }

    public static Event agentUpdated(GenericEvent value) {
        return new Event(new AgentUpdatedValue(value));
    }

    public static Event agentDeleted(GenericEvent value) {
        return new Event(new AgentDeletedValue(value));
    }

    public static Event spaceCreated(GenericEvent value) {
        return new Event(new SpaceCreatedValue(value));
    }

    public static Event spaceUpdated(GenericEvent value) {
        return new Event(new SpaceUpdatedValue(value));
    }

    public static Event spaceDeleted(GenericEvent value) {
        return new Event(new SpaceDeletedValue(value));
    }

    public static Event spaceArchived(GenericEvent value) {
        return new Event(new SpaceArchivedValue(value));
    }

    public static Event spaceExpired(GenericEvent value) {
        return new Event(new SpaceExpiredValue(value));
    }

    public static Event spaceGuestAdded(GenericEvent value) {
        return new Event(new SpaceGuestAddedValue(value));
    }

    public static Event spaceGuestRemoved(GenericEvent value) {
        return new Event(new SpaceGuestRemovedValue(value));
    }

    public static Event documentCreated(GenericEvent value) {
        return new Event(new DocumentCreatedValue(value));
    }

    public static Event documentUpdated(GenericEvent value) {
        return new Event(new DocumentUpdatedValue(value));
    }

    public static Event documentDeleted(GenericEvent value) {
        return new Event(new DocumentDeletedValue(value));
    }

    public static Event workbookCreated(GenericEvent value) {
        return new Event(new WorkbookCreatedValue(value));
    }

    public static Event workbookUpdated(GenericEvent value) {
        return new Event(new WorkbookUpdatedValue(value));
    }

    public static Event workbookDeleted(GenericEvent value) {
        return new Event(new WorkbookDeletedValue(value));
    }

    public static Event workbookExpired(GenericEvent value) {
        return new Event(new WorkbookExpiredValue(value));
    }

    public static Event sheetCreated(GenericEvent value) {
        return new Event(new SheetCreatedValue(value));
    }

    public static Event sheetUpdated(GenericEvent value) {
        return new Event(new SheetUpdatedValue(value));
    }

    public static Event sheetDeleted(GenericEvent value) {
        return new Event(new SheetDeletedValue(value));
    }

    public static Event snapshotCreated(GenericEvent value) {
        return new Event(new SnapshotCreatedValue(value));
    }

    public static Event recordsCreated(GenericEvent value) {
        return new Event(new RecordsCreatedValue(value));
    }

    public static Event recordsUpdated(GenericEvent value) {
        return new Event(new RecordsUpdatedValue(value));
    }

    public static Event recordsDeleted(GenericEvent value) {
        return new Event(new RecordsDeletedValue(value));
    }

    public static Event fileCreated(GenericEvent value) {
        return new Event(new FileCreatedValue(value));
    }

    public static Event fileUpdated(GenericEvent value) {
        return new Event(new FileUpdatedValue(value));
    }

    public static Event fileDeleted(GenericEvent value) {
        return new Event(new FileDeletedValue(value));
    }

    public static Event fileExpired(GenericEvent value) {
        return new Event(new FileExpiredValue(value));
    }

    public static Event jobCreated(GenericEvent value) {
        return new Event(new JobCreatedValue(value));
    }

    public static Event jobUpdated(GenericEvent value) {
        return new Event(new JobUpdatedValue(value));
    }

    public static Event jobDeleted(GenericEvent value) {
        return new Event(new JobDeletedValue(value));
    }

    public static Event jobFailed(GenericEvent value) {
        return new Event(new JobFailedValue(value));
    }

    public static Event jobCompleted(GenericEvent value) {
        return new Event(new JobCompletedValue(value));
    }

    public static Event jobReady(GenericEvent value) {
        return new Event(new JobReadyValue(value));
    }

    public static Event jobScheduled(GenericEvent value) {
        return new Event(new JobScheduledValue(value));
    }

    public static Event jobOutcomeAcknowledged(GenericEvent value) {
        return new Event(new JobOutcomeAcknowledgedValue(value));
    }

    public static Event jobPartsCompleted(GenericEvent value) {
        return new Event(new JobPartsCompletedValue(value));
    }

    public static Event programCreated(GenericEvent value) {
        return new Event(new ProgramCreatedValue(value));
    }

    public static Event programUpdated(GenericEvent value) {
        return new Event(new ProgramUpdatedValue(value));
    }

    public static Event commitCreated(GenericEvent value) {
        return new Event(new CommitCreatedValue(value));
    }

    public static Event commitUpdated(GenericEvent value) {
        return new Event(new CommitUpdatedValue(value));
    }

    public static Event commitCompleted(GenericEvent value) {
        return new Event(new CommitCompletedValue(value));
    }

    public static Event secretCreated(GenericEvent value) {
        return new Event(new SecretCreatedValue(value));
    }

    public static Event secretUpdated(GenericEvent value) {
        return new Event(new SecretUpdatedValue(value));
    }

    public static Event secretDeleted(GenericEvent value) {
        return new Event(new SecretDeletedValue(value));
    }

    public static Event layerCreated(GenericEvent value) {
        return new Event(new LayerCreatedValue(value));
    }

    public boolean isAgentCreated() {
        return value instanceof AgentCreatedValue;
    }

    public boolean isAgentUpdated() {
        return value instanceof AgentUpdatedValue;
    }

    public boolean isAgentDeleted() {
        return value instanceof AgentDeletedValue;
    }

    public boolean isSpaceCreated() {
        return value instanceof SpaceCreatedValue;
    }

    public boolean isSpaceUpdated() {
        return value instanceof SpaceUpdatedValue;
    }

    public boolean isSpaceDeleted() {
        return value instanceof SpaceDeletedValue;
    }

    public boolean isSpaceArchived() {
        return value instanceof SpaceArchivedValue;
    }

    public boolean isSpaceExpired() {
        return value instanceof SpaceExpiredValue;
    }

    public boolean isSpaceGuestAdded() {
        return value instanceof SpaceGuestAddedValue;
    }

    public boolean isSpaceGuestRemoved() {
        return value instanceof SpaceGuestRemovedValue;
    }

    public boolean isDocumentCreated() {
        return value instanceof DocumentCreatedValue;
    }

    public boolean isDocumentUpdated() {
        return value instanceof DocumentUpdatedValue;
    }

    public boolean isDocumentDeleted() {
        return value instanceof DocumentDeletedValue;
    }

    public boolean isWorkbookCreated() {
        return value instanceof WorkbookCreatedValue;
    }

    public boolean isWorkbookUpdated() {
        return value instanceof WorkbookUpdatedValue;
    }

    public boolean isWorkbookDeleted() {
        return value instanceof WorkbookDeletedValue;
    }

    public boolean isWorkbookExpired() {
        return value instanceof WorkbookExpiredValue;
    }

    public boolean isSheetCreated() {
        return value instanceof SheetCreatedValue;
    }

    public boolean isSheetUpdated() {
        return value instanceof SheetUpdatedValue;
    }

    public boolean isSheetDeleted() {
        return value instanceof SheetDeletedValue;
    }

    public boolean isSnapshotCreated() {
        return value instanceof SnapshotCreatedValue;
    }

    public boolean isRecordsCreated() {
        return value instanceof RecordsCreatedValue;
    }

    public boolean isRecordsUpdated() {
        return value instanceof RecordsUpdatedValue;
    }

    public boolean isRecordsDeleted() {
        return value instanceof RecordsDeletedValue;
    }

    public boolean isFileCreated() {
        return value instanceof FileCreatedValue;
    }

    public boolean isFileUpdated() {
        return value instanceof FileUpdatedValue;
    }

    public boolean isFileDeleted() {
        return value instanceof FileDeletedValue;
    }

    public boolean isFileExpired() {
        return value instanceof FileExpiredValue;
    }

    public boolean isJobCreated() {
        return value instanceof JobCreatedValue;
    }

    public boolean isJobUpdated() {
        return value instanceof JobUpdatedValue;
    }

    public boolean isJobDeleted() {
        return value instanceof JobDeletedValue;
    }

    public boolean isJobFailed() {
        return value instanceof JobFailedValue;
    }

    public boolean isJobCompleted() {
        return value instanceof JobCompletedValue;
    }

    public boolean isJobReady() {
        return value instanceof JobReadyValue;
    }

    public boolean isJobScheduled() {
        return value instanceof JobScheduledValue;
    }

    public boolean isJobOutcomeAcknowledged() {
        return value instanceof JobOutcomeAcknowledgedValue;
    }

    public boolean isJobPartsCompleted() {
        return value instanceof JobPartsCompletedValue;
    }

    public boolean isProgramCreated() {
        return value instanceof ProgramCreatedValue;
    }

    public boolean isProgramUpdated() {
        return value instanceof ProgramUpdatedValue;
    }

    public boolean isCommitCreated() {
        return value instanceof CommitCreatedValue;
    }

    public boolean isCommitUpdated() {
        return value instanceof CommitUpdatedValue;
    }

    public boolean isCommitCompleted() {
        return value instanceof CommitCompletedValue;
    }

    public boolean isSecretCreated() {
        return value instanceof SecretCreatedValue;
    }

    public boolean isSecretUpdated() {
        return value instanceof SecretUpdatedValue;
    }

    public boolean isSecretDeleted() {
        return value instanceof SecretDeletedValue;
    }

    public boolean isLayerCreated() {
        return value instanceof LayerCreatedValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<GenericEvent> getAgentCreated() {
        if (isAgentCreated()) {
            return Optional.of(((AgentCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getAgentUpdated() {
        if (isAgentUpdated()) {
            return Optional.of(((AgentUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getAgentDeleted() {
        if (isAgentDeleted()) {
            return Optional.of(((AgentDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceCreated() {
        if (isSpaceCreated()) {
            return Optional.of(((SpaceCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceUpdated() {
        if (isSpaceUpdated()) {
            return Optional.of(((SpaceUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceDeleted() {
        if (isSpaceDeleted()) {
            return Optional.of(((SpaceDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceArchived() {
        if (isSpaceArchived()) {
            return Optional.of(((SpaceArchivedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceExpired() {
        if (isSpaceExpired()) {
            return Optional.of(((SpaceExpiredValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceGuestAdded() {
        if (isSpaceGuestAdded()) {
            return Optional.of(((SpaceGuestAddedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSpaceGuestRemoved() {
        if (isSpaceGuestRemoved()) {
            return Optional.of(((SpaceGuestRemovedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getDocumentCreated() {
        if (isDocumentCreated()) {
            return Optional.of(((DocumentCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getDocumentUpdated() {
        if (isDocumentUpdated()) {
            return Optional.of(((DocumentUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getDocumentDeleted() {
        if (isDocumentDeleted()) {
            return Optional.of(((DocumentDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getWorkbookCreated() {
        if (isWorkbookCreated()) {
            return Optional.of(((WorkbookCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getWorkbookUpdated() {
        if (isWorkbookUpdated()) {
            return Optional.of(((WorkbookUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getWorkbookDeleted() {
        if (isWorkbookDeleted()) {
            return Optional.of(((WorkbookDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getWorkbookExpired() {
        if (isWorkbookExpired()) {
            return Optional.of(((WorkbookExpiredValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSheetCreated() {
        if (isSheetCreated()) {
            return Optional.of(((SheetCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSheetUpdated() {
        if (isSheetUpdated()) {
            return Optional.of(((SheetUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSheetDeleted() {
        if (isSheetDeleted()) {
            return Optional.of(((SheetDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSnapshotCreated() {
        if (isSnapshotCreated()) {
            return Optional.of(((SnapshotCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getRecordsCreated() {
        if (isRecordsCreated()) {
            return Optional.of(((RecordsCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getRecordsUpdated() {
        if (isRecordsUpdated()) {
            return Optional.of(((RecordsUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getRecordsDeleted() {
        if (isRecordsDeleted()) {
            return Optional.of(((RecordsDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getFileCreated() {
        if (isFileCreated()) {
            return Optional.of(((FileCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getFileUpdated() {
        if (isFileUpdated()) {
            return Optional.of(((FileUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getFileDeleted() {
        if (isFileDeleted()) {
            return Optional.of(((FileDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getFileExpired() {
        if (isFileExpired()) {
            return Optional.of(((FileExpiredValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobCreated() {
        if (isJobCreated()) {
            return Optional.of(((JobCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobUpdated() {
        if (isJobUpdated()) {
            return Optional.of(((JobUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobDeleted() {
        if (isJobDeleted()) {
            return Optional.of(((JobDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobFailed() {
        if (isJobFailed()) {
            return Optional.of(((JobFailedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobCompleted() {
        if (isJobCompleted()) {
            return Optional.of(((JobCompletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobReady() {
        if (isJobReady()) {
            return Optional.of(((JobReadyValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobScheduled() {
        if (isJobScheduled()) {
            return Optional.of(((JobScheduledValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobOutcomeAcknowledged() {
        if (isJobOutcomeAcknowledged()) {
            return Optional.of(((JobOutcomeAcknowledgedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getJobPartsCompleted() {
        if (isJobPartsCompleted()) {
            return Optional.of(((JobPartsCompletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getProgramCreated() {
        if (isProgramCreated()) {
            return Optional.of(((ProgramCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getProgramUpdated() {
        if (isProgramUpdated()) {
            return Optional.of(((ProgramUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getCommitCreated() {
        if (isCommitCreated()) {
            return Optional.of(((CommitCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getCommitUpdated() {
        if (isCommitUpdated()) {
            return Optional.of(((CommitUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getCommitCompleted() {
        if (isCommitCompleted()) {
            return Optional.of(((CommitCompletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSecretCreated() {
        if (isSecretCreated()) {
            return Optional.of(((SecretCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSecretUpdated() {
        if (isSecretUpdated()) {
            return Optional.of(((SecretUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getSecretDeleted() {
        if (isSecretDeleted()) {
            return Optional.of(((SecretDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GenericEvent> getLayerCreated() {
        if (isLayerCreated()) {
            return Optional.of(((LayerCreatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitAgentCreated(GenericEvent agentCreated);

        T visitAgentUpdated(GenericEvent agentUpdated);

        T visitAgentDeleted(GenericEvent agentDeleted);

        T visitSpaceCreated(GenericEvent spaceCreated);

        T visitSpaceUpdated(GenericEvent spaceUpdated);

        T visitSpaceDeleted(GenericEvent spaceDeleted);

        T visitSpaceArchived(GenericEvent spaceArchived);

        T visitSpaceExpired(GenericEvent spaceExpired);

        T visitSpaceGuestAdded(GenericEvent spaceGuestAdded);

        T visitSpaceGuestRemoved(GenericEvent spaceGuestRemoved);

        T visitDocumentCreated(GenericEvent documentCreated);

        T visitDocumentUpdated(GenericEvent documentUpdated);

        T visitDocumentDeleted(GenericEvent documentDeleted);

        T visitWorkbookCreated(GenericEvent workbookCreated);

        T visitWorkbookUpdated(GenericEvent workbookUpdated);

        T visitWorkbookDeleted(GenericEvent workbookDeleted);

        T visitWorkbookExpired(GenericEvent workbookExpired);

        T visitSheetCreated(GenericEvent sheetCreated);

        T visitSheetUpdated(GenericEvent sheetUpdated);

        T visitSheetDeleted(GenericEvent sheetDeleted);

        T visitSnapshotCreated(GenericEvent snapshotCreated);

        T visitRecordsCreated(GenericEvent recordsCreated);

        T visitRecordsUpdated(GenericEvent recordsUpdated);

        T visitRecordsDeleted(GenericEvent recordsDeleted);

        T visitFileCreated(GenericEvent fileCreated);

        T visitFileUpdated(GenericEvent fileUpdated);

        T visitFileDeleted(GenericEvent fileDeleted);

        T visitFileExpired(GenericEvent fileExpired);

        T visitJobCreated(GenericEvent jobCreated);

        T visitJobUpdated(GenericEvent jobUpdated);

        T visitJobDeleted(GenericEvent jobDeleted);

        T visitJobFailed(GenericEvent jobFailed);

        T visitJobCompleted(GenericEvent jobCompleted);

        T visitJobReady(GenericEvent jobReady);

        T visitJobScheduled(GenericEvent jobScheduled);

        T visitJobOutcomeAcknowledged(GenericEvent jobOutcomeAcknowledged);

        T visitJobPartsCompleted(GenericEvent jobPartsCompleted);

        T visitProgramCreated(GenericEvent programCreated);

        T visitProgramUpdated(GenericEvent programUpdated);

        T visitCommitCreated(GenericEvent commitCreated);

        T visitCommitUpdated(GenericEvent commitUpdated);

        T visitCommitCompleted(GenericEvent commitCompleted);

        T visitSecretCreated(GenericEvent secretCreated);

        T visitSecretUpdated(GenericEvent secretUpdated);

        T visitSecretDeleted(GenericEvent secretDeleted);

        T visitLayerCreated(GenericEvent layerCreated);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "topic", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(AgentCreatedValue.class),
        @JsonSubTypes.Type(AgentUpdatedValue.class),
        @JsonSubTypes.Type(AgentDeletedValue.class),
        @JsonSubTypes.Type(SpaceCreatedValue.class),
        @JsonSubTypes.Type(SpaceUpdatedValue.class),
        @JsonSubTypes.Type(SpaceDeletedValue.class),
        @JsonSubTypes.Type(SpaceArchivedValue.class),
        @JsonSubTypes.Type(SpaceExpiredValue.class),
        @JsonSubTypes.Type(SpaceGuestAddedValue.class),
        @JsonSubTypes.Type(SpaceGuestRemovedValue.class),
        @JsonSubTypes.Type(DocumentCreatedValue.class),
        @JsonSubTypes.Type(DocumentUpdatedValue.class),
        @JsonSubTypes.Type(DocumentDeletedValue.class),
        @JsonSubTypes.Type(WorkbookCreatedValue.class),
        @JsonSubTypes.Type(WorkbookUpdatedValue.class),
        @JsonSubTypes.Type(WorkbookDeletedValue.class),
        @JsonSubTypes.Type(WorkbookExpiredValue.class),
        @JsonSubTypes.Type(SheetCreatedValue.class),
        @JsonSubTypes.Type(SheetUpdatedValue.class),
        @JsonSubTypes.Type(SheetDeletedValue.class),
        @JsonSubTypes.Type(SnapshotCreatedValue.class),
        @JsonSubTypes.Type(RecordsCreatedValue.class),
        @JsonSubTypes.Type(RecordsUpdatedValue.class),
        @JsonSubTypes.Type(RecordsDeletedValue.class),
        @JsonSubTypes.Type(FileCreatedValue.class),
        @JsonSubTypes.Type(FileUpdatedValue.class),
        @JsonSubTypes.Type(FileDeletedValue.class),
        @JsonSubTypes.Type(FileExpiredValue.class),
        @JsonSubTypes.Type(JobCreatedValue.class),
        @JsonSubTypes.Type(JobUpdatedValue.class),
        @JsonSubTypes.Type(JobDeletedValue.class),
        @JsonSubTypes.Type(JobFailedValue.class),
        @JsonSubTypes.Type(JobCompletedValue.class),
        @JsonSubTypes.Type(JobReadyValue.class),
        @JsonSubTypes.Type(JobScheduledValue.class),
        @JsonSubTypes.Type(JobOutcomeAcknowledgedValue.class),
        @JsonSubTypes.Type(JobPartsCompletedValue.class),
        @JsonSubTypes.Type(ProgramCreatedValue.class),
        @JsonSubTypes.Type(ProgramUpdatedValue.class),
        @JsonSubTypes.Type(CommitCreatedValue.class),
        @JsonSubTypes.Type(CommitUpdatedValue.class),
        @JsonSubTypes.Type(CommitCompletedValue.class),
        @JsonSubTypes.Type(SecretCreatedValue.class),
        @JsonSubTypes.Type(SecretUpdatedValue.class),
        @JsonSubTypes.Type(SecretDeletedValue.class),
        @JsonSubTypes.Type(LayerCreatedValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("agent:created")
    private static final class AgentCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AgentCreatedValue() {}

        private AgentCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAgentCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AgentCreatedValue && equalTo((AgentCreatedValue) other);
        }

        private boolean equalTo(AgentCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("agent:updated")
    private static final class AgentUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AgentUpdatedValue() {}

        private AgentUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAgentUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AgentUpdatedValue && equalTo((AgentUpdatedValue) other);
        }

        private boolean equalTo(AgentUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("agent:deleted")
    private static final class AgentDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AgentDeletedValue() {}

        private AgentDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAgentDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AgentDeletedValue && equalTo((AgentDeletedValue) other);
        }

        private boolean equalTo(AgentDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:created")
    private static final class SpaceCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceCreatedValue() {}

        private SpaceCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceCreatedValue && equalTo((SpaceCreatedValue) other);
        }

        private boolean equalTo(SpaceCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:updated")
    private static final class SpaceUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceUpdatedValue() {}

        private SpaceUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceUpdatedValue && equalTo((SpaceUpdatedValue) other);
        }

        private boolean equalTo(SpaceUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:deleted")
    private static final class SpaceDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceDeletedValue() {}

        private SpaceDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceDeletedValue && equalTo((SpaceDeletedValue) other);
        }

        private boolean equalTo(SpaceDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:archived")
    private static final class SpaceArchivedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceArchivedValue() {}

        private SpaceArchivedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceArchived(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceArchivedValue && equalTo((SpaceArchivedValue) other);
        }

        private boolean equalTo(SpaceArchivedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:expired")
    private static final class SpaceExpiredValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceExpiredValue() {}

        private SpaceExpiredValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceExpired(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceExpiredValue && equalTo((SpaceExpiredValue) other);
        }

        private boolean equalTo(SpaceExpiredValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:guestAdded")
    private static final class SpaceGuestAddedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceGuestAddedValue() {}

        private SpaceGuestAddedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceGuestAdded(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceGuestAddedValue && equalTo((SpaceGuestAddedValue) other);
        }

        private boolean equalTo(SpaceGuestAddedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("space:guestRemoved")
    private static final class SpaceGuestRemovedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpaceGuestRemovedValue() {}

        private SpaceGuestRemovedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpaceGuestRemoved(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpaceGuestRemovedValue && equalTo((SpaceGuestRemovedValue) other);
        }

        private boolean equalTo(SpaceGuestRemovedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("document:created")
    private static final class DocumentCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DocumentCreatedValue() {}

        private DocumentCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDocumentCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DocumentCreatedValue && equalTo((DocumentCreatedValue) other);
        }

        private boolean equalTo(DocumentCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("document:updated")
    private static final class DocumentUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DocumentUpdatedValue() {}

        private DocumentUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDocumentUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DocumentUpdatedValue && equalTo((DocumentUpdatedValue) other);
        }

        private boolean equalTo(DocumentUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("document:deleted")
    private static final class DocumentDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DocumentDeletedValue() {}

        private DocumentDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDocumentDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DocumentDeletedValue && equalTo((DocumentDeletedValue) other);
        }

        private boolean equalTo(DocumentDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("workbook:created")
    private static final class WorkbookCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WorkbookCreatedValue() {}

        private WorkbookCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWorkbookCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WorkbookCreatedValue && equalTo((WorkbookCreatedValue) other);
        }

        private boolean equalTo(WorkbookCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("workbook:updated")
    private static final class WorkbookUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WorkbookUpdatedValue() {}

        private WorkbookUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWorkbookUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WorkbookUpdatedValue && equalTo((WorkbookUpdatedValue) other);
        }

        private boolean equalTo(WorkbookUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("workbook:deleted")
    private static final class WorkbookDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WorkbookDeletedValue() {}

        private WorkbookDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWorkbookDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WorkbookDeletedValue && equalTo((WorkbookDeletedValue) other);
        }

        private boolean equalTo(WorkbookDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("workbook:expired")
    private static final class WorkbookExpiredValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WorkbookExpiredValue() {}

        private WorkbookExpiredValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWorkbookExpired(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WorkbookExpiredValue && equalTo((WorkbookExpiredValue) other);
        }

        private boolean equalTo(WorkbookExpiredValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("sheet:created")
    private static final class SheetCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SheetCreatedValue() {}

        private SheetCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSheetCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SheetCreatedValue && equalTo((SheetCreatedValue) other);
        }

        private boolean equalTo(SheetCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("sheet:updated")
    private static final class SheetUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SheetUpdatedValue() {}

        private SheetUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSheetUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SheetUpdatedValue && equalTo((SheetUpdatedValue) other);
        }

        private boolean equalTo(SheetUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("sheet:deleted")
    private static final class SheetDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SheetDeletedValue() {}

        private SheetDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSheetDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SheetDeletedValue && equalTo((SheetDeletedValue) other);
        }

        private boolean equalTo(SheetDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("snapshot:created")
    private static final class SnapshotCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SnapshotCreatedValue() {}

        private SnapshotCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSnapshotCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SnapshotCreatedValue && equalTo((SnapshotCreatedValue) other);
        }

        private boolean equalTo(SnapshotCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("records:created")
    private static final class RecordsCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RecordsCreatedValue() {}

        private RecordsCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRecordsCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RecordsCreatedValue && equalTo((RecordsCreatedValue) other);
        }

        private boolean equalTo(RecordsCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("records:updated")
    private static final class RecordsUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RecordsUpdatedValue() {}

        private RecordsUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRecordsUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RecordsUpdatedValue && equalTo((RecordsUpdatedValue) other);
        }

        private boolean equalTo(RecordsUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("records:deleted")
    private static final class RecordsDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RecordsDeletedValue() {}

        private RecordsDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRecordsDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RecordsDeletedValue && equalTo((RecordsDeletedValue) other);
        }

        private boolean equalTo(RecordsDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("file:created")
    private static final class FileCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FileCreatedValue() {}

        private FileCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFileCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FileCreatedValue && equalTo((FileCreatedValue) other);
        }

        private boolean equalTo(FileCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("file:updated")
    private static final class FileUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FileUpdatedValue() {}

        private FileUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFileUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FileUpdatedValue && equalTo((FileUpdatedValue) other);
        }

        private boolean equalTo(FileUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("file:deleted")
    private static final class FileDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FileDeletedValue() {}

        private FileDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFileDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FileDeletedValue && equalTo((FileDeletedValue) other);
        }

        private boolean equalTo(FileDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("file:expired")
    private static final class FileExpiredValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FileExpiredValue() {}

        private FileExpiredValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFileExpired(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FileExpiredValue && equalTo((FileExpiredValue) other);
        }

        private boolean equalTo(FileExpiredValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:created")
    private static final class JobCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobCreatedValue() {}

        private JobCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobCreatedValue && equalTo((JobCreatedValue) other);
        }

        private boolean equalTo(JobCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:updated")
    private static final class JobUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobUpdatedValue() {}

        private JobUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobUpdatedValue && equalTo((JobUpdatedValue) other);
        }

        private boolean equalTo(JobUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:deleted")
    private static final class JobDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobDeletedValue() {}

        private JobDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobDeletedValue && equalTo((JobDeletedValue) other);
        }

        private boolean equalTo(JobDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:failed")
    private static final class JobFailedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobFailedValue() {}

        private JobFailedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobFailed(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobFailedValue && equalTo((JobFailedValue) other);
        }

        private boolean equalTo(JobFailedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:completed")
    private static final class JobCompletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobCompletedValue() {}

        private JobCompletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobCompleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobCompletedValue && equalTo((JobCompletedValue) other);
        }

        private boolean equalTo(JobCompletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:ready")
    private static final class JobReadyValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobReadyValue() {}

        private JobReadyValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobReady(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobReadyValue && equalTo((JobReadyValue) other);
        }

        private boolean equalTo(JobReadyValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:scheduled")
    private static final class JobScheduledValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobScheduledValue() {}

        private JobScheduledValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobScheduled(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobScheduledValue && equalTo((JobScheduledValue) other);
        }

        private boolean equalTo(JobScheduledValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:outcome-acknowledged")
    private static final class JobOutcomeAcknowledgedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobOutcomeAcknowledgedValue() {}

        private JobOutcomeAcknowledgedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobOutcomeAcknowledged(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobOutcomeAcknowledgedValue && equalTo((JobOutcomeAcknowledgedValue) other);
        }

        private boolean equalTo(JobOutcomeAcknowledgedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("job:parts-completed")
    private static final class JobPartsCompletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JobPartsCompletedValue() {}

        private JobPartsCompletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJobPartsCompleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JobPartsCompletedValue && equalTo((JobPartsCompletedValue) other);
        }

        private boolean equalTo(JobPartsCompletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("program:created")
    private static final class ProgramCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ProgramCreatedValue() {}

        private ProgramCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitProgramCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ProgramCreatedValue && equalTo((ProgramCreatedValue) other);
        }

        private boolean equalTo(ProgramCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("program:updated")
    private static final class ProgramUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ProgramUpdatedValue() {}

        private ProgramUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitProgramUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ProgramUpdatedValue && equalTo((ProgramUpdatedValue) other);
        }

        private boolean equalTo(ProgramUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("commit:created")
    private static final class CommitCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CommitCreatedValue() {}

        private CommitCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCommitCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CommitCreatedValue && equalTo((CommitCreatedValue) other);
        }

        private boolean equalTo(CommitCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("commit:updated")
    private static final class CommitUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CommitUpdatedValue() {}

        private CommitUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCommitUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CommitUpdatedValue && equalTo((CommitUpdatedValue) other);
        }

        private boolean equalTo(CommitUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("commit:completed")
    private static final class CommitCompletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CommitCompletedValue() {}

        private CommitCompletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCommitCompleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CommitCompletedValue && equalTo((CommitCompletedValue) other);
        }

        private boolean equalTo(CommitCompletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("secret:created")
    private static final class SecretCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SecretCreatedValue() {}

        private SecretCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSecretCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SecretCreatedValue && equalTo((SecretCreatedValue) other);
        }

        private boolean equalTo(SecretCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("secret:updated")
    private static final class SecretUpdatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SecretUpdatedValue() {}

        private SecretUpdatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSecretUpdated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SecretUpdatedValue && equalTo((SecretUpdatedValue) other);
        }

        private boolean equalTo(SecretUpdatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("secret:deleted")
    private static final class SecretDeletedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SecretDeletedValue() {}

        private SecretDeletedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSecretDeleted(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SecretDeletedValue && equalTo((SecretDeletedValue) other);
        }

        private boolean equalTo(SecretDeletedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("layer:created")
    private static final class LayerCreatedValue implements Value {
        @JsonUnwrapped
        private GenericEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private LayerCreatedValue() {}

        private LayerCreatedValue(GenericEvent value) {
            this.value = value;
        }

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitLayerCreated(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof LayerCreatedValue && equalTo((LayerCreatedValue) other);
        }

        private boolean equalTo(LayerCreatedValue other) {
            return value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @Override
        public String toString() {
            return "Event{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
