/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BaseEvent.Builder.class)
public final class BaseEvent implements IBaseEvent {
    private final Domain domain;

    private final Context context;

    private final Optional<EventAttributes> attributes;

    private final Optional<String> callbackUrl;

    private final Optional<String> dataUrl;

    private final Optional<String> target;

    private final Optional<Origin> origin;

    private final Optional<List<String>> namespaces;

    private final Map<String, Object> additionalProperties;

    private BaseEvent(
            Domain domain,
            Context context,
            Optional<EventAttributes> attributes,
            Optional<String> callbackUrl,
            Optional<String> dataUrl,
            Optional<String> target,
            Optional<Origin> origin,
            Optional<List<String>> namespaces,
            Map<String, Object> additionalProperties) {
        this.domain = domain;
        this.context = context;
        this.attributes = attributes;
        this.callbackUrl = callbackUrl;
        this.dataUrl = dataUrl;
        this.target = target;
        this.origin = origin;
        this.namespaces = namespaces;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The domain of the event
     */
    @JsonProperty("domain")
    @java.lang.Override
    public Domain getDomain() {
        return domain;
    }

    /**
     * @return The context of the event
     */
    @JsonProperty("context")
    @java.lang.Override
    public Context getContext() {
        return context;
    }

    /**
     * @return The attributes of the event
     */
    @JsonProperty("attributes")
    @java.lang.Override
    public Optional<EventAttributes> getAttributes() {
        return attributes;
    }

    /**
     * @return The callback url to acknowledge the event
     */
    @JsonProperty("callbackUrl")
    @java.lang.Override
    public Optional<String> getCallbackUrl() {
        return callbackUrl;
    }

    /**
     * @return The url to retrieve the data associated with the event
     */
    @JsonProperty("dataUrl")
    @java.lang.Override
    public Optional<String> getDataUrl() {
        return dataUrl;
    }

    @JsonProperty("target")
    @java.lang.Override
    public Optional<String> getTarget() {
        return target;
    }

    @JsonProperty("origin")
    @java.lang.Override
    public Optional<Origin> getOrigin() {
        return origin;
    }

    @JsonProperty("namespaces")
    @java.lang.Override
    public Optional<List<String>> getNamespaces() {
        return namespaces;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BaseEvent && equalTo((BaseEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BaseEvent other) {
        return domain.equals(other.domain)
                && context.equals(other.context)
                && attributes.equals(other.attributes)
                && callbackUrl.equals(other.callbackUrl)
                && dataUrl.equals(other.dataUrl)
                && target.equals(other.target)
                && origin.equals(other.origin)
                && namespaces.equals(other.namespaces);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.domain,
                this.context,
                this.attributes,
                this.callbackUrl,
                this.dataUrl,
                this.target,
                this.origin,
                this.namespaces);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DomainStage builder() {
        return new Builder();
    }

    public interface DomainStage {
        ContextStage domain(Domain domain);

        Builder from(BaseEvent other);
    }

    public interface ContextStage {
        _FinalStage context(Context context);
    }

    public interface _FinalStage {
        BaseEvent build();

        _FinalStage attributes(Optional<EventAttributes> attributes);

        _FinalStage attributes(EventAttributes attributes);

        _FinalStage callbackUrl(Optional<String> callbackUrl);

        _FinalStage callbackUrl(String callbackUrl);

        _FinalStage dataUrl(Optional<String> dataUrl);

        _FinalStage dataUrl(String dataUrl);

        _FinalStage target(Optional<String> target);

        _FinalStage target(String target);

        _FinalStage origin(Optional<Origin> origin);

        _FinalStage origin(Origin origin);

        _FinalStage namespaces(Optional<List<String>> namespaces);

        _FinalStage namespaces(List<String> namespaces);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DomainStage, ContextStage, _FinalStage {
        private Domain domain;

        private Context context;

        private Optional<List<String>> namespaces = Optional.empty();

        private Optional<Origin> origin = Optional.empty();

        private Optional<String> target = Optional.empty();

        private Optional<String> dataUrl = Optional.empty();

        private Optional<String> callbackUrl = Optional.empty();

        private Optional<EventAttributes> attributes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BaseEvent other) {
            domain(other.getDomain());
            context(other.getContext());
            attributes(other.getAttributes());
            callbackUrl(other.getCallbackUrl());
            dataUrl(other.getDataUrl());
            target(other.getTarget());
            origin(other.getOrigin());
            namespaces(other.getNamespaces());
            return this;
        }

        /**
         * <p>The domain of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("domain")
        public ContextStage domain(Domain domain) {
            this.domain = domain;
            return this;
        }

        /**
         * <p>The context of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("context")
        public _FinalStage context(Context context) {
            this.context = context;
            return this;
        }

        @java.lang.Override
        public _FinalStage namespaces(List<String> namespaces) {
            this.namespaces = Optional.of(namespaces);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "namespaces", nulls = Nulls.SKIP)
        public _FinalStage namespaces(Optional<List<String>> namespaces) {
            this.namespaces = namespaces;
            return this;
        }

        @java.lang.Override
        public _FinalStage origin(Origin origin) {
            this.origin = Optional.of(origin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "origin", nulls = Nulls.SKIP)
        public _FinalStage origin(Optional<Origin> origin) {
            this.origin = origin;
            return this;
        }

        @java.lang.Override
        public _FinalStage target(String target) {
            this.target = Optional.of(target);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "target", nulls = Nulls.SKIP)
        public _FinalStage target(Optional<String> target) {
            this.target = target;
            return this;
        }

        /**
         * <p>The url to retrieve the data associated with the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dataUrl(String dataUrl) {
            this.dataUrl = Optional.of(dataUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dataUrl", nulls = Nulls.SKIP)
        public _FinalStage dataUrl(Optional<String> dataUrl) {
            this.dataUrl = dataUrl;
            return this;
        }

        /**
         * <p>The callback url to acknowledge the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage callbackUrl(String callbackUrl) {
            this.callbackUrl = Optional.of(callbackUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "callbackUrl", nulls = Nulls.SKIP)
        public _FinalStage callbackUrl(Optional<String> callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * <p>The attributes of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage attributes(EventAttributes attributes) {
            this.attributes = Optional.of(attributes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "attributes", nulls = Nulls.SKIP)
        public _FinalStage attributes(Optional<EventAttributes> attributes) {
            this.attributes = attributes;
            return this;
        }

        @java.lang.Override
        public BaseEvent build() {
            return new BaseEvent(
                    domain,
                    context,
                    attributes,
                    callbackUrl,
                    dataUrl,
                    target,
                    origin,
                    namespaces,
                    additionalProperties);
        }
    }
}
