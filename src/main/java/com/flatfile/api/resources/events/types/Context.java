/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Context.Builder.class)
public final class Context {
    private final Optional<List<String>> namespaces;

    private final Optional<EventContextSlugs> slugs;

    private final Optional<String> actionName;

    private final String accountId;

    private final String environmentId;

    private final Optional<String> spaceId;

    private final Optional<String> workbookId;

    private final Optional<String> sheetId;

    private final Optional<String> sheetSlug;

    private final Optional<String> snapshotId;

    private final Optional<String> versionId;

    private final Optional<String> commitId;

    private final Optional<String> jobId;

    private final Optional<String> fileId;

    private final Optional<String> documentId;

    private final Optional<String> precedingEventId;

    private final Optional<String> actorId;

    private final Map<String, Object> additionalProperties;

    private Context(
            Optional<List<String>> namespaces,
            Optional<EventContextSlugs> slugs,
            Optional<String> actionName,
            String accountId,
            String environmentId,
            Optional<String> spaceId,
            Optional<String> workbookId,
            Optional<String> sheetId,
            Optional<String> sheetSlug,
            Optional<String> snapshotId,
            Optional<String> versionId,
            Optional<String> commitId,
            Optional<String> jobId,
            Optional<String> fileId,
            Optional<String> documentId,
            Optional<String> precedingEventId,
            Optional<String> actorId,
            Map<String, Object> additionalProperties) {
        this.namespaces = namespaces;
        this.slugs = slugs;
        this.actionName = actionName;
        this.accountId = accountId;
        this.environmentId = environmentId;
        this.spaceId = spaceId;
        this.workbookId = workbookId;
        this.sheetId = sheetId;
        this.sheetSlug = sheetSlug;
        this.snapshotId = snapshotId;
        this.versionId = versionId;
        this.commitId = commitId;
        this.jobId = jobId;
        this.fileId = fileId;
        this.documentId = documentId;
        this.precedingEventId = precedingEventId;
        this.actorId = actorId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The namespaces of the event
     */
    @JsonProperty("namespaces")
    public Optional<List<String>> getNamespaces() {
        return namespaces;
    }

    /**
     * @return The slugs of related resources
     */
    @JsonProperty("slugs")
    public Optional<EventContextSlugs> getSlugs() {
        return slugs;
    }

    @JsonProperty("actionName")
    public Optional<String> getActionName() {
        return actionName;
    }

    @JsonProperty("accountId")
    public String getAccountId() {
        return accountId;
    }

    @JsonProperty("environmentId")
    public String getEnvironmentId() {
        return environmentId;
    }

    @JsonProperty("spaceId")
    public Optional<String> getSpaceId() {
        return spaceId;
    }

    @JsonProperty("workbookId")
    public Optional<String> getWorkbookId() {
        return workbookId;
    }

    @JsonProperty("sheetId")
    public Optional<String> getSheetId() {
        return sheetId;
    }

    @JsonProperty("sheetSlug")
    public Optional<String> getSheetSlug() {
        return sheetSlug;
    }

    @JsonProperty("snapshotId")
    public Optional<String> getSnapshotId() {
        return snapshotId;
    }

    @JsonProperty("versionId")
    public Optional<String> getVersionId() {
        return versionId;
    }

    @JsonProperty("commitId")
    public Optional<String> getCommitId() {
        return commitId;
    }

    @JsonProperty("jobId")
    public Optional<String> getJobId() {
        return jobId;
    }

    @JsonProperty("fileId")
    public Optional<String> getFileId() {
        return fileId;
    }

    @JsonProperty("documentId")
    public Optional<String> getDocumentId() {
        return documentId;
    }

    @JsonProperty("precedingEventId")
    public Optional<String> getPrecedingEventId() {
        return precedingEventId;
    }

    /**
     * @return Can be a UserId, GuestId, or AgentId
     */
    @JsonProperty("actorId")
    public Optional<String> getActorId() {
        return actorId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Context && equalTo((Context) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Context other) {
        return namespaces.equals(other.namespaces)
                && slugs.equals(other.slugs)
                && actionName.equals(other.actionName)
                && accountId.equals(other.accountId)
                && environmentId.equals(other.environmentId)
                && spaceId.equals(other.spaceId)
                && workbookId.equals(other.workbookId)
                && sheetId.equals(other.sheetId)
                && sheetSlug.equals(other.sheetSlug)
                && snapshotId.equals(other.snapshotId)
                && versionId.equals(other.versionId)
                && commitId.equals(other.commitId)
                && jobId.equals(other.jobId)
                && fileId.equals(other.fileId)
                && documentId.equals(other.documentId)
                && precedingEventId.equals(other.precedingEventId)
                && actorId.equals(other.actorId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.namespaces,
                this.slugs,
                this.actionName,
                this.accountId,
                this.environmentId,
                this.spaceId,
                this.workbookId,
                this.sheetId,
                this.sheetSlug,
                this.snapshotId,
                this.versionId,
                this.commitId,
                this.jobId,
                this.fileId,
                this.documentId,
                this.precedingEventId,
                this.actorId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        EnvironmentIdStage accountId(String accountId);

        Builder from(Context other);
    }

    public interface EnvironmentIdStage {
        _FinalStage environmentId(String environmentId);
    }

    public interface _FinalStage {
        Context build();

        _FinalStage namespaces(Optional<List<String>> namespaces);

        _FinalStage namespaces(List<String> namespaces);

        _FinalStage slugs(Optional<EventContextSlugs> slugs);

        _FinalStage slugs(EventContextSlugs slugs);

        _FinalStage actionName(Optional<String> actionName);

        _FinalStage actionName(String actionName);

        _FinalStage spaceId(Optional<String> spaceId);

        _FinalStage spaceId(String spaceId);

        _FinalStage workbookId(Optional<String> workbookId);

        _FinalStage workbookId(String workbookId);

        _FinalStage sheetId(Optional<String> sheetId);

        _FinalStage sheetId(String sheetId);

        _FinalStage sheetSlug(Optional<String> sheetSlug);

        _FinalStage sheetSlug(String sheetSlug);

        _FinalStage snapshotId(Optional<String> snapshotId);

        _FinalStage snapshotId(String snapshotId);

        _FinalStage versionId(Optional<String> versionId);

        _FinalStage versionId(String versionId);

        _FinalStage commitId(Optional<String> commitId);

        _FinalStage commitId(String commitId);

        _FinalStage jobId(Optional<String> jobId);

        _FinalStage jobId(String jobId);

        _FinalStage fileId(Optional<String> fileId);

        _FinalStage fileId(String fileId);

        _FinalStage documentId(Optional<String> documentId);

        _FinalStage documentId(String documentId);

        _FinalStage precedingEventId(Optional<String> precedingEventId);

        _FinalStage precedingEventId(String precedingEventId);

        _FinalStage actorId(Optional<String> actorId);

        _FinalStage actorId(String actorId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccountIdStage, EnvironmentIdStage, _FinalStage {
        private String accountId;

        private String environmentId;

        private Optional<String> actorId = Optional.empty();

        private Optional<String> precedingEventId = Optional.empty();

        private Optional<String> documentId = Optional.empty();

        private Optional<String> fileId = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<String> commitId = Optional.empty();

        private Optional<String> versionId = Optional.empty();

        private Optional<String> snapshotId = Optional.empty();

        private Optional<String> sheetSlug = Optional.empty();

        private Optional<String> sheetId = Optional.empty();

        private Optional<String> workbookId = Optional.empty();

        private Optional<String> spaceId = Optional.empty();

        private Optional<String> actionName = Optional.empty();

        private Optional<EventContextSlugs> slugs = Optional.empty();

        private Optional<List<String>> namespaces = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Context other) {
            namespaces(other.getNamespaces());
            slugs(other.getSlugs());
            actionName(other.getActionName());
            accountId(other.getAccountId());
            environmentId(other.getEnvironmentId());
            spaceId(other.getSpaceId());
            workbookId(other.getWorkbookId());
            sheetId(other.getSheetId());
            sheetSlug(other.getSheetSlug());
            snapshotId(other.getSnapshotId());
            versionId(other.getVersionId());
            commitId(other.getCommitId());
            jobId(other.getJobId());
            fileId(other.getFileId());
            documentId(other.getDocumentId());
            precedingEventId(other.getPrecedingEventId());
            actorId(other.getActorId());
            return this;
        }

        @Override
        @JsonSetter("accountId")
        public EnvironmentIdStage accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }

        @Override
        @JsonSetter("environmentId")
        public _FinalStage environmentId(String environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        /**
         * <p>Can be a UserId, GuestId, or AgentId</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage actorId(String actorId) {
            this.actorId = Optional.of(actorId);
            return this;
        }

        @Override
        @JsonSetter(value = "actorId", nulls = Nulls.SKIP)
        public _FinalStage actorId(Optional<String> actorId) {
            this.actorId = actorId;
            return this;
        }

        @Override
        public _FinalStage precedingEventId(String precedingEventId) {
            this.precedingEventId = Optional.of(precedingEventId);
            return this;
        }

        @Override
        @JsonSetter(value = "precedingEventId", nulls = Nulls.SKIP)
        public _FinalStage precedingEventId(Optional<String> precedingEventId) {
            this.precedingEventId = precedingEventId;
            return this;
        }

        @Override
        public _FinalStage documentId(String documentId) {
            this.documentId = Optional.of(documentId);
            return this;
        }

        @Override
        @JsonSetter(value = "documentId", nulls = Nulls.SKIP)
        public _FinalStage documentId(Optional<String> documentId) {
            this.documentId = documentId;
            return this;
        }

        @Override
        public _FinalStage fileId(String fileId) {
            this.fileId = Optional.of(fileId);
            return this;
        }

        @Override
        @JsonSetter(value = "fileId", nulls = Nulls.SKIP)
        public _FinalStage fileId(Optional<String> fileId) {
            this.fileId = fileId;
            return this;
        }

        @Override
        public _FinalStage jobId(String jobId) {
            this.jobId = Optional.of(jobId);
            return this;
        }

        @Override
        @JsonSetter(value = "jobId", nulls = Nulls.SKIP)
        public _FinalStage jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        @Override
        public _FinalStage commitId(String commitId) {
            this.commitId = Optional.of(commitId);
            return this;
        }

        @Override
        @JsonSetter(value = "commitId", nulls = Nulls.SKIP)
        public _FinalStage commitId(Optional<String> commitId) {
            this.commitId = commitId;
            return this;
        }

        @Override
        public _FinalStage versionId(String versionId) {
            this.versionId = Optional.of(versionId);
            return this;
        }

        @Override
        @JsonSetter(value = "versionId", nulls = Nulls.SKIP)
        public _FinalStage versionId(Optional<String> versionId) {
            this.versionId = versionId;
            return this;
        }

        @Override
        public _FinalStage snapshotId(String snapshotId) {
            this.snapshotId = Optional.of(snapshotId);
            return this;
        }

        @Override
        @JsonSetter(value = "snapshotId", nulls = Nulls.SKIP)
        public _FinalStage snapshotId(Optional<String> snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }

        @Override
        public _FinalStage sheetSlug(String sheetSlug) {
            this.sheetSlug = Optional.of(sheetSlug);
            return this;
        }

        @Override
        @JsonSetter(value = "sheetSlug", nulls = Nulls.SKIP)
        public _FinalStage sheetSlug(Optional<String> sheetSlug) {
            this.sheetSlug = sheetSlug;
            return this;
        }

        @Override
        public _FinalStage sheetId(String sheetId) {
            this.sheetId = Optional.of(sheetId);
            return this;
        }

        @Override
        @JsonSetter(value = "sheetId", nulls = Nulls.SKIP)
        public _FinalStage sheetId(Optional<String> sheetId) {
            this.sheetId = sheetId;
            return this;
        }

        @Override
        public _FinalStage workbookId(String workbookId) {
            this.workbookId = Optional.of(workbookId);
            return this;
        }

        @Override
        @JsonSetter(value = "workbookId", nulls = Nulls.SKIP)
        public _FinalStage workbookId(Optional<String> workbookId) {
            this.workbookId = workbookId;
            return this;
        }

        @Override
        public _FinalStage spaceId(String spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        @Override
        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public _FinalStage spaceId(Optional<String> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        @Override
        public _FinalStage actionName(String actionName) {
            this.actionName = Optional.of(actionName);
            return this;
        }

        @Override
        @JsonSetter(value = "actionName", nulls = Nulls.SKIP)
        public _FinalStage actionName(Optional<String> actionName) {
            this.actionName = actionName;
            return this;
        }

        /**
         * <p>The slugs of related resources</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage slugs(EventContextSlugs slugs) {
            this.slugs = Optional.of(slugs);
            return this;
        }

        @Override
        @JsonSetter(value = "slugs", nulls = Nulls.SKIP)
        public _FinalStage slugs(Optional<EventContextSlugs> slugs) {
            this.slugs = slugs;
            return this;
        }

        /**
         * <p>The namespaces of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage namespaces(List<String> namespaces) {
            this.namespaces = Optional.of(namespaces);
            return this;
        }

        @Override
        @JsonSetter(value = "namespaces", nulls = Nulls.SKIP)
        public _FinalStage namespaces(Optional<List<String>> namespaces) {
            this.namespaces = namespaces;
            return this;
        }

        @Override
        public Context build() {
            return new Context(
                    namespaces,
                    slugs,
                    actionName,
                    accountId,
                    environmentId,
                    spaceId,
                    workbookId,
                    sheetId,
                    sheetSlug,
                    snapshotId,
                    versionId,
                    commitId,
                    jobId,
                    fileId,
                    documentId,
                    precedingEventId,
                    actorId,
                    additionalProperties);
        }
    }
}
