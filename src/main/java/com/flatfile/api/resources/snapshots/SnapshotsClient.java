/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.snapshots;

import com.flatfile.api.core.ApiError;
import com.flatfile.api.core.ClientOptions;
import com.flatfile.api.core.MediaTypes;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.core.RequestOptions;
import com.flatfile.api.resources.commons.types.SnapshotId;
import com.flatfile.api.resources.commons.types.Success;
import com.flatfile.api.resources.records.types.DiffRecordsResponse;
import com.flatfile.api.resources.snapshots.requests.CreateSnapshotRequest;
import com.flatfile.api.resources.snapshots.requests.GetSnapshotRecordsRequest;
import com.flatfile.api.resources.snapshots.requests.GetSnapshotRequest;
import com.flatfile.api.resources.snapshots.requests.ListSnapshotRequest;
import com.flatfile.api.resources.snapshots.types.RestoreOptions;
import com.flatfile.api.resources.snapshots.types.SnapshotResponse;
import com.flatfile.api.resources.snapshots.types.SnapshotsResponse;
import java.io.IOException;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class SnapshotsClient {
    protected final ClientOptions clientOptions;

    public SnapshotsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Creates a snapshot of a sheet
     */
    public SnapshotResponse createSnapshot(CreateSnapshotRequest request) {
        return createSnapshot(request, null);
    }

    /**
     * Creates a snapshot of a sheet
     */
    public SnapshotResponse createSnapshot(CreateSnapshotRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("snapshots")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), SnapshotResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * List all snapshots of a sheet
     */
    public SnapshotsResponse listSnapshots(ListSnapshotRequest request) {
        return listSnapshots(request, null);
    }

    /**
     * List all snapshots of a sheet
     */
    public SnapshotsResponse listSnapshots(ListSnapshotRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("snapshots");
        httpUrl.addQueryParameter("sheetId", request.getSheetId().toString());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), SnapshotsResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets a snapshot of a sheet
     */
    public SnapshotResponse getSnapshot(SnapshotId snapshotId, GetSnapshotRequest request) {
        return getSnapshot(snapshotId, request, null);
    }

    /**
     * Gets a snapshot of a sheet
     */
    public SnapshotResponse getSnapshot(
            SnapshotId snapshotId, GetSnapshotRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("snapshots")
                .addPathSegment(snapshotId.toString());
        httpUrl.addQueryParameter("includeSummary", request.getIncludeSummary().toString());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), SnapshotResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes a snapshot of a sheet
     */
    public Success deleteSnapshot(SnapshotId snapshotId) {
        return deleteSnapshot(snapshotId, null);
    }

    /**
     * Deletes a snapshot of a sheet
     */
    public Success deleteSnapshot(SnapshotId snapshotId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("snapshots")
                .addPathSegment(snapshotId.toString())
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Success.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Restores a snapshot of a sheet
     */
    public SnapshotResponse restoreSnapshot(SnapshotId snapshotId) {
        return restoreSnapshot(snapshotId, Optional.empty());
    }

    /**
     * Restores a snapshot of a sheet
     */
    public SnapshotResponse restoreSnapshot(SnapshotId snapshotId, Optional<RestoreOptions> request) {
        return restoreSnapshot(snapshotId, request, null);
    }

    /**
     * Restores a snapshot of a sheet
     */
    public SnapshotResponse restoreSnapshot(
            SnapshotId snapshotId, Optional<RestoreOptions> request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("snapshots")
                .addPathSegment(snapshotId.toString())
                .addPathSegments("restore")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create("", null);
            if (request.isPresent()) {
                body = RequestBody.create(
                        ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), SnapshotResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets records from a snapshot of a sheet
     */
    public DiffRecordsResponse getSnapshotRecords(SnapshotId snapshotId) {
        return getSnapshotRecords(
                snapshotId, GetSnapshotRecordsRequest.builder().build());
    }

    /**
     * Gets records from a snapshot of a sheet
     */
    public DiffRecordsResponse getSnapshotRecords(SnapshotId snapshotId, GetSnapshotRecordsRequest request) {
        return getSnapshotRecords(snapshotId, request, null);
    }

    /**
     * Gets records from a snapshot of a sheet
     */
    public DiffRecordsResponse getSnapshotRecords(
            SnapshotId snapshotId, GetSnapshotRecordsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("snapshots")
                .addPathSegment(snapshotId.toString())
                .addPathSegments("records");
        if (request.getPageSize().isPresent()) {
            httpUrl.addQueryParameter("pageSize", request.getPageSize().get().toString());
        }
        if (request.getPageNumber().isPresent()) {
            httpUrl.addQueryParameter(
                    "pageNumber", request.getPageNumber().get().toString());
        }
        if (request.getChangeType().isPresent()) {
            httpUrl.addQueryParameter(
                    "changeType", request.getChangeType().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), DiffRecordsResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
