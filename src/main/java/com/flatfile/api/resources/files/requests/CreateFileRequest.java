/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.files.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Action;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import com.flatfile.api.resources.commons.types.SpaceId;
import com.flatfile.api.resources.files.types.Mode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CreateFileRequest.Builder.class)
public final class CreateFileRequest {
    private final SpaceId spaceId;

    private final EnvironmentId environmentId;

    private final Optional<Mode> mode;

    private final Optional<List<Action>> actions;

    private final Map<String, Object> additionalProperties;

    private CreateFileRequest(
            SpaceId spaceId,
            EnvironmentId environmentId,
            Optional<Mode> mode,
            Optional<List<Action>> actions,
            Map<String, Object> additionalProperties) {
        this.spaceId = spaceId;
        this.environmentId = environmentId;
        this.mode = mode;
        this.actions = actions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("spaceId")
    public SpaceId getSpaceId() {
        return spaceId;
    }

    @JsonProperty("environmentId")
    public EnvironmentId getEnvironmentId() {
        return environmentId;
    }

    /**
     * @return The storage mode of file to insert, defaults to &quot;import&quot;
     */
    @JsonProperty("mode")
    public Optional<Mode> getMode() {
        return mode;
    }

    /**
     * @return The actions attached to the file
     */
    @JsonProperty("actions")
    public Optional<List<Action>> getActions() {
        return actions;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateFileRequest && equalTo((CreateFileRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateFileRequest other) {
        return spaceId.equals(other.spaceId)
                && environmentId.equals(other.environmentId)
                && mode.equals(other.mode)
                && actions.equals(other.actions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.spaceId, this.environmentId, this.mode, this.actions);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SpaceIdStage builder() {
        return new Builder();
    }

    public interface SpaceIdStage {
        EnvironmentIdStage spaceId(SpaceId spaceId);

        Builder from(CreateFileRequest other);
    }

    public interface EnvironmentIdStage {
        _FinalStage environmentId(EnvironmentId environmentId);
    }

    public interface _FinalStage {
        CreateFileRequest build();

        _FinalStage mode(Optional<Mode> mode);

        _FinalStage mode(Mode mode);

        _FinalStage actions(Optional<List<Action>> actions);

        _FinalStage actions(List<Action> actions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SpaceIdStage, EnvironmentIdStage, _FinalStage {
        private SpaceId spaceId;

        private EnvironmentId environmentId;

        private Optional<List<Action>> actions = Optional.empty();

        private Optional<Mode> mode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(CreateFileRequest other) {
            spaceId(other.getSpaceId());
            environmentId(other.getEnvironmentId());
            mode(other.getMode());
            actions(other.getActions());
            return this;
        }

        @Override
        @JsonSetter("spaceId")
        public EnvironmentIdStage spaceId(SpaceId spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        @Override
        @JsonSetter("environmentId")
        public _FinalStage environmentId(EnvironmentId environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        /**
         * <p>The actions attached to the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage actions(List<Action> actions) {
            this.actions = Optional.of(actions);
            return this;
        }

        @Override
        @JsonSetter(value = "actions", nulls = Nulls.SKIP)
        public _FinalStage actions(Optional<List<Action>> actions) {
            this.actions = actions;
            return this;
        }

        /**
         * <p>The storage mode of file to insert, defaults to &quot;import&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage mode(Mode mode) {
            this.mode = Optional.of(mode);
            return this;
        }

        @Override
        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public _FinalStage mode(Optional<Mode> mode) {
            this.mode = mode;
            return this;
        }

        @Override
        public CreateFileRequest build() {
            return new CreateFileRequest(spaceId, environmentId, mode, actions, additionalProperties);
        }
    }
}
