/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.files.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.files.types.Mode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListFilesRequest.Builder.class)
public final class ListFilesRequest {
    private final Optional<String> spaceId;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> pageNumber;

    private final Optional<Mode> mode;

    private final Map<String, Object> additionalProperties;

    private ListFilesRequest(
            Optional<String> spaceId,
            Optional<Integer> pageSize,
            Optional<Integer> pageNumber,
            Optional<Mode> mode,
            Map<String, Object> additionalProperties) {
        this.spaceId = spaceId;
        this.pageSize = pageSize;
        this.pageNumber = pageNumber;
        this.mode = mode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("spaceId")
    public Optional<String> getSpaceId() {
        return spaceId;
    }

    /**
     * @return Number of jobs to return in a page (default 20)
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Based on pageSize, which page of jobs to return
     */
    @JsonProperty("pageNumber")
    public Optional<Integer> getPageNumber() {
        return pageNumber;
    }

    /**
     * @return The storage mode of file to fetch, defaults to &quot;import&quot;
     */
    @JsonProperty("mode")
    public Optional<Mode> getMode() {
        return mode;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListFilesRequest && equalTo((ListFilesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListFilesRequest other) {
        return spaceId.equals(other.spaceId)
                && pageSize.equals(other.pageSize)
                && pageNumber.equals(other.pageNumber)
                && mode.equals(other.mode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.spaceId, this.pageSize, this.pageNumber, this.mode);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> spaceId = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> pageNumber = Optional.empty();

        private Optional<Mode> mode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListFilesRequest other) {
            spaceId(other.getSpaceId());
            pageSize(other.getPageSize());
            pageNumber(other.getPageNumber());
            mode(other.getMode());
            return this;
        }

        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public Builder spaceId(Optional<String> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        public Builder spaceId(String spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.of(pageSize);
            return this;
        }

        @JsonSetter(value = "pageNumber", nulls = Nulls.SKIP)
        public Builder pageNumber(Optional<Integer> pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        public Builder pageNumber(Integer pageNumber) {
            this.pageNumber = Optional.of(pageNumber);
            return this;
        }

        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Mode> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Mode mode) {
            this.mode = Optional.of(mode);
            return this;
        }

        public ListFilesRequest build() {
            return new ListFilesRequest(spaceId, pageSize, pageNumber, mode, additionalProperties);
        }
    }
}
