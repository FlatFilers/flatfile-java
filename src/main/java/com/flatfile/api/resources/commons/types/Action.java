/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Action.Builder.class)
public final class Action {
    private final Optional<String> slug;

    private final Optional<String> operation;

    private final Optional<ActionMode> mode;

    private final String label;

    private final Optional<String> tooltip;

    private final Optional<String> type;

    private final Optional<String> description;

    private final Optional<ActionSchedule> schedule;

    private final Optional<Boolean> primary;

    private final Optional<Boolean> confirm;

    private final Optional<String> icon;

    private final Optional<Boolean> requireAllValid;

    private final Optional<Boolean> requireSelection;

    private final Optional<InputForm> inputForm;

    private final Optional<List<ActionConstraint>> constraints;

    private final Map<String, Object> additionalProperties;

    private Action(
            Optional<String> slug,
            Optional<String> operation,
            Optional<ActionMode> mode,
            String label,
            Optional<String> tooltip,
            Optional<String> type,
            Optional<String> description,
            Optional<ActionSchedule> schedule,
            Optional<Boolean> primary,
            Optional<Boolean> confirm,
            Optional<String> icon,
            Optional<Boolean> requireAllValid,
            Optional<Boolean> requireSelection,
            Optional<InputForm> inputForm,
            Optional<List<ActionConstraint>> constraints,
            Map<String, Object> additionalProperties) {
        this.slug = slug;
        this.operation = operation;
        this.mode = mode;
        this.label = label;
        this.tooltip = tooltip;
        this.type = type;
        this.description = description;
        this.schedule = schedule;
        this.primary = primary;
        this.confirm = confirm;
        this.icon = icon;
        this.requireAllValid = requireAllValid;
        this.requireSelection = requireSelection;
        this.inputForm = inputForm;
        this.constraints = constraints;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("slug")
    public Optional<String> getSlug() {
        return slug;
    }

    @JsonProperty("operation")
    public Optional<String> getOperation() {
        return operation;
    }

    @JsonProperty("mode")
    public Optional<ActionMode> getMode() {
        return mode;
    }

    @JsonProperty("label")
    public String getLabel() {
        return label;
    }

    @JsonProperty("tooltip")
    public Optional<String> getTooltip() {
        return tooltip;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("schedule")
    public Optional<ActionSchedule> getSchedule() {
        return schedule;
    }

    @JsonProperty("primary")
    public Optional<Boolean> getPrimary() {
        return primary;
    }

    @JsonProperty("confirm")
    public Optional<Boolean> getConfirm() {
        return confirm;
    }

    @JsonProperty("icon")
    public Optional<String> getIcon() {
        return icon;
    }

    @JsonProperty("requireAllValid")
    public Optional<Boolean> getRequireAllValid() {
        return requireAllValid;
    }

    @JsonProperty("requireSelection")
    public Optional<Boolean> getRequireSelection() {
        return requireSelection;
    }

    @JsonProperty("inputForm")
    public Optional<InputForm> getInputForm() {
        return inputForm;
    }

    @JsonProperty("constraints")
    public Optional<List<ActionConstraint>> getConstraints() {
        return constraints;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Action && equalTo((Action) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Action other) {
        return slug.equals(other.slug)
                && operation.equals(other.operation)
                && mode.equals(other.mode)
                && label.equals(other.label)
                && tooltip.equals(other.tooltip)
                && type.equals(other.type)
                && description.equals(other.description)
                && schedule.equals(other.schedule)
                && primary.equals(other.primary)
                && confirm.equals(other.confirm)
                && icon.equals(other.icon)
                && requireAllValid.equals(other.requireAllValid)
                && requireSelection.equals(other.requireSelection)
                && inputForm.equals(other.inputForm)
                && constraints.equals(other.constraints);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.slug,
                this.operation,
                this.mode,
                this.label,
                this.tooltip,
                this.type,
                this.description,
                this.schedule,
                this.primary,
                this.confirm,
                this.icon,
                this.requireAllValid,
                this.requireSelection,
                this.inputForm,
                this.constraints);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LabelStage builder() {
        return new Builder();
    }

    public interface LabelStage {
        _FinalStage label(String label);

        Builder from(Action other);
    }

    public interface _FinalStage {
        Action build();

        _FinalStage slug(Optional<String> slug);

        _FinalStage slug(String slug);

        _FinalStage operation(Optional<String> operation);

        _FinalStage operation(String operation);

        _FinalStage mode(Optional<ActionMode> mode);

        _FinalStage mode(ActionMode mode);

        _FinalStage tooltip(Optional<String> tooltip);

        _FinalStage tooltip(String tooltip);

        _FinalStage type(Optional<String> type);

        _FinalStage type(String type);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage schedule(Optional<ActionSchedule> schedule);

        _FinalStage schedule(ActionSchedule schedule);

        _FinalStage primary(Optional<Boolean> primary);

        _FinalStage primary(Boolean primary);

        _FinalStage confirm(Optional<Boolean> confirm);

        _FinalStage confirm(Boolean confirm);

        _FinalStage icon(Optional<String> icon);

        _FinalStage icon(String icon);

        _FinalStage requireAllValid(Optional<Boolean> requireAllValid);

        _FinalStage requireAllValid(Boolean requireAllValid);

        _FinalStage requireSelection(Optional<Boolean> requireSelection);

        _FinalStage requireSelection(Boolean requireSelection);

        _FinalStage inputForm(Optional<InputForm> inputForm);

        _FinalStage inputForm(InputForm inputForm);

        _FinalStage constraints(Optional<List<ActionConstraint>> constraints);

        _FinalStage constraints(List<ActionConstraint> constraints);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LabelStage, _FinalStage {
        private String label;

        private Optional<List<ActionConstraint>> constraints = Optional.empty();

        private Optional<InputForm> inputForm = Optional.empty();

        private Optional<Boolean> requireSelection = Optional.empty();

        private Optional<Boolean> requireAllValid = Optional.empty();

        private Optional<String> icon = Optional.empty();

        private Optional<Boolean> confirm = Optional.empty();

        private Optional<Boolean> primary = Optional.empty();

        private Optional<ActionSchedule> schedule = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> tooltip = Optional.empty();

        private Optional<ActionMode> mode = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<String> slug = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Action other) {
            slug(other.getSlug());
            operation(other.getOperation());
            mode(other.getMode());
            label(other.getLabel());
            tooltip(other.getTooltip());
            type(other.getType());
            description(other.getDescription());
            schedule(other.getSchedule());
            primary(other.getPrimary());
            confirm(other.getConfirm());
            icon(other.getIcon());
            requireAllValid(other.getRequireAllValid());
            requireSelection(other.getRequireSelection());
            inputForm(other.getInputForm());
            constraints(other.getConstraints());
            return this;
        }

        @Override
        @JsonSetter("label")
        public _FinalStage label(String label) {
            this.label = label;
            return this;
        }

        @Override
        public _FinalStage constraints(List<ActionConstraint> constraints) {
            this.constraints = Optional.of(constraints);
            return this;
        }

        @Override
        @JsonSetter(value = "constraints", nulls = Nulls.SKIP)
        public _FinalStage constraints(Optional<List<ActionConstraint>> constraints) {
            this.constraints = constraints;
            return this;
        }

        @Override
        public _FinalStage inputForm(InputForm inputForm) {
            this.inputForm = Optional.of(inputForm);
            return this;
        }

        @Override
        @JsonSetter(value = "inputForm", nulls = Nulls.SKIP)
        public _FinalStage inputForm(Optional<InputForm> inputForm) {
            this.inputForm = inputForm;
            return this;
        }

        @Override
        public _FinalStage requireSelection(Boolean requireSelection) {
            this.requireSelection = Optional.of(requireSelection);
            return this;
        }

        @Override
        @JsonSetter(value = "requireSelection", nulls = Nulls.SKIP)
        public _FinalStage requireSelection(Optional<Boolean> requireSelection) {
            this.requireSelection = requireSelection;
            return this;
        }

        @Override
        public _FinalStage requireAllValid(Boolean requireAllValid) {
            this.requireAllValid = Optional.of(requireAllValid);
            return this;
        }

        @Override
        @JsonSetter(value = "requireAllValid", nulls = Nulls.SKIP)
        public _FinalStage requireAllValid(Optional<Boolean> requireAllValid) {
            this.requireAllValid = requireAllValid;
            return this;
        }

        @Override
        public _FinalStage icon(String icon) {
            this.icon = Optional.of(icon);
            return this;
        }

        @Override
        @JsonSetter(value = "icon", nulls = Nulls.SKIP)
        public _FinalStage icon(Optional<String> icon) {
            this.icon = icon;
            return this;
        }

        @Override
        public _FinalStage confirm(Boolean confirm) {
            this.confirm = Optional.of(confirm);
            return this;
        }

        @Override
        @JsonSetter(value = "confirm", nulls = Nulls.SKIP)
        public _FinalStage confirm(Optional<Boolean> confirm) {
            this.confirm = confirm;
            return this;
        }

        @Override
        public _FinalStage primary(Boolean primary) {
            this.primary = Optional.of(primary);
            return this;
        }

        @Override
        @JsonSetter(value = "primary", nulls = Nulls.SKIP)
        public _FinalStage primary(Optional<Boolean> primary) {
            this.primary = primary;
            return this;
        }

        @Override
        public _FinalStage schedule(ActionSchedule schedule) {
            this.schedule = Optional.of(schedule);
            return this;
        }

        @Override
        @JsonSetter(value = "schedule", nulls = Nulls.SKIP)
        public _FinalStage schedule(Optional<ActionSchedule> schedule) {
            this.schedule = schedule;
            return this;
        }

        @Override
        public _FinalStage description(String description) {
            this.description = Optional.of(description);
            return this;
        }

        @Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @Override
        public _FinalStage type(String type) {
            this.type = Optional.of(type);
            return this;
        }

        @Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<String> type) {
            this.type = type;
            return this;
        }

        @Override
        public _FinalStage tooltip(String tooltip) {
            this.tooltip = Optional.of(tooltip);
            return this;
        }

        @Override
        @JsonSetter(value = "tooltip", nulls = Nulls.SKIP)
        public _FinalStage tooltip(Optional<String> tooltip) {
            this.tooltip = tooltip;
            return this;
        }

        @Override
        public _FinalStage mode(ActionMode mode) {
            this.mode = Optional.of(mode);
            return this;
        }

        @Override
        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public _FinalStage mode(Optional<ActionMode> mode) {
            this.mode = mode;
            return this;
        }

        @Override
        public _FinalStage operation(String operation) {
            this.operation = Optional.of(operation);
            return this;
        }

        @Override
        @JsonSetter(value = "operation", nulls = Nulls.SKIP)
        public _FinalStage operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        @Override
        public _FinalStage slug(String slug) {
            this.slug = Optional.of(slug);
            return this;
        }

        @Override
        @JsonSetter(value = "slug", nulls = Nulls.SKIP)
        public _FinalStage slug(Optional<String> slug) {
            this.slug = slug;
            return this;
        }

        @Override
        public Action build() {
            return new Action(
                    slug,
                    operation,
                    mode,
                    label,
                    tooltip,
                    type,
                    description,
                    schedule,
                    primary,
                    confirm,
                    icon,
                    requireAllValid,
                    requireSelection,
                    inputForm,
                    constraints,
                    additionalProperties);
        }
    }
}
