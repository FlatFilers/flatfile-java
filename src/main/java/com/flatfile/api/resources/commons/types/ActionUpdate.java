/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ActionUpdate.Builder.class)
public final class ActionUpdate implements IActionWithoutLabel {
    private final Optional<String> slug;

    private final Optional<String> operation;

    private final Optional<ActionMode> mode;

    private final Optional<String> tooltip;

    private final Optional<List<ActionMessage>> messages;

    private final Optional<String> type;

    private final Optional<String> description;

    private final Optional<ActionSchedule> schedule;

    private final Optional<Boolean> primary;

    private final Optional<Boolean> confirm;

    private final Optional<String> icon;

    private final Optional<Boolean> requireAllValid;

    private final Optional<Boolean> requireSelection;

    private final Optional<InputForm> inputForm;

    private final Optional<List<ActionConstraint>> constraints;

    private final Optional<ActionMount> mount;

    private final Optional<Guide> guide;

    private final Optional<Guardrail> guardrail;

    private final Optional<String> label;

    private final Map<String, Object> additionalProperties;

    private ActionUpdate(
            Optional<String> slug,
            Optional<String> operation,
            Optional<ActionMode> mode,
            Optional<String> tooltip,
            Optional<List<ActionMessage>> messages,
            Optional<String> type,
            Optional<String> description,
            Optional<ActionSchedule> schedule,
            Optional<Boolean> primary,
            Optional<Boolean> confirm,
            Optional<String> icon,
            Optional<Boolean> requireAllValid,
            Optional<Boolean> requireSelection,
            Optional<InputForm> inputForm,
            Optional<List<ActionConstraint>> constraints,
            Optional<ActionMount> mount,
            Optional<Guide> guide,
            Optional<Guardrail> guardrail,
            Optional<String> label,
            Map<String, Object> additionalProperties) {
        this.slug = slug;
        this.operation = operation;
        this.mode = mode;
        this.tooltip = tooltip;
        this.messages = messages;
        this.type = type;
        this.description = description;
        this.schedule = schedule;
        this.primary = primary;
        this.confirm = confirm;
        this.icon = icon;
        this.requireAllValid = requireAllValid;
        this.requireSelection = requireSelection;
        this.inputForm = inputForm;
        this.constraints = constraints;
        this.mount = mount;
        this.guide = guide;
        this.guardrail = guardrail;
        this.label = label;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <strong>This is deprecated. Use <code>operation</code> instead.</strong>
     */
    @JsonProperty("slug")
    @java.lang.Override
    public Optional<String> getSlug() {
        return slug;
    }

    /**
     * @return This will become the job operation that is triggered
     */
    @JsonProperty("operation")
    @java.lang.Override
    public Optional<String> getOperation() {
        return operation;
    }

    /**
     * @return Foreground and toolbarBlocking action mode will prevent interacting with the resource until complete
     */
    @JsonProperty("mode")
    @java.lang.Override
    public Optional<ActionMode> getMode() {
        return mode;
    }

    /**
     * @return A tooltip that appears when hovering the action button
     */
    @JsonProperty("tooltip")
    @java.lang.Override
    public Optional<String> getTooltip() {
        return tooltip;
    }

    @JsonProperty("messages")
    @java.lang.Override
    public Optional<List<ActionMessage>> getMessages() {
        return messages;
    }

    /**
     * @return <strong>This is deprecated.</strong>
     */
    @JsonProperty("type")
    @java.lang.Override
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return The text that appears in the dialog after the action is clicked.
     */
    @JsonProperty("description")
    @java.lang.Override
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Determines if the action should happen on a regular cadence.
     */
    @JsonProperty("schedule")
    @java.lang.Override
    public Optional<ActionSchedule> getSchedule() {
        return schedule;
    }

    /**
     * @return A primary action will be more visibly present, whether in Sheet or Workbook.
     */
    @JsonProperty("primary")
    @java.lang.Override
    public Optional<Boolean> getPrimary() {
        return primary;
    }

    /**
     * @return Whether to show a modal to confirm the action
     */
    @JsonProperty("confirm")
    @java.lang.Override
    public Optional<Boolean> getConfirm() {
        return confirm;
    }

    /**
     * @return Icon will work on primary actions. It will only accept an already existing Flatfile design system icon.
     */
    @JsonProperty("icon")
    @java.lang.Override
    public Optional<String> getIcon() {
        return icon;
    }

    /**
     * @return <strong>This is deprecated. Use <code>constraints</code> instead.</strong>
     */
    @JsonProperty("requireAllValid")
    @java.lang.Override
    public Optional<Boolean> getRequireAllValid() {
        return requireAllValid;
    }

    /**
     * @return <strong>This is deprecated. Use <code>constraints</code> instead.</strong>
     */
    @JsonProperty("requireSelection")
    @java.lang.Override
    public Optional<Boolean> getRequireSelection() {
        return requireSelection;
    }

    /**
     * @return Adds an input form for this action after it is clicked.
     */
    @JsonProperty("inputForm")
    @java.lang.Override
    public Optional<InputForm> getInputForm() {
        return inputForm;
    }

    /**
     * @return A limitation or restriction on the action.
     */
    @JsonProperty("constraints")
    @java.lang.Override
    public Optional<List<ActionConstraint>> getConstraints() {
        return constraints;
    }

    @JsonProperty("mount")
    @java.lang.Override
    public Optional<ActionMount> getMount() {
        return mount;
    }

    @JsonProperty("guide")
    @java.lang.Override
    public Optional<Guide> getGuide() {
        return guide;
    }

    @JsonProperty("guardrail")
    @java.lang.Override
    public Optional<Guardrail> getGuardrail() {
        return guardrail;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ActionUpdate && equalTo((ActionUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ActionUpdate other) {
        return slug.equals(other.slug)
                && operation.equals(other.operation)
                && mode.equals(other.mode)
                && tooltip.equals(other.tooltip)
                && messages.equals(other.messages)
                && type.equals(other.type)
                && description.equals(other.description)
                && schedule.equals(other.schedule)
                && primary.equals(other.primary)
                && confirm.equals(other.confirm)
                && icon.equals(other.icon)
                && requireAllValid.equals(other.requireAllValid)
                && requireSelection.equals(other.requireSelection)
                && inputForm.equals(other.inputForm)
                && constraints.equals(other.constraints)
                && mount.equals(other.mount)
                && guide.equals(other.guide)
                && guardrail.equals(other.guardrail)
                && label.equals(other.label);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.slug,
                this.operation,
                this.mode,
                this.tooltip,
                this.messages,
                this.type,
                this.description,
                this.schedule,
                this.primary,
                this.confirm,
                this.icon,
                this.requireAllValid,
                this.requireSelection,
                this.inputForm,
                this.constraints,
                this.mount,
                this.guide,
                this.guardrail,
                this.label);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> slug = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<ActionMode> mode = Optional.empty();

        private Optional<String> tooltip = Optional.empty();

        private Optional<List<ActionMessage>> messages = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<ActionSchedule> schedule = Optional.empty();

        private Optional<Boolean> primary = Optional.empty();

        private Optional<Boolean> confirm = Optional.empty();

        private Optional<String> icon = Optional.empty();

        private Optional<Boolean> requireAllValid = Optional.empty();

        private Optional<Boolean> requireSelection = Optional.empty();

        private Optional<InputForm> inputForm = Optional.empty();

        private Optional<List<ActionConstraint>> constraints = Optional.empty();

        private Optional<ActionMount> mount = Optional.empty();

        private Optional<Guide> guide = Optional.empty();

        private Optional<Guardrail> guardrail = Optional.empty();

        private Optional<String> label = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ActionUpdate other) {
            slug(other.getSlug());
            operation(other.getOperation());
            mode(other.getMode());
            tooltip(other.getTooltip());
            messages(other.getMessages());
            type(other.getType());
            description(other.getDescription());
            schedule(other.getSchedule());
            primary(other.getPrimary());
            confirm(other.getConfirm());
            icon(other.getIcon());
            requireAllValid(other.getRequireAllValid());
            requireSelection(other.getRequireSelection());
            inputForm(other.getInputForm());
            constraints(other.getConstraints());
            mount(other.getMount());
            guide(other.getGuide());
            guardrail(other.getGuardrail());
            label(other.getLabel());
            return this;
        }

        @JsonSetter(value = "slug", nulls = Nulls.SKIP)
        public Builder slug(Optional<String> slug) {
            this.slug = slug;
            return this;
        }

        public Builder slug(String slug) {
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        @JsonSetter(value = "operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<ActionMode> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(ActionMode mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        @JsonSetter(value = "tooltip", nulls = Nulls.SKIP)
        public Builder tooltip(Optional<String> tooltip) {
            this.tooltip = tooltip;
            return this;
        }

        public Builder tooltip(String tooltip) {
            this.tooltip = Optional.ofNullable(tooltip);
            return this;
        }

        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<ActionMessage>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<ActionMessage> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "schedule", nulls = Nulls.SKIP)
        public Builder schedule(Optional<ActionSchedule> schedule) {
            this.schedule = schedule;
            return this;
        }

        public Builder schedule(ActionSchedule schedule) {
            this.schedule = Optional.ofNullable(schedule);
            return this;
        }

        @JsonSetter(value = "primary", nulls = Nulls.SKIP)
        public Builder primary(Optional<Boolean> primary) {
            this.primary = primary;
            return this;
        }

        public Builder primary(Boolean primary) {
            this.primary = Optional.ofNullable(primary);
            return this;
        }

        @JsonSetter(value = "confirm", nulls = Nulls.SKIP)
        public Builder confirm(Optional<Boolean> confirm) {
            this.confirm = confirm;
            return this;
        }

        public Builder confirm(Boolean confirm) {
            this.confirm = Optional.ofNullable(confirm);
            return this;
        }

        @JsonSetter(value = "icon", nulls = Nulls.SKIP)
        public Builder icon(Optional<String> icon) {
            this.icon = icon;
            return this;
        }

        public Builder icon(String icon) {
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        @JsonSetter(value = "requireAllValid", nulls = Nulls.SKIP)
        public Builder requireAllValid(Optional<Boolean> requireAllValid) {
            this.requireAllValid = requireAllValid;
            return this;
        }

        public Builder requireAllValid(Boolean requireAllValid) {
            this.requireAllValid = Optional.ofNullable(requireAllValid);
            return this;
        }

        @JsonSetter(value = "requireSelection", nulls = Nulls.SKIP)
        public Builder requireSelection(Optional<Boolean> requireSelection) {
            this.requireSelection = requireSelection;
            return this;
        }

        public Builder requireSelection(Boolean requireSelection) {
            this.requireSelection = Optional.ofNullable(requireSelection);
            return this;
        }

        @JsonSetter(value = "inputForm", nulls = Nulls.SKIP)
        public Builder inputForm(Optional<InputForm> inputForm) {
            this.inputForm = inputForm;
            return this;
        }

        public Builder inputForm(InputForm inputForm) {
            this.inputForm = Optional.ofNullable(inputForm);
            return this;
        }

        @JsonSetter(value = "constraints", nulls = Nulls.SKIP)
        public Builder constraints(Optional<List<ActionConstraint>> constraints) {
            this.constraints = constraints;
            return this;
        }

        public Builder constraints(List<ActionConstraint> constraints) {
            this.constraints = Optional.ofNullable(constraints);
            return this;
        }

        @JsonSetter(value = "mount", nulls = Nulls.SKIP)
        public Builder mount(Optional<ActionMount> mount) {
            this.mount = mount;
            return this;
        }

        public Builder mount(ActionMount mount) {
            this.mount = Optional.ofNullable(mount);
            return this;
        }

        @JsonSetter(value = "guide", nulls = Nulls.SKIP)
        public Builder guide(Optional<Guide> guide) {
            this.guide = guide;
            return this;
        }

        public Builder guide(Guide guide) {
            this.guide = Optional.ofNullable(guide);
            return this;
        }

        @JsonSetter(value = "guardrail", nulls = Nulls.SKIP)
        public Builder guardrail(Optional<Guardrail> guardrail) {
            this.guardrail = guardrail;
            return this;
        }

        public Builder guardrail(Guardrail guardrail) {
            this.guardrail = Optional.ofNullable(guardrail);
            return this;
        }

        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        public ActionUpdate build() {
            return new ActionUpdate(
                    slug,
                    operation,
                    mode,
                    tooltip,
                    messages,
                    type,
                    description,
                    schedule,
                    primary,
                    confirm,
                    icon,
                    requireAllValid,
                    requireSelection,
                    inputForm,
                    constraints,
                    mount,
                    guide,
                    guardrail,
                    label,
                    additionalProperties);
        }
    }
}
