/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AccessToken.Builder.class)
public final class AccessToken {
    private final String accessToken;

    private final String expiresIn;

    private final String expires;

    private final Optional<String> email;

    private final Optional<UserId> userId;

    private final Optional<AccountId> accountId;

    private final Map<String, Object> additionalProperties;

    private AccessToken(
            String accessToken,
            String expiresIn,
            String expires,
            Optional<String> email,
            Optional<UserId> userId,
            Optional<AccountId> accountId,
            Map<String, Object> additionalProperties) {
        this.accessToken = accessToken;
        this.expiresIn = expiresIn;
        this.expires = expires;
        this.email = email;
        this.userId = userId;
        this.accountId = accountId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accessToken")
    public String getAccessToken() {
        return accessToken;
    }

    @JsonProperty("expiresIn")
    public String getExpiresIn() {
        return expiresIn;
    }

    @JsonProperty("expires")
    public String getExpires() {
        return expires;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("userId")
    public Optional<UserId> getUserId() {
        return userId;
    }

    @JsonProperty("accountId")
    public Optional<AccountId> getAccountId() {
        return accountId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccessToken && equalTo((AccessToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccessToken other) {
        return accessToken.equals(other.accessToken)
                && expiresIn.equals(other.expiresIn)
                && expires.equals(other.expires)
                && email.equals(other.email)
                && userId.equals(other.userId)
                && accountId.equals(other.accountId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.accessToken, this.expiresIn, this.expires, this.email, this.userId, this.accountId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccessTokenStage builder() {
        return new Builder();
    }

    public interface AccessTokenStage {
        ExpiresInStage accessToken(String accessToken);

        Builder from(AccessToken other);
    }

    public interface ExpiresInStage {
        ExpiresStage expiresIn(String expiresIn);
    }

    public interface ExpiresStage {
        _FinalStage expires(String expires);
    }

    public interface _FinalStage {
        AccessToken build();

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        _FinalStage userId(Optional<UserId> userId);

        _FinalStage userId(UserId userId);

        _FinalStage accountId(Optional<AccountId> accountId);

        _FinalStage accountId(AccountId accountId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccessTokenStage, ExpiresInStage, ExpiresStage, _FinalStage {
        private String accessToken;

        private String expiresIn;

        private String expires;

        private Optional<AccountId> accountId = Optional.empty();

        private Optional<UserId> userId = Optional.empty();

        private Optional<String> email = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(AccessToken other) {
            accessToken(other.getAccessToken());
            expiresIn(other.getExpiresIn());
            expires(other.getExpires());
            email(other.getEmail());
            userId(other.getUserId());
            accountId(other.getAccountId());
            return this;
        }

        @Override
        @JsonSetter("accessToken")
        public ExpiresInStage accessToken(String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        @Override
        @JsonSetter("expiresIn")
        public ExpiresStage expiresIn(String expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        @Override
        @JsonSetter("expires")
        public _FinalStage expires(String expires) {
            this.expires = expires;
            return this;
        }

        @Override
        public _FinalStage accountId(AccountId accountId) {
            this.accountId = Optional.of(accountId);
            return this;
        }

        @Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<AccountId> accountId) {
            this.accountId = accountId;
            return this;
        }

        @Override
        public _FinalStage userId(UserId userId) {
            this.userId = Optional.of(userId);
            return this;
        }

        @Override
        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public _FinalStage userId(Optional<UserId> userId) {
            this.userId = userId;
            return this;
        }

        @Override
        public _FinalStage email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @Override
        public AccessToken build() {
            return new AccessToken(accessToken, expiresIn, expires, email, userId, accountId, additionalProperties);
        }
    }
}
