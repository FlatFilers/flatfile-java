/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InputField.Builder.class)
public final class InputField {
    private final String key;

    private final String label;

    private final Optional<String> description;

    private final String type;

    private final Optional<Object> defaultValue;

    private final Optional<InputConfig> config;

    private final Optional<List<InputConstraint>> constraints;

    private final Map<String, Object> additionalProperties;

    private InputField(
            String key,
            String label,
            Optional<String> description,
            String type,
            Optional<Object> defaultValue,
            Optional<InputConfig> config,
            Optional<List<InputConstraint>> constraints,
            Map<String, Object> additionalProperties) {
        this.key = key;
        this.label = label;
        this.description = description;
        this.type = type;
        this.defaultValue = defaultValue;
        this.config = config;
        this.constraints = constraints;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique key for a Field.
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * @return Visible name of a Field.
     */
    @JsonProperty("label")
    public String getLabel() {
        return label;
    }

    /**
     * @return Brief description below the name of the Field.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Field Types inform the user interface how to sort and display data.
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return Default value for a Field.
     */
    @JsonProperty("defaultValue")
    public Optional<Object> getDefaultValue() {
        return defaultValue;
    }

    /**
     * @return Additional configuration for enum Fields.
     */
    @JsonProperty("config")
    public Optional<InputConfig> getConfig() {
        return config;
    }

    /**
     * @return Indicate additional validations that will be applied to the Field.
     */
    @JsonProperty("constraints")
    public Optional<List<InputConstraint>> getConstraints() {
        return constraints;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InputField && equalTo((InputField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InputField other) {
        return key.equals(other.key)
                && label.equals(other.label)
                && description.equals(other.description)
                && type.equals(other.type)
                && defaultValue.equals(other.defaultValue)
                && config.equals(other.config)
                && constraints.equals(other.constraints);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.key, this.label, this.description, this.type, this.defaultValue, this.config, this.constraints);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KeyStage builder() {
        return new Builder();
    }

    public interface KeyStage {
        LabelStage key(String key);

        Builder from(InputField other);
    }

    public interface LabelStage {
        TypeStage label(String label);
    }

    public interface TypeStage {
        _FinalStage type(String type);
    }

    public interface _FinalStage {
        InputField build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage defaultValue(Optional<Object> defaultValue);

        _FinalStage defaultValue(Object defaultValue);

        _FinalStage config(Optional<InputConfig> config);

        _FinalStage config(InputConfig config);

        _FinalStage constraints(Optional<List<InputConstraint>> constraints);

        _FinalStage constraints(List<InputConstraint> constraints);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KeyStage, LabelStage, TypeStage, _FinalStage {
        private String key;

        private String label;

        private String type;

        private Optional<List<InputConstraint>> constraints = Optional.empty();

        private Optional<InputConfig> config = Optional.empty();

        private Optional<Object> defaultValue = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InputField other) {
            key(other.getKey());
            label(other.getLabel());
            description(other.getDescription());
            type(other.getType());
            defaultValue(other.getDefaultValue());
            config(other.getConfig());
            constraints(other.getConstraints());
            return this;
        }

        /**
         * <p>Unique key for a Field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("key")
        public LabelStage key(String key) {
            this.key = key;
            return this;
        }

        /**
         * <p>Visible name of a Field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("label")
        public TypeStage label(String label) {
            this.label = label;
            return this;
        }

        /**
         * <p>Field Types inform the user interface how to sort and display data.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(String type) {
            this.type = type;
            return this;
        }

        /**
         * <p>Indicate additional validations that will be applied to the Field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage constraints(List<InputConstraint> constraints) {
            this.constraints = Optional.of(constraints);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "constraints", nulls = Nulls.SKIP)
        public _FinalStage constraints(Optional<List<InputConstraint>> constraints) {
            this.constraints = constraints;
            return this;
        }

        /**
         * <p>Additional configuration for enum Fields.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage config(InputConfig config) {
            this.config = Optional.of(config);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<InputConfig> config) {
            this.config = config;
            return this;
        }

        /**
         * <p>Default value for a Field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage defaultValue(Object defaultValue) {
            this.defaultValue = Optional.of(defaultValue);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "defaultValue", nulls = Nulls.SKIP)
        public _FinalStage defaultValue(Optional<Object> defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }

        /**
         * <p>Brief description below the name of the Field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.of(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public InputField build() {
            return new InputField(
                    key, label, description, type, defaultValue, config, constraints, additionalProperties);
        }
    }
}
