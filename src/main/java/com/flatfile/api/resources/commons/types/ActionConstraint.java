/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ActionConstraint {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ActionConstraint(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ActionConstraint hasAllValid(ActionConstraintHasAllValid value) {
        return new ActionConstraint(new HasAllValidValue(value));
    }

    public static ActionConstraint hasSelection(ActionConstraintHasSelection value) {
        return new ActionConstraint(new HasSelectionValue(value));
    }

    public static ActionConstraint hasData(ActionConstraintHasData value) {
        return new ActionConstraint(new HasDataValue(value));
    }

    public boolean isHasAllValid() {
        return value instanceof HasAllValidValue;
    }

    public boolean isHasSelection() {
        return value instanceof HasSelectionValue;
    }

    public boolean isHasData() {
        return value instanceof HasDataValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ActionConstraintHasAllValid> getHasAllValid() {
        if (isHasAllValid()) {
            return Optional.of(((HasAllValidValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ActionConstraintHasSelection> getHasSelection() {
        if (isHasSelection()) {
            return Optional.of(((HasSelectionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ActionConstraintHasData> getHasData() {
        if (isHasData()) {
            return Optional.of(((HasDataValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitHasAllValid(ActionConstraintHasAllValid hasAllValid);

        T visitHasSelection(ActionConstraintHasSelection hasSelection);

        T visitHasData(ActionConstraintHasData hasData);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(HasAllValidValue.class),
        @JsonSubTypes.Type(HasSelectionValue.class),
        @JsonSubTypes.Type(HasDataValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("hasAllValid")
    private static final class HasAllValidValue implements Value {
        @JsonUnwrapped
        private ActionConstraintHasAllValid value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HasAllValidValue() {}

        private HasAllValidValue(ActionConstraintHasAllValid value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHasAllValid(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HasAllValidValue && equalTo((HasAllValidValue) other);
        }

        private boolean equalTo(HasAllValidValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ActionConstraint{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("hasSelection")
    private static final class HasSelectionValue implements Value {
        @JsonUnwrapped
        private ActionConstraintHasSelection value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HasSelectionValue() {}

        private HasSelectionValue(ActionConstraintHasSelection value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHasSelection(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HasSelectionValue && equalTo((HasSelectionValue) other);
        }

        private boolean equalTo(HasSelectionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ActionConstraint{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("hasData")
    private static final class HasDataValue implements Value {
        @JsonUnwrapped
        private ActionConstraintHasData value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HasDataValue() {}

        private HasDataValue(ActionConstraintHasData value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHasData(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HasDataValue && equalTo((HasDataValue) other);
        }

        private boolean equalTo(HasDataValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ActionConstraint{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ActionConstraint{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
