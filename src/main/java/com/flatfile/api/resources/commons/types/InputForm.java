/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InputForm.Builder.class)
public final class InputForm {
    private final InputFormType type;

    private final List<InputField> fields;

    private final Map<String, Object> additionalProperties;

    private InputForm(InputFormType type, List<InputField> fields, Map<String, Object> additionalProperties) {
        this.type = type;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public InputFormType getType() {
        return type;
    }

    @JsonProperty("fields")
    public List<InputField> getFields() {
        return fields;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InputForm && equalTo((InputForm) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InputForm other) {
        return type.equals(other.type) && fields.equals(other.fields);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.type, this.fields);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(InputFormType type);

        Builder from(InputForm other);
    }

    public interface _FinalStage {
        InputForm build();

        _FinalStage fields(List<InputField> fields);

        _FinalStage addFields(InputField fields);

        _FinalStage addAllFields(List<InputField> fields);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private InputFormType type;

        private List<InputField> fields = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(InputForm other) {
            type(other.getType());
            fields(other.getFields());
            return this;
        }

        @Override
        @JsonSetter("type")
        public _FinalStage type(InputFormType type) {
            this.type = type;
            return this;
        }

        @Override
        public _FinalStage addAllFields(List<InputField> fields) {
            this.fields.addAll(fields);
            return this;
        }

        @Override
        public _FinalStage addFields(InputField fields) {
            this.fields.add(fields);
            return this;
        }

        @Override
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public _FinalStage fields(List<InputField> fields) {
            this.fields.clear();
            this.fields.addAll(fields);
            return this;
        }

        @Override
        public InputForm build() {
            return new InputForm(type, fields, additionalProperties);
        }
    }
}
