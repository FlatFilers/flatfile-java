/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Pagination.Builder.class)
public final class Pagination {
    private final int currentPage;

    private final int pageCount;

    private final int totalCount;

    private final Map<String, Object> additionalProperties;

    private Pagination(int currentPage, int pageCount, int totalCount, Map<String, Object> additionalProperties) {
        this.currentPage = currentPage;
        this.pageCount = pageCount;
        this.totalCount = totalCount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return current page of results
     */
    @JsonProperty("currentPage")
    public int getCurrentPage() {
        return currentPage;
    }

    /**
     * @return total number of pages of results
     */
    @JsonProperty("pageCount")
    public int getPageCount() {
        return pageCount;
    }

    /**
     * @return total available results
     */
    @JsonProperty("totalCount")
    public int getTotalCount() {
        return totalCount;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Pagination && equalTo((Pagination) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Pagination other) {
        return currentPage == other.currentPage && pageCount == other.pageCount && totalCount == other.totalCount;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.currentPage, this.pageCount, this.totalCount);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CurrentPageStage builder() {
        return new Builder();
    }

    public interface CurrentPageStage {
        PageCountStage currentPage(int currentPage);

        Builder from(Pagination other);
    }

    public interface PageCountStage {
        TotalCountStage pageCount(int pageCount);
    }

    public interface TotalCountStage {
        _FinalStage totalCount(int totalCount);
    }

    public interface _FinalStage {
        Pagination build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CurrentPageStage, PageCountStage, TotalCountStage, _FinalStage {
        private int currentPage;

        private int pageCount;

        private int totalCount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Pagination other) {
            currentPage(other.getCurrentPage());
            pageCount(other.getPageCount());
            totalCount(other.getTotalCount());
            return this;
        }

        /**
         * <p>current page of results</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("currentPage")
        public PageCountStage currentPage(int currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * <p>total number of pages of results</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("pageCount")
        public TotalCountStage pageCount(int pageCount) {
            this.pageCount = pageCount;
            return this;
        }

        /**
         * <p>total available results</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("totalCount")
        public _FinalStage totalCount(int totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        @Override
        public Pagination build() {
            return new Pagination(currentPage, pageCount, totalCount, additionalProperties);
        }
    }
}
