/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.secrets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.EnvironmentId;
import com.flatfile.api.resources.commons.types.SpaceId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = WriteSecret.Builder.class)
public final class WriteSecret implements IWriteSecret {
    private final SecretName name;

    private final SecretValue value;

    private final EnvironmentId environmentId;

    private final Optional<SpaceId> spaceId;

    private final Map<String, Object> additionalProperties;

    private WriteSecret(
            SecretName name,
            SecretValue value,
            EnvironmentId environmentId,
            Optional<SpaceId> spaceId,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.value = value;
        this.environmentId = environmentId;
        this.spaceId = spaceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    @Override
    public SecretName getName() {
        return name;
    }

    @JsonProperty("value")
    @Override
    public SecretValue getValue() {
        return value;
    }

    @JsonProperty("environmentId")
    @Override
    public EnvironmentId getEnvironmentId() {
        return environmentId;
    }

    @JsonProperty("spaceId")
    @Override
    public Optional<SpaceId> getSpaceId() {
        return spaceId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WriteSecret && equalTo((WriteSecret) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WriteSecret other) {
        return name.equals(other.name)
                && value.equals(other.value)
                && environmentId.equals(other.environmentId)
                && spaceId.equals(other.spaceId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.name, this.value, this.environmentId, this.spaceId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        ValueStage name(SecretName name);

        Builder from(WriteSecret other);
    }

    public interface ValueStage {
        EnvironmentIdStage value(SecretValue value);
    }

    public interface EnvironmentIdStage {
        _FinalStage environmentId(EnvironmentId environmentId);
    }

    public interface _FinalStage {
        WriteSecret build();

        _FinalStage spaceId(Optional<SpaceId> spaceId);

        _FinalStage spaceId(SpaceId spaceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ValueStage, EnvironmentIdStage, _FinalStage {
        private SecretName name;

        private SecretValue value;

        private EnvironmentId environmentId;

        private Optional<SpaceId> spaceId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(WriteSecret other) {
            name(other.getName());
            value(other.getValue());
            environmentId(other.getEnvironmentId());
            spaceId(other.getSpaceId());
            return this;
        }

        @Override
        @JsonSetter("name")
        public ValueStage name(SecretName name) {
            this.name = name;
            return this;
        }

        @Override
        @JsonSetter("value")
        public EnvironmentIdStage value(SecretValue value) {
            this.value = value;
            return this;
        }

        @Override
        @JsonSetter("environmentId")
        public _FinalStage environmentId(EnvironmentId environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        @Override
        public _FinalStage spaceId(SpaceId spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        @Override
        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public _FinalStage spaceId(Optional<SpaceId> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        @Override
        public WriteSecret build() {
            return new WriteSecret(name, value, environmentId, spaceId, additionalProperties);
        }
    }
}
