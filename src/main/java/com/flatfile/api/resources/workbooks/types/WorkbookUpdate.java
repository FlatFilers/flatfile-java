/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.workbooks.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.Action;
import com.flatfile.api.resources.sheets.types.SheetConfigOrUpdate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = WorkbookUpdate.Builder.class)
public final class WorkbookUpdate {
    private final Optional<String> name;

    private final Optional<List<String>> labels;

    private final Optional<String> spaceId;

    private final Optional<String> environmentId;

    private final Optional<String> namespace;

    private final Optional<List<SheetConfigOrUpdate>> sheets;

    private final Optional<List<Action>> actions;

    private final Optional<Object> metadata;

    private final Map<String, Object> additionalProperties;

    private WorkbookUpdate(
            Optional<String> name,
            Optional<List<String>> labels,
            Optional<String> spaceId,
            Optional<String> environmentId,
            Optional<String> namespace,
            Optional<List<SheetConfigOrUpdate>> sheets,
            Optional<List<Action>> actions,
            Optional<Object> metadata,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.labels = labels;
        this.spaceId = spaceId;
        this.environmentId = environmentId;
        this.namespace = namespace;
        this.sheets = sheets;
        this.actions = actions;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("labels")
    public Optional<List<String>> getLabels() {
        return labels;
    }

    @JsonProperty("spaceId")
    public Optional<String> getSpaceId() {
        return spaceId;
    }

    @JsonProperty("environmentId")
    public Optional<String> getEnvironmentId() {
        return environmentId;
    }

    @JsonProperty("namespace")
    public Optional<String> getNamespace() {
        return namespace;
    }

    @JsonProperty("sheets")
    public Optional<List<SheetConfigOrUpdate>> getSheets() {
        return sheets;
    }

    @JsonProperty("actions")
    public Optional<List<Action>> getActions() {
        return actions;
    }

    /**
     * @return Metadata for the workbook
     */
    @JsonProperty("metadata")
    public Optional<Object> getMetadata() {
        return metadata;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WorkbookUpdate && equalTo((WorkbookUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WorkbookUpdate other) {
        return name.equals(other.name)
                && labels.equals(other.labels)
                && spaceId.equals(other.spaceId)
                && environmentId.equals(other.environmentId)
                && namespace.equals(other.namespace)
                && sheets.equals(other.sheets)
                && actions.equals(other.actions)
                && metadata.equals(other.metadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.labels,
                this.spaceId,
                this.environmentId,
                this.namespace,
                this.sheets,
                this.actions,
                this.metadata);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<List<String>> labels = Optional.empty();

        private Optional<String> spaceId = Optional.empty();

        private Optional<String> environmentId = Optional.empty();

        private Optional<String> namespace = Optional.empty();

        private Optional<List<SheetConfigOrUpdate>> sheets = Optional.empty();

        private Optional<List<Action>> actions = Optional.empty();

        private Optional<Object> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(WorkbookUpdate other) {
            name(other.getName());
            labels(other.getLabels());
            spaceId(other.getSpaceId());
            environmentId(other.getEnvironmentId());
            namespace(other.getNamespace());
            sheets(other.getSheets());
            actions(other.getActions());
            metadata(other.getMetadata());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @JsonSetter(value = "labels", nulls = Nulls.SKIP)
        public Builder labels(Optional<List<String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(List<String> labels) {
            this.labels = Optional.of(labels);
            return this;
        }

        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public Builder spaceId(Optional<String> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        public Builder spaceId(String spaceId) {
            this.spaceId = Optional.of(spaceId);
            return this;
        }

        @JsonSetter(value = "environmentId", nulls = Nulls.SKIP)
        public Builder environmentId(Optional<String> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            this.environmentId = Optional.of(environmentId);
            return this;
        }

        @JsonSetter(value = "namespace", nulls = Nulls.SKIP)
        public Builder namespace(Optional<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Optional.of(namespace);
            return this;
        }

        @JsonSetter(value = "sheets", nulls = Nulls.SKIP)
        public Builder sheets(Optional<List<SheetConfigOrUpdate>> sheets) {
            this.sheets = sheets;
            return this;
        }

        public Builder sheets(List<SheetConfigOrUpdate> sheets) {
            this.sheets = Optional.of(sheets);
            return this;
        }

        @JsonSetter(value = "actions", nulls = Nulls.SKIP)
        public Builder actions(Optional<List<Action>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder actions(List<Action> actions) {
            this.actions = Optional.of(actions);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Object metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        public WorkbookUpdate build() {
            return new WorkbookUpdate(
                    name, labels, spaceId, environmentId, namespace, sheets, actions, metadata, additionalProperties);
        }
    }
}
