/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.workbooks.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.SpaceId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListWorkbooksRequest.Builder.class)
public final class ListWorkbooksRequest {
    private final Optional<SpaceId> spaceId;

    private final Optional<String> name;

    private final Optional<String> namespace;

    private final Optional<String> label;

    private final Optional<String> treatment;

    private final Optional<Boolean> includeSheets;

    private final Optional<Boolean> includeCounts;

    private final Map<String, Object> additionalProperties;

    private ListWorkbooksRequest(
            Optional<SpaceId> spaceId,
            Optional<String> name,
            Optional<String> namespace,
            Optional<String> label,
            Optional<String> treatment,
            Optional<Boolean> includeSheets,
            Optional<Boolean> includeCounts,
            Map<String, Object> additionalProperties) {
        this.spaceId = spaceId;
        this.name = name;
        this.namespace = namespace;
        this.label = label;
        this.treatment = treatment;
        this.includeSheets = includeSheets;
        this.includeCounts = includeCounts;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The associated Space ID of the Workbook.
     */
    @JsonProperty("spaceId")
    public Optional<SpaceId> getSpaceId() {
        return spaceId;
    }

    /**
     * @return Filter by name. Precede with - to negate the filter
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Filter by namespace. Precede with - to negate the filter
     */
    @JsonProperty("namespace")
    public Optional<String> getNamespace() {
        return namespace;
    }

    /**
     * @return Filter by label. Precede with - to negate the filter
     */
    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    /**
     * @return Filter by treatment.
     */
    @JsonProperty("treatment")
    public Optional<String> getTreatment() {
        return treatment;
    }

    /**
     * @return Include sheets for the workbook (default true)
     */
    @JsonProperty("includeSheets")
    public Optional<Boolean> getIncludeSheets() {
        return includeSheets;
    }

    /**
     * @return Include counts for the workbook. <strong>DEPRECATED</strong> Counts will return 0s. Use GET /sheets/:sheetId/counts
     */
    @JsonProperty("includeCounts")
    public Optional<Boolean> getIncludeCounts() {
        return includeCounts;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListWorkbooksRequest && equalTo((ListWorkbooksRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListWorkbooksRequest other) {
        return spaceId.equals(other.spaceId)
                && name.equals(other.name)
                && namespace.equals(other.namespace)
                && label.equals(other.label)
                && treatment.equals(other.treatment)
                && includeSheets.equals(other.includeSheets)
                && includeCounts.equals(other.includeCounts);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.spaceId,
                this.name,
                this.namespace,
                this.label,
                this.treatment,
                this.includeSheets,
                this.includeCounts);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SpaceId> spaceId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> namespace = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<String> treatment = Optional.empty();

        private Optional<Boolean> includeSheets = Optional.empty();

        private Optional<Boolean> includeCounts = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListWorkbooksRequest other) {
            spaceId(other.getSpaceId());
            name(other.getName());
            namespace(other.getNamespace());
            label(other.getLabel());
            treatment(other.getTreatment());
            includeSheets(other.getIncludeSheets());
            includeCounts(other.getIncludeCounts());
            return this;
        }

        @JsonSetter(value = "spaceId", nulls = Nulls.SKIP)
        public Builder spaceId(Optional<SpaceId> spaceId) {
            this.spaceId = spaceId;
            return this;
        }

        public Builder spaceId(SpaceId spaceId) {
            this.spaceId = Optional.ofNullable(spaceId);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "namespace", nulls = Nulls.SKIP)
        public Builder namespace(Optional<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Optional.ofNullable(namespace);
            return this;
        }

        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        @JsonSetter(value = "treatment", nulls = Nulls.SKIP)
        public Builder treatment(Optional<String> treatment) {
            this.treatment = treatment;
            return this;
        }

        public Builder treatment(String treatment) {
            this.treatment = Optional.ofNullable(treatment);
            return this;
        }

        @JsonSetter(value = "includeSheets", nulls = Nulls.SKIP)
        public Builder includeSheets(Optional<Boolean> includeSheets) {
            this.includeSheets = includeSheets;
            return this;
        }

        public Builder includeSheets(Boolean includeSheets) {
            this.includeSheets = Optional.ofNullable(includeSheets);
            return this;
        }

        @JsonSetter(value = "includeCounts", nulls = Nulls.SKIP)
        public Builder includeCounts(Optional<Boolean> includeCounts) {
            this.includeCounts = includeCounts;
            return this;
        }

        public Builder includeCounts(Boolean includeCounts) {
            this.includeCounts = Optional.ofNullable(includeCounts);
            return this;
        }

        public ListWorkbooksRequest build() {
            return new ListWorkbooksRequest(
                    spaceId, name, namespace, label, treatment, includeSheets, includeCounts, additionalProperties);
        }
    }
}
