/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.environments.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GuideUpdateRequest.Builder.class)
public final class GuideUpdateRequest {
    private final Optional<String> description;

    private final Optional<String> title;

    private final Optional<Map<String, Object>> metadata;

    private final Optional<String> slug;

    private final Optional<List<GuideVersionResource>> versions;

    private final Optional<List<Optional<Map<String, Object>>>> blocks;

    private final Optional<String> environmentId;

    private final Map<String, Object> additionalProperties;

    private GuideUpdateRequest(
            Optional<String> description,
            Optional<String> title,
            Optional<Map<String, Object>> metadata,
            Optional<String> slug,
            Optional<List<GuideVersionResource>> versions,
            Optional<List<Optional<Map<String, Object>>>> blocks,
            Optional<String> environmentId,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.title = title;
        this.metadata = metadata;
        this.slug = slug;
        this.versions = versions;
        this.blocks = blocks;
        this.environmentId = environmentId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("title")
    public Optional<String> getTitle() {
        return title;
    }

    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @JsonProperty("slug")
    public Optional<String> getSlug() {
        return slug;
    }

    @JsonProperty("versions")
    public Optional<List<GuideVersionResource>> getVersions() {
        return versions;
    }

    @JsonProperty("blocks")
    public Optional<List<Optional<Map<String, Object>>>> getBlocks() {
        return blocks;
    }

    @JsonProperty("environmentId")
    public Optional<String> getEnvironmentId() {
        return environmentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GuideUpdateRequest && equalTo((GuideUpdateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GuideUpdateRequest other) {
        return description.equals(other.description)
                && title.equals(other.title)
                && metadata.equals(other.metadata)
                && slug.equals(other.slug)
                && versions.equals(other.versions)
                && blocks.equals(other.blocks)
                && environmentId.equals(other.environmentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.description, this.title, this.metadata, this.slug, this.versions, this.blocks, this.environmentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<String> slug = Optional.empty();

        private Optional<List<GuideVersionResource>> versions = Optional.empty();

        private Optional<List<Optional<Map<String, Object>>>> blocks = Optional.empty();

        private Optional<String> environmentId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GuideUpdateRequest other) {
            description(other.getDescription());
            title(other.getTitle());
            metadata(other.getMetadata());
            slug(other.getSlug());
            versions(other.getVersions());
            blocks(other.getBlocks());
            environmentId(other.getEnvironmentId());
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "slug", nulls = Nulls.SKIP)
        public Builder slug(Optional<String> slug) {
            this.slug = slug;
            return this;
        }

        public Builder slug(String slug) {
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        @JsonSetter(value = "versions", nulls = Nulls.SKIP)
        public Builder versions(Optional<List<GuideVersionResource>> versions) {
            this.versions = versions;
            return this;
        }

        public Builder versions(List<GuideVersionResource> versions) {
            this.versions = Optional.ofNullable(versions);
            return this;
        }

        @JsonSetter(value = "blocks", nulls = Nulls.SKIP)
        public Builder blocks(Optional<List<Optional<Map<String, Object>>>> blocks) {
            this.blocks = blocks;
            return this;
        }

        public Builder blocks(List<Optional<Map<String, Object>>> blocks) {
            this.blocks = Optional.ofNullable(blocks);
            return this;
        }

        @JsonSetter(value = "environmentId", nulls = Nulls.SKIP)
        public Builder environmentId(Optional<String> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            this.environmentId = Optional.ofNullable(environmentId);
            return this;
        }

        public GuideUpdateRequest build() {
            return new GuideUpdateRequest(
                    description, title, metadata, slug, versions, blocks, environmentId, additionalProperties);
        }
    }
}
