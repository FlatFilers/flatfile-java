/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.environments.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.GuideId;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GuideResource.Builder.class)
public final class GuideResource {
    private final GuideId id;

    private final Optional<String> description;

    private final Optional<Map<String, Object>> metadata;

    private final String slug;

    private final String title;

    private final List<GuideVersionResource> versions;

    private final List<Optional<Map<String, Object>>> blocks;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private GuideResource(
            GuideId id,
            Optional<String> description,
            Optional<Map<String, Object>> metadata,
            String slug,
            String title,
            List<GuideVersionResource> versions,
            List<Optional<Map<String, Object>>> blocks,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.description = description;
        this.metadata = metadata;
        this.slug = slug;
        this.title = title;
        this.versions = versions;
        this.blocks = blocks;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public GuideId getId() {
        return id;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    @JsonProperty("versions")
    public List<GuideVersionResource> getVersions() {
        return versions;
    }

    @JsonProperty("blocks")
    public List<Optional<Map<String, Object>>> getBlocks() {
        return blocks;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GuideResource && equalTo((GuideResource) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GuideResource other) {
        return id.equals(other.id)
                && description.equals(other.description)
                && metadata.equals(other.metadata)
                && slug.equals(other.slug)
                && title.equals(other.title)
                && versions.equals(other.versions)
                && blocks.equals(other.blocks)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.description,
                this.metadata,
                this.slug,
                this.title,
                this.versions,
                this.blocks,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        SlugStage id(@NotNull GuideId id);

        Builder from(GuideResource other);
    }

    public interface SlugStage {
        TitleStage slug(@NotNull String slug);
    }

    public interface TitleStage {
        CreatedAtStage title(@NotNull String title);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        GuideResource build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);

        _FinalStage versions(List<GuideVersionResource> versions);

        _FinalStage addVersions(GuideVersionResource versions);

        _FinalStage addAllVersions(List<GuideVersionResource> versions);

        _FinalStage blocks(List<Optional<Map<String, Object>>> blocks);

        _FinalStage addBlocks(Optional<Map<String, Object>> blocks);

        _FinalStage addAllBlocks(List<Optional<Map<String, Object>>> blocks);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, SlugStage, TitleStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private GuideId id;

        private String slug;

        private String title;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private List<Optional<Map<String, Object>>> blocks = new ArrayList<>();

        private List<GuideVersionResource> versions = new ArrayList<>();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GuideResource other) {
            id(other.getId());
            description(other.getDescription());
            metadata(other.getMetadata());
            slug(other.getSlug());
            title(other.getTitle());
            versions(other.getVersions());
            blocks(other.getBlocks());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public SlugStage id(@NotNull GuideId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("slug")
        public TitleStage slug(@NotNull String slug) {
            this.slug = Objects.requireNonNull(slug, "slug must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("title")
        public CreatedAtStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllBlocks(List<Optional<Map<String, Object>>> blocks) {
            this.blocks.addAll(blocks);
            return this;
        }

        @java.lang.Override
        public _FinalStage addBlocks(Optional<Map<String, Object>> blocks) {
            this.blocks.add(blocks);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "blocks", nulls = Nulls.SKIP)
        public _FinalStage blocks(List<Optional<Map<String, Object>>> blocks) {
            this.blocks.clear();
            this.blocks.addAll(blocks);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllVersions(List<GuideVersionResource> versions) {
            this.versions.addAll(versions);
            return this;
        }

        @java.lang.Override
        public _FinalStage addVersions(GuideVersionResource versions) {
            this.versions.add(versions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "versions", nulls = Nulls.SKIP)
        public _FinalStage versions(List<GuideVersionResource> versions) {
            this.versions.clear();
            this.versions.addAll(versions);
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public GuideResource build() {
            return new GuideResource(
                    id,
                    description,
                    metadata,
                    slug,
                    title,
                    versions,
                    blocks,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
