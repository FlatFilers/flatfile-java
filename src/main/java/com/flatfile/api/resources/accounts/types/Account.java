/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.accounts.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import com.flatfile.api.resources.commons.types.AccountId;
import com.flatfile.api.resources.commons.types.AppId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Account.Builder.class)
public final class Account {
    private final AccountId id;

    private final String name;

    private final Optional<String> subdomain;

    private final Optional<String> vanityDomainDashboard;

    private final Optional<String> vanityDomainSpaces;

    private final Optional<List<String>> embeddedDomainWhitelist;

    private final Optional<String> customFromEmail;

    private final Optional<String> stripeCustomerId;

    private final Map<String, Object> metadata;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<AppId> defaultAppId;

    private final Optional<Integer> dashboard;

    private final Map<String, Object> additionalProperties;

    private Account(
            AccountId id,
            String name,
            Optional<String> subdomain,
            Optional<String> vanityDomainDashboard,
            Optional<String> vanityDomainSpaces,
            Optional<List<String>> embeddedDomainWhitelist,
            Optional<String> customFromEmail,
            Optional<String> stripeCustomerId,
            Map<String, Object> metadata,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<AppId> defaultAppId,
            Optional<Integer> dashboard,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.subdomain = subdomain;
        this.vanityDomainDashboard = vanityDomainDashboard;
        this.vanityDomainSpaces = vanityDomainSpaces;
        this.embeddedDomainWhitelist = embeddedDomainWhitelist;
        this.customFromEmail = customFromEmail;
        this.stripeCustomerId = stripeCustomerId;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.defaultAppId = defaultAppId;
        this.dashboard = dashboard;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public AccountId getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @JsonProperty("vanityDomainDashboard")
    public Optional<String> getVanityDomainDashboard() {
        return vanityDomainDashboard;
    }

    @JsonProperty("vanityDomainSpaces")
    public Optional<String> getVanityDomainSpaces() {
        return vanityDomainSpaces;
    }

    @JsonProperty("embeddedDomainWhitelist")
    public Optional<List<String>> getEmbeddedDomainWhitelist() {
        return embeddedDomainWhitelist;
    }

    @JsonProperty("customFromEmail")
    public Optional<String> getCustomFromEmail() {
        return customFromEmail;
    }

    @JsonProperty("stripeCustomerId")
    public Optional<String> getStripeCustomerId() {
        return stripeCustomerId;
    }

    @JsonProperty("metadata")
    public Map<String, Object> getMetadata() {
        return metadata;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("defaultAppId")
    public Optional<AppId> getDefaultAppId() {
        return defaultAppId;
    }

    @JsonProperty("dashboard")
    public Optional<Integer> getDashboard() {
        return dashboard;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Account && equalTo((Account) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Account other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && subdomain.equals(other.subdomain)
                && vanityDomainDashboard.equals(other.vanityDomainDashboard)
                && vanityDomainSpaces.equals(other.vanityDomainSpaces)
                && embeddedDomainWhitelist.equals(other.embeddedDomainWhitelist)
                && customFromEmail.equals(other.customFromEmail)
                && stripeCustomerId.equals(other.stripeCustomerId)
                && metadata.equals(other.metadata)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && defaultAppId.equals(other.defaultAppId)
                && dashboard.equals(other.dashboard);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.subdomain,
                this.vanityDomainDashboard,
                this.vanityDomainSpaces,
                this.embeddedDomainWhitelist,
                this.customFromEmail,
                this.stripeCustomerId,
                this.metadata,
                this.createdAt,
                this.updatedAt,
                this.defaultAppId,
                this.dashboard);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(@NotNull AccountId id);

        Builder from(Account other);
    }

    public interface NameStage {
        CreatedAtStage name(@NotNull String name);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Account build();

        _FinalStage subdomain(Optional<String> subdomain);

        _FinalStage subdomain(String subdomain);

        _FinalStage vanityDomainDashboard(Optional<String> vanityDomainDashboard);

        _FinalStage vanityDomainDashboard(String vanityDomainDashboard);

        _FinalStage vanityDomainSpaces(Optional<String> vanityDomainSpaces);

        _FinalStage vanityDomainSpaces(String vanityDomainSpaces);

        _FinalStage embeddedDomainWhitelist(Optional<List<String>> embeddedDomainWhitelist);

        _FinalStage embeddedDomainWhitelist(List<String> embeddedDomainWhitelist);

        _FinalStage customFromEmail(Optional<String> customFromEmail);

        _FinalStage customFromEmail(String customFromEmail);

        _FinalStage stripeCustomerId(Optional<String> stripeCustomerId);

        _FinalStage stripeCustomerId(String stripeCustomerId);

        _FinalStage metadata(Map<String, Object> metadata);

        _FinalStage putAllMetadata(Map<String, Object> metadata);

        _FinalStage metadata(String key, Object value);

        _FinalStage defaultAppId(Optional<AppId> defaultAppId);

        _FinalStage defaultAppId(AppId defaultAppId);

        _FinalStage dashboard(Optional<Integer> dashboard);

        _FinalStage dashboard(Integer dashboard);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private AccountId id;

        private String name;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Integer> dashboard = Optional.empty();

        private Optional<AppId> defaultAppId = Optional.empty();

        private Map<String, Object> metadata = new LinkedHashMap<>();

        private Optional<String> stripeCustomerId = Optional.empty();

        private Optional<String> customFromEmail = Optional.empty();

        private Optional<List<String>> embeddedDomainWhitelist = Optional.empty();

        private Optional<String> vanityDomainSpaces = Optional.empty();

        private Optional<String> vanityDomainDashboard = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Account other) {
            id(other.getId());
            name(other.getName());
            subdomain(other.getSubdomain());
            vanityDomainDashboard(other.getVanityDomainDashboard());
            vanityDomainSpaces(other.getVanityDomainSpaces());
            embeddedDomainWhitelist(other.getEmbeddedDomainWhitelist());
            customFromEmail(other.getCustomFromEmail());
            stripeCustomerId(other.getStripeCustomerId());
            metadata(other.getMetadata());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            defaultAppId(other.getDefaultAppId());
            dashboard(other.getDashboard());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(@NotNull AccountId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public CreatedAtStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage dashboard(Integer dashboard) {
            this.dashboard = Optional.ofNullable(dashboard);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dashboard", nulls = Nulls.SKIP)
        public _FinalStage dashboard(Optional<Integer> dashboard) {
            this.dashboard = dashboard;
            return this;
        }

        @java.lang.Override
        public _FinalStage defaultAppId(AppId defaultAppId) {
            this.defaultAppId = Optional.ofNullable(defaultAppId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "defaultAppId", nulls = Nulls.SKIP)
        public _FinalStage defaultAppId(Optional<AppId> defaultAppId) {
            this.defaultAppId = defaultAppId;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(String key, Object value) {
            this.metadata.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, Object> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        public _FinalStage stripeCustomerId(String stripeCustomerId) {
            this.stripeCustomerId = Optional.ofNullable(stripeCustomerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeCustomerId", nulls = Nulls.SKIP)
        public _FinalStage stripeCustomerId(Optional<String> stripeCustomerId) {
            this.stripeCustomerId = stripeCustomerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage customFromEmail(String customFromEmail) {
            this.customFromEmail = Optional.ofNullable(customFromEmail);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "customFromEmail", nulls = Nulls.SKIP)
        public _FinalStage customFromEmail(Optional<String> customFromEmail) {
            this.customFromEmail = customFromEmail;
            return this;
        }

        @java.lang.Override
        public _FinalStage embeddedDomainWhitelist(List<String> embeddedDomainWhitelist) {
            this.embeddedDomainWhitelist = Optional.ofNullable(embeddedDomainWhitelist);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "embeddedDomainWhitelist", nulls = Nulls.SKIP)
        public _FinalStage embeddedDomainWhitelist(Optional<List<String>> embeddedDomainWhitelist) {
            this.embeddedDomainWhitelist = embeddedDomainWhitelist;
            return this;
        }

        @java.lang.Override
        public _FinalStage vanityDomainSpaces(String vanityDomainSpaces) {
            this.vanityDomainSpaces = Optional.ofNullable(vanityDomainSpaces);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vanityDomainSpaces", nulls = Nulls.SKIP)
        public _FinalStage vanityDomainSpaces(Optional<String> vanityDomainSpaces) {
            this.vanityDomainSpaces = vanityDomainSpaces;
            return this;
        }

        @java.lang.Override
        public _FinalStage vanityDomainDashboard(String vanityDomainDashboard) {
            this.vanityDomainDashboard = Optional.ofNullable(vanityDomainDashboard);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vanityDomainDashboard", nulls = Nulls.SKIP)
        public _FinalStage vanityDomainDashboard(Optional<String> vanityDomainDashboard) {
            this.vanityDomainDashboard = vanityDomainDashboard;
            return this;
        }

        @java.lang.Override
        public _FinalStage subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public _FinalStage subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        @java.lang.Override
        public Account build() {
            return new Account(
                    id,
                    name,
                    subdomain,
                    vanityDomainDashboard,
                    vanityDomainSpaces,
                    embeddedDomainWhitelist,
                    customFromEmail,
                    stripeCustomerId,
                    metadata,
                    createdAt,
                    updatedAt,
                    defaultAppId,
                    dashboard,
                    additionalProperties);
        }
    }
}
