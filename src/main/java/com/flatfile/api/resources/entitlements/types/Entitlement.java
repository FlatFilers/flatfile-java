/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flatfile.api.resources.entitlements.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flatfile.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Entitlement.Builder.class)
public final class Entitlement {
    private final String key;

    private final Object metadata;

    private final Map<String, Object> additionalProperties;

    private Entitlement(String key, Object metadata, Map<String, Object> additionalProperties) {
        this.key = key;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Short name for the entitlement
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * @return Contains conditions or limits for an entitlement
     */
    @JsonProperty("metadata")
    public Object getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Entitlement && equalTo((Entitlement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Entitlement other) {
        return key.equals(other.key) && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.key, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KeyStage builder() {
        return new Builder();
    }

    public interface KeyStage {
        MetadataStage key(String key);

        Builder from(Entitlement other);
    }

    public interface MetadataStage {
        _FinalStage metadata(Object metadata);
    }

    public interface _FinalStage {
        Entitlement build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KeyStage, MetadataStage, _FinalStage {
        private String key;

        private Object metadata;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Entitlement other) {
            key(other.getKey());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>Short name for the entitlement</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("key")
        public MetadataStage key(String key) {
            this.key = key;
            return this;
        }

        /**
         * <p>Contains conditions or limits for an entitlement</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("metadata")
        public _FinalStage metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public Entitlement build() {
            return new Entitlement(key, metadata, additionalProperties);
        }
    }
}
